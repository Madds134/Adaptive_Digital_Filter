
ADC_DMA_RTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800bbf8  0800bbf8  0000cbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c420  0800c420  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c420  0800c420  0000d420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c428  0800c428  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c428  0800c428  0000d428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c42c  0800c42c  0000d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c430  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066a8  200001d8  0800c608  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006880  0800c608  0000e880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b58  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b87  00000000  00000000  00025d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  000298e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c8  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e73  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7c2  00000000  00000000  00052dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaa17  00000000  00000000  0006d585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157f9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dfc  00000000  00000000  00157fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015eddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bbdc 	.word	0x0800bbdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800bbdc 	.word	0x0800bbdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <UART_Write>:

/**
 * @brief Thread-safe, is a blocking UART transmit
 */
static void UART_Write(const uint8_t *data, uint16_t len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <UART_Write+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 f8f3 	bl	80060d8 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4808      	ldr	r0, [pc, #32]	@ (8000f1c <UART_Write+0x44>)
 8000efc:	f004 f922 	bl	8005144 <HAL_UART_Transmit>
	xSemaphoreGive(xUartMutex);
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <UART_Write+0x40>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f004 ff01 	bl	8005d10 <xQueueGenericSend>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000a10 	.word	0x20000a10
 8000f1c:	2000298c 	.word	0x2000298c

08000f20 <fmt_csv_line>:
 * @param v	Floating-point value to format
 * @param dst Destination character buffer to receive the formatted string
 * @param dst_size Size of the destination buffer in bytes
 */
static inline uint16_t fmt_csv_line(float32_t v, char *dst, size_t dst_size)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f2a:	60b8      	str	r0, [r7, #8]
 8000f2c:	6079      	str	r1, [r7, #4]
    int n = snprintf(dst, dst_size, "%.6f\r\n", (double)v);
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff fb2a 	bl	8000588 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	e9cd 2300 	strd	r2, r3, [sp]
 8000f3c:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <fmt_csv_line+0x40>)
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f007 fe5b 	bl	8008bfc <sniprintf>
 8000f46:	6178      	str	r0, [r7, #20]
    return (n > 0) ? (uint16_t)n : 0;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dd02      	ble.n	8000f54 <fmt_csv_line+0x34>
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	e000      	b.n	8000f56 <fmt_csv_line+0x36>
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800bbf8 	.word	0x0800bbf8

08000f64 <SamplerTask>:

/*
 * @brief Task that starts the DMA, then suspends the task
 */
static void SamplerTask(void *arg)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    // Ensure half-transfer & transfer-complete IT are enabled
    __HAL_DMA_ENABLE_IT(hadc1.DMA_Handle, DMA_IT_HT);
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <SamplerTask+0x5c>)
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <SamplerTask+0x5c>)
 8000f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0208 	orr.w	r2, r2, #8
 8000f7e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(hadc1.DMA_Handle, DMA_IT_TC);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <SamplerTask+0x5c>)
 8000f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <SamplerTask+0x5c>)
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0210 	orr.w	r2, r2, #16
 8000f92:	601a      	str	r2, [r3, #0]

    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, ADC_BUF_LEN) != HAL_OK)
 8000f94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f98:	490a      	ldr	r1, [pc, #40]	@ (8000fc4 <SamplerTask+0x60>)
 8000f9a:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <SamplerTask+0x5c>)
 8000f9c:	f001 fa6a 	bl	8002474 <HAL_ADC_Start_DMA>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SamplerTask+0x46>
    {
        for(;;) {}
 8000fa6:	bf00      	nop
 8000fa8:	e7fd      	b.n	8000fa6 <SamplerTask+0x42>
    }

    // Start the 1kHz trigger for ADC
    HAL_TIM_Base_Start(&htim3);
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <SamplerTask+0x64>)
 8000fac:	f003 fd8e 	bl	8004acc <HAL_TIM_Base_Start>

    // Nothing else to do; DMA runs in background and ISRs will trigger filterTask
    vTaskSuspend(NULL);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f005 fd17 	bl	80069e4 <vTaskSuspend>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000289c 	.word	0x2000289c
 8000fc4:	20000204 	.word	0x20000204
 8000fc8:	20002944 	.word	0x20002944

08000fcc <HAL_ADC_ConvHalfCpltCallback>:
/**
 * @brief ISR for when DMA half transfer is complete, when the HT interrupt is fired
 * @details DMA handoff to the RTOS inside the ISR
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d117      	bne.n	800100e <HAL_ADC_ConvHalfCpltCallback+0x42>
    {
        BaseType_t hpw = pdFALSE; // Flag for if high priority task was woken
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
        activeHalf = 0;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
        vTaskNotifyGiveFromISR(filterTaskHandle, &hpw);
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f006 fbac 	bl	8007750 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(hpw); // Request context switch if task woken
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <HAL_ADC_ConvHalfCpltCallback+0x42>
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	f3bf 8f6f 	isb	sy
    }
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012000 	.word	0x40012000
 800101c:	20000a04 	.word	0x20000a04
 8001020:	200001f8 	.word	0x200001f8
 8001024:	e000ed04 	.word	0xe000ed04

08001028 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief ISR for when DMA transfer is complete, when the TC interrupt is fired
 * @details DMA handoff to the RTOS inside the ISR
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d117      	bne.n	800106a <HAL_ADC_ConvCpltCallback+0x42>
    {
        BaseType_t hpw = pdFALSE; // Flag for if high priority task was woken
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
        activeHalf = 1;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_ADC_ConvCpltCallback+0x50>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
        vTaskNotifyGiveFromISR(filterTaskHandle, &hpw);
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_ADC_ConvCpltCallback+0x54>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f006 fb7e 	bl	8007750 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(hpw);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <HAL_ADC_ConvCpltCallback+0x42>
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_ADC_ConvCpltCallback+0x58>)
 800105c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	f3bf 8f6f 	isb	sy
    }
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012000 	.word	0x40012000
 8001078:	20000a04 	.word	0x20000a04
 800107c:	200001f8 	.word	0x200001f8
 8001080:	e000ed04 	.word	0xe000ed04

08001084 <FilterTask>:

/*
 * @brief FilterTask: block on notifications, process the ready half
 */
static void FilterTask(void *arg)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        // Block until either half or full interrupt occurs
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	2001      	movs	r0, #1
 8001092:	f006 fb15 	bl	80076c0 <ulTaskNotifyTake>

        // Snapshot which half the ISR said is ready
        uint32_t start = (activeHalf == 0) ? 0 : (ADC_BUF_LEN / 2);
 8001096:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <FilterTask+0x138>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <FilterTask+0x20>
 80010a0:	2300      	movs	r3, #0
 80010a2:	e001      	b.n	80010a8 <FilterTask+0x24>
 80010a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a8:	61fb      	str	r3, [r7, #28]
        uint32_t count = ADC_BUF_LEN / 2;
 80010aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ae:	61bb      	str	r3, [r7, #24]

        // Convert ADC samples to floats
        for (uint32_t i = 0; i < count; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010b4:	e012      	b.n	80010dc <FilterTask+0x58>
        {
            inBlock[i] = (float32_t)adcBuf[start + i];
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ba:	4413      	add	r3, r2
 80010bc:	4a40      	ldr	r2, [pc, #256]	@ (80011c0 <FilterTask+0x13c>)
 80010be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	4a3e      	ldr	r2, [pc, #248]	@ (80011c4 <FilterTask+0x140>)
 80010cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t i = 0; i < count; i++)
 80010d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d8:	3301      	adds	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3e8      	bcc.n	80010b6 <FilterTask+0x32>
        }

        // Run the filter, protected under a mutex
        xSemaphoreTake(gBiquadMutex, portMAX_DELAY);
 80010e4:	4b38      	ldr	r3, [pc, #224]	@ (80011c8 <FilterTask+0x144>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fff3 	bl	80060d8 <xQueueSemaphoreTake>
        arm_biquad_cascade_df1_f32(&gBiq, inBlock, outBlock, count);
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4a35      	ldr	r2, [pc, #212]	@ (80011cc <FilterTask+0x148>)
 80010f6:	4933      	ldr	r1, [pc, #204]	@ (80011c4 <FilterTask+0x140>)
 80010f8:	4835      	ldr	r0, [pc, #212]	@ (80011d0 <FilterTask+0x14c>)
 80010fa:	f001 f846 	bl	800218a <arm_biquad_cascade_df1_f32>
        xSemaphoreGive(gBiquadMutex);
 80010fe:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <FilterTask+0x144>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	f004 fe02 	bl	8005d10 <xQueueGenericSend>

        // Debug toggle to see if the processing is happening
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800110c:	2120      	movs	r1, #32
 800110e:	4831      	ldr	r0, [pc, #196]	@ (80011d4 <FilterTask+0x150>)
 8001110:	f002 ff0f 	bl	8003f32 <HAL_GPIO_TogglePin>

        // hand off filtered samples to UARTTask in chunks
        uint32_t produced = count;
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t idx = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24

        // Loop until handed off all samples
        while (produced)
 800111c:	e031      	b.n	8001182 <FilterTask+0xfe>
        {
            float32_t *bufPtr = NULL;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
            // Block here if the UART is behind
            xQueueReceive(freePool, &bufPtr, portMAX_DELAY);
 8001122:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <FilterTask+0x154>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f107 0110 	add.w	r1, r7, #16
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fef0 	bl	8005f14 <xQueueReceive>

            const uint16_t chunk = (produced > TX_BLOCK_SAMPLES)
 8001134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001136:	2b80      	cmp	r3, #128	@ 0x80
 8001138:	d802      	bhi.n	8001140 <FilterTask+0xbc>
 800113a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113c:	b29b      	uxth	r3, r3
 800113e:	e000      	b.n	8001142 <FilterTask+0xbe>
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	82fb      	strh	r3, [r7, #22]
                                   ? TX_BLOCK_SAMPLES
                                   : (uint16_t)produced;
            // Copy that slice from output array into the buffer
            memcpy(bufPtr, &outBlock[idx], (size_t)chunk * sizeof(float32_t));
 8001144:	6938      	ldr	r0, [r7, #16]
 8001146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <FilterTask+0x148>)
 800114c:	1899      	adds	r1, r3, r2
 800114e:	8afb      	ldrh	r3, [r7, #22]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	461a      	mov	r2, r3
 8001154:	f007 fe49 	bl	8008dea <memcpy>

            // Hand off to UART task
            TxBlock blk = { .buf = bufPtr, .count = chunk };
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	8afb      	ldrh	r3, [r7, #22]
 800115e:	81bb      	strh	r3, [r7, #12]
            xQueueSend(txQueue, &blk, portMAX_DELAY);
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <FilterTask+0x158>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	f107 0108 	add.w	r1, r7, #8
 8001168:	2300      	movs	r3, #0
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	f004 fdcf 	bl	8005d10 <xQueueGenericSend>

            produced -= chunk;
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx      += chunk;
 800117a:	8afb      	ldrh	r3, [r7, #22]
 800117c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117e:	4413      	add	r3, r2
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
        while (produced)
 8001182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ca      	bne.n	800111e <FilterTask+0x9a>
        }

        // Drain any queued notifications
        UBaseType_t pending = ulTaskNotifyTake(pdTRUE, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	2001      	movs	r0, #1
 800118c:	f006 fa98 	bl	80076c0 <ulTaskNotifyTake>
 8001190:	6238      	str	r0, [r7, #32]
        while (pending--)
 8001192:	e00d      	b.n	80011b0 <FilterTask+0x12c>
        {
            start = (activeHalf == 0) ? 0 : (ADC_BUF_LEN / 2);
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <FilterTask+0x138>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <FilterTask+0x11e>
 800119e:	2300      	movs	r3, #0
 80011a0:	e001      	b.n	80011a6 <FilterTask+0x122>
 80011a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a6:	61fb      	str	r3, [r7, #28]
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011a8:	2120      	movs	r1, #32
 80011aa:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <FilterTask+0x150>)
 80011ac:	f002 fec1 	bl	8003f32 <HAL_GPIO_TogglePin>
        while (pending--)
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	623a      	str	r2, [r7, #32]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1ec      	bne.n	8001194 <FilterTask+0x110>
    {
 80011ba:	e767      	b.n	800108c <FilterTask+0x8>
 80011bc:	20000a04 	.word	0x20000a04
 80011c0:	20000204 	.word	0x20000204
 80011c4:	20001614 	.word	0x20001614
 80011c8:	20002614 	.word	0x20002614
 80011cc:	20001e14 	.word	0x20001e14
 80011d0:	20002618 	.word	0x20002618
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000a0c 	.word	0x20000a0c
 80011dc:	20000a08 	.word	0x20000a08

080011e0 <UARTTask>:
    }
}

// Low-priority task: dequeue blocks, format CSV, transmit, return buffer to pool
static void UARTTask(void *arg)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80011ec:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80011f0:	6018      	str	r0, [r3, #0]
	(void)arg;
	// CSV header
	const char *hdr = "# filtered_samples\r\n";
 80011f2:	4b46      	ldr	r3, [pc, #280]	@ (800130c <UARTTask+0x12c>)
 80011f4:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
	UART_Write((const uint8_t*)hdr, (uint16_t)strlen(hdr));
 80011f8:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 80011fc:	f7ff f858 	bl	80002b0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29b      	uxth	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 800120a:	f7ff fe65 	bl	8000ed8 <UART_Write>

	char line[24]; // Temporary ASCII for one formatted float
	uint8_t	batch[1024]; // Buffer to batch lines into a single UART write
	uint16_t used = 0; // Number of valid bytes in the batch
 800120e:	2300      	movs	r3, #0
 8001210:	f8a7 3436 	strh.w	r3, [r7, #1078]	@ 0x436

	for(;;)
	{
		TxBlock blk;
		// if producer doesn't send a block
		if(xQueueReceive(txQueue, &blk, portMAX_DELAY) != pdTRUE)
 8001214:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <UARTTask+0x130>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f107 010c 	add.w	r1, r7, #12
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	4618      	mov	r0, r3
 8001222:	f004 fe77 	bl	8005f14 <xQueueReceive>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d16c      	bne.n	8001306 <UARTTask+0x126>
		{
			continue;
		}
		// Loop through each valid sample in the block
		for(uint16_t i = 0; i < blk.count; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	f8a7 3434 	strh.w	r3, [r7, #1076]	@ 0x434
 8001232:	e046      	b.n	80012c2 <UARTTask+0xe2>
		{
			uint16_t w = fmt_csv_line(blk.buf[i], line, sizeof(line));
 8001234:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001238:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	@ 0x434
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 800124e:	2118      	movs	r1, #24
 8001250:	4618      	mov	r0, r3
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f7ff fe63 	bl	8000f20 <fmt_csv_line>
 800125a:	4603      	mov	r3, r0
 800125c:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e
			// Skip sample if it is 0
			if(!w)
 8001260:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	@ 0x42e
 8001264:	2b00      	cmp	r3, #0
 8001266:	d026      	beq.n	80012b6 <UARTTask+0xd6>
			{
				continue;
			}
			// If batch has no room
			if(used + w > sizeof(batch))
 8001268:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	@ 0x436
 800126c:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	@ 0x42e
 8001270:	4413      	add	r3, r2
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001276:	d90a      	bls.n	800128e <UARTTask+0xae>
			{
				// Flush batch
				UART_Write(batch, used);
 8001278:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	@ 0x436
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe28 	bl	8000ed8 <UART_Write>
				used = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f8a7 3436 	strh.w	r3, [r7, #1078]	@ 0x436
			}
			// Append formatted line to the batch
			memcpy(&batch[used], line, w);
 800128e:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	@ 0x436
 8001292:	f107 0214 	add.w	r2, r7, #20
 8001296:	4413      	add	r3, r2
 8001298:	f8b7 242e 	ldrh.w	r2, [r7, #1070]	@ 0x42e
 800129c:	f207 4114 	addw	r1, r7, #1044	@ 0x414
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fda2 	bl	8008dea <memcpy>
			used += w;
 80012a6:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	@ 0x436
 80012aa:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	@ 0x42e
 80012ae:	4413      	add	r3, r2
 80012b0:	f8a7 3436 	strh.w	r3, [r7, #1078]	@ 0x436
 80012b4:	e000      	b.n	80012b8 <UARTTask+0xd8>
				continue;
 80012b6:	bf00      	nop
		for(uint16_t i = 0; i < blk.count; i++)
 80012b8:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	@ 0x434
 80012bc:	3301      	adds	r3, #1
 80012be:	f8a7 3434 	strh.w	r3, [r7, #1076]	@ 0x434
 80012c2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80012c6:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80012ca:	889b      	ldrh	r3, [r3, #4]
 80012cc:	f8b7 2434 	ldrh.w	r2, [r7, #1076]	@ 0x434
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3af      	bcc.n	8001234 <UARTTask+0x54>
		}
		// Send any leftovers
		if(used)
 80012d4:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	@ 0x436
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <UARTTask+0x112>
		{
			UART_Write(batch, used);
 80012dc:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	@ 0x436
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fdf6 	bl	8000ed8 <UART_Write>
			used = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8a7 3436 	strh.w	r3, [r7, #1078]	@ 0x436
		}

		// Return the buffer to the free pool
		(void)xQueueSend(freePool, &blk.buf, portMAX_DELAY);
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <UARTTask+0x134>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	f107 010c 	add.w	r1, r7, #12
 80012fa:	2300      	movs	r3, #0
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	f004 fd06 	bl	8005d10 <xQueueGenericSend>
 8001304:	e786      	b.n	8001214 <UARTTask+0x34>
			continue;
 8001306:	bf00      	nop
	{
 8001308:	e784      	b.n	8001214 <UARTTask+0x34>
 800130a:	bf00      	nop
 800130c:	0800bc00 	.word	0x0800bc00
 8001310:	20000a08 	.word	0x20000a08
 8001314:	20000a0c 	.word	0x20000a0c

08001318 <Pot_ReadRaw12_Injected>:
/**
 * @brief Reads the Potentiometer value from the injected ADC on PA1
 * @return 12-bit raw ADC value
 */
static uint16_t Pot_ReadRaw12_Injected(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
    HAL_ADCEx_InjectedStart(POT_ADC); // Start injected ADC conversion
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <Pot_ReadRaw12_Injected+0x38>)
 8001320:	f001 fc76 	bl	8002c10 <HAL_ADCEx_InjectedStart>
    (void)HAL_ADCEx_InjectedPollForConversion(POT_ADC, 2); // wait up to 2ms for completion
 8001324:	2102      	movs	r1, #2
 8001326:	480a      	ldr	r0, [pc, #40]	@ (8001350 <Pot_ReadRaw12_Injected+0x38>)
 8001328:	f001 fd87 	bl	8002e3a <HAL_ADCEx_InjectedPollForConversion>
    uint32_t v = HAL_ADCEx_InjectedGetValue(POT_ADC, ADC_INJECTED_RANK_1); // Read converted ADC value
 800132c:	2101      	movs	r1, #1
 800132e:	4808      	ldr	r0, [pc, #32]	@ (8001350 <Pot_ReadRaw12_Injected+0x38>)
 8001330:	f001 fdfe 	bl	8002f30 <HAL_ADCEx_InjectedGetValue>
 8001334:	6078      	str	r0, [r7, #4]
    HAL_ADCEx_InjectedStop(POT_ADC); // Stop conversion
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <Pot_ReadRaw12_Injected+0x38>)
 8001338:	f001 fd34 	bl	8002da4 <HAL_ADCEx_InjectedStop>
    return (uint16_t)(v & 0x0FFFu); // Mask lower 12 bits since 12 bit ADC
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	b29b      	uxth	r3, r3
 8001340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000289c 	.word	0x2000289c

08001354 <Pot_MapToCutoffHz>:
/**
 * @brief Take 12-bit raw ADC reading from a potentiometer and map it to a cuttoff frequency
 */
static float Pot_MapToCutoffHz(uint16_t raw12)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
    const float t = (float)raw12 / 4095.0f; // Normalize raw value into [0.0, 1.0]
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001368:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80013e8 <Pot_MapToCutoffHz+0x94>
 800136c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001370:	edc7 7a06 	vstr	s15, [r7, #24]

    // Log-uniform mapping
    const float lnMin = logf(MIN_FC_HZ);
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <Pot_MapToCutoffHz+0x98>)
 8001376:	617b      	str	r3, [r7, #20]
    const float lnMax = logf(MAX_FC_HZ);
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <Pot_MapToCutoffHz+0x9c>)
 800137a:	613b      	str	r3, [r7, #16]
    // Perform interpolation and get it back to hertz
    float fc = expf(lnMin + t * (lnMax - lnMin));
 800137c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001380:	edd7 7a05 	vldr	s15, [r7, #20]
 8001384:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001388:	edd7 7a06 	vldr	s15, [r7, #24]
 800138c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001390:	edd7 7a05 	vldr	s15, [r7, #20]
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	eeb0 0a67 	vmov.f32	s0, s15
 800139c:	f009 fd6e 	bl	800ae7c <expf>
 80013a0:	ed87 0a07 	vstr	s0, [r7, #28]

    // Safety clamps
    if (fc < 1.0f) fc = 1.0f; // Don't allow less than 1Hz
 80013a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	d502      	bpl.n	80013bc <Pot_MapToCutoffHz+0x68>
 80013b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013ba:	61fb      	str	r3, [r7, #28]
    const float nyq_guard = 0.45f * FS_HZ; // Nyquist frequency quard
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <Pot_MapToCutoffHz+0xa0>)
 80013be:	60fb      	str	r3, [r7, #12]
    if (fc > nyq_guard) fc = nyq_guard; // Don't allow more than 450Hz
 80013c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80013c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dd01      	ble.n	80013d6 <Pot_MapToCutoffHz+0x82>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	61fb      	str	r3, [r7, #28]
    return fc;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	ee07 3a90 	vmov	s15, r3
}
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	457ff000 	.word	0x457ff000
 80013ec:	3f317218 	.word	0x3f317218
 80013f0:	40bfba14 	.word	0x40bfba14
 80013f4:	43e10000 	.word	0x43e10000

080013f8 <Biquad_LP_RBJ>:
 * @param[in] fc	desired cutoff frequency in hertz
 * @param[in] Q		Quality factor
 * @param[out] co	pointer to array of coefficients
 */
static void Biquad_LP_RBJ(float fs, float fc, float Q, float *co)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001402:	edc7 0a02 	vstr	s1, [r7, #8]
 8001406:	ed87 1a01 	vstr	s2, [r7, #4]
 800140a:	6038      	str	r0, [r7, #0]
	// Clamp the cut-off frequencys
    if (fc < 1.0f) fc = 1.0f;
 800140c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d502      	bpl.n	8001424 <Biquad_LP_RBJ+0x2c>
 800141e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001422:	60bb      	str	r3, [r7, #8]
    if (fc > 0.40f * fs)  fc = 0.40f * fs;
 8001424:	edd7 7a03 	vldr	s15, [r7, #12]
 8001428:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80015a8 <Biquad_LP_RBJ+0x1b0>
 800142c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001430:	ed97 7a02 	vldr	s14, [r7, #8]
 8001434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd07      	ble.n	800144e <Biquad_LP_RBJ+0x56>
 800143e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001442:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80015a8 <Biquad_LP_RBJ+0x1b0>
 8001446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144a:	edc7 7a02 	vstr	s15, [r7, #8]
    if (Q   < 0.05f)      Q   = 0.05f; // Avoid extreme resonance
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80015ac <Biquad_LP_RBJ+0x1b4>
 8001456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d501      	bpl.n	8001464 <Biquad_LP_RBJ+0x6c>
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <Biquad_LP_RBJ+0x1b8>)
 8001462:	607b      	str	r3, [r7, #4]
    // Get constants for the cookbook RBJ equations
    const float w0 = 2.0f * (float)M_PI * (fc / fs);
 8001464:	edd7 6a02 	vldr	s13, [r7, #8]
 8001468:	ed97 7a03 	vldr	s14, [r7, #12]
 800146c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001470:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80015b4 <Biquad_LP_RBJ+0x1bc>
 8001474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001478:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    const float c  = cosf(w0);
 800147c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001480:	f009 fd32 	bl	800aee8 <cosf>
 8001484:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    const float s  = sinf(w0);
 8001488:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800148c:	f009 fd70 	bl	800af70 <sinf>
 8001490:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    const float a  = s / (2.0f * Q);
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800149c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80014a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    // Calculating the coefficents
    float b0 = (1.0f - c) * 0.5f;
 80014a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float b1 = (1.0f - c);
 80014c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	edc7 7a08 	vstr	s15, [r7, #32]
    float b2 = (1.0f - c) * 0.5f;
 80014d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	edc7 7a07 	vstr	s15, [r7, #28]
    float a0 = (1.0f + a);
 80014e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80014ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f4:	edc7 7a06 	vstr	s15, [r7, #24]
    float a1 = (-2.0f * c);
 80014f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014fc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001504:	edc7 7a05 	vstr	s15, [r7, #20]
    float a2 = (1.0f - a);
 8001508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800150c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a04 	vstr	s15, [r7, #16]
    // Normalize by a0
    b0 /= a0;  b1 /= a0;  b2 /= a0;
 8001518:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800151c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001524:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001528:	edd7 6a08 	vldr	s13, [r7, #32]
 800152c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001534:	edc7 7a08 	vstr	s15, [r7, #32]
 8001538:	edd7 6a07 	vldr	s13, [r7, #28]
 800153c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001544:	edc7 7a07 	vstr	s15, [r7, #28]
    a1 /= a0;  a2 /= a0;
 8001548:	edd7 6a05 	vldr	s13, [r7, #20]
 800154c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001554:	edc7 7a05 	vstr	s15, [r7, #20]
 8001558:	edd7 6a04 	vldr	s13, [r7, #16]
 800155c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001564:	edc7 7a04 	vstr	s15, [r7, #16]

    // CMSIS DF1 expects {b0,b1,b2,a1,a2} with negated a1,a2 in the array
    co[0] = b0;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156c:	601a      	str	r2, [r3, #0]
    co[1] = b1;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3304      	adds	r3, #4
 8001572:	6a3a      	ldr	r2, [r7, #32]
 8001574:	601a      	str	r2, [r3, #0]
    co[2] = b2;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3308      	adds	r3, #8
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	601a      	str	r2, [r3, #0]
    co[3] = -a1; // Store negated
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	330c      	adds	r3, #12
 8001582:	edd7 7a05 	vldr	s15, [r7, #20]
 8001586:	eef1 7a67 	vneg.f32	s15, s15
 800158a:	edc3 7a00 	vstr	s15, [r3]
    co[4] = -a2; // Store negated
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3310      	adds	r3, #16
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	eef1 7a67 	vneg.f32	s15, s15
 800159a:	edc3 7a00 	vstr	s15, [r3]
}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	@ 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	3ecccccd 	.word	0x3ecccccd
 80015ac:	3d4ccccd 	.word	0x3d4ccccd
 80015b0:	3d4ccccd 	.word	0x3d4ccccd
 80015b4:	40c90fdb 	.word	0x40c90fdb

080015b8 <DSP_InitBiquadLocked>:
 * @param fs Sampling frequency in Hz
 * @param fc Cutoff frequency in Hz
 * @param Q Quality factor
 */
static void DSP_InitBiquadLocked(float fs, float fc, float Q)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	ed87 0a03 	vstr	s0, [r7, #12]
 80015c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80015c6:	ed87 1a01 	vstr	s2, [r7, #4]
	// Only one task at a time updates the filter
    xSemaphoreTake(gBiquadMutex, portMAX_DELAY);
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <DSP_InitBiquadLocked+0x8c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fd80 	bl	80060d8 <xQueueSemaphoreTake>
    // Generate the filter coefficients
    float c[5];
    Biquad_LP_RBJ(fs, fc, Q, c);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4618      	mov	r0, r3
 80015de:	ed97 1a01 	vldr	s2, [r7, #4]
 80015e2:	edd7 0a02 	vldr	s1, [r7, #8]
 80015e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80015ea:	f7ff ff05 	bl	80013f8 <Biquad_LP_RBJ>
    // Copy coefficients into global array
    for (int i = 0; i < 5; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f2:	e00d      	b.n	8001610 <DSP_InitBiquadLocked+0x58>
        gBiquadCoef[i] = c[i];
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	3328      	adds	r3, #40	@ 0x28
 80015fa:	443b      	add	r3, r7
 80015fc:	3b18      	subs	r3, #24
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4911      	ldr	r1, [pc, #68]	@ (8001648 <DSP_InitBiquadLocked+0x90>)
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++)
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	3301      	adds	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	2b04      	cmp	r3, #4
 8001614:	ddee      	ble.n	80015f4 <DSP_InitBiquadLocked+0x3c>
    // Reset filter state, clears delay line
    memset(gBiquadState, 0, sizeof(gBiquadState));
 8001616:	2210      	movs	r2, #16
 8001618:	2100      	movs	r1, #0
 800161a:	480c      	ldr	r0, [pc, #48]	@ (800164c <DSP_InitBiquadLocked+0x94>)
 800161c:	f007 fb65 	bl	8008cea <memset>
    // Initiliaze filter instance
    arm_biquad_cascade_df1_init_f32(&gBiq, NUM_BIQUAD_STAGES, gBiquadCoef, gBiquadState);
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <DSP_InitBiquadLocked+0x94>)
 8001622:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <DSP_InitBiquadLocked+0x90>)
 8001624:	2101      	movs	r1, #1
 8001626:	480a      	ldr	r0, [pc, #40]	@ (8001650 <DSP_InitBiquadLocked+0x98>)
 8001628:	f000 fe51 	bl	80022ce <arm_biquad_cascade_df1_init_f32>
    // Release Mutex
    xSemaphoreGive(gBiquadMutex);
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <DSP_InitBiquadLocked+0x8c>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	f004 fb6b 	bl	8005d10 <xQueueGenericSend>
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20002614 	.word	0x20002614
 8001648:	20002624 	.word	0x20002624
 800164c:	20002638 	.word	0x20002638
 8001650:	20002618 	.word	0x20002618

08001654 <PotTask>:
/**
 * @brief FreeRTOS task to update the biquad filter cutoff from a potentiometer
 */
static void PotTask(void *arg)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	@ 0x38
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    (void)arg;
    const TickType_t period = pdMS_TO_TICKS(POT_TASK_PERIOD_MS); // Convert period into RTOS ticks
 800165c:	2364      	movs	r3, #100	@ 0x64
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TickType_t next = xTaskGetTickCount(); // Get current tick count
 8001660:	f005 fb62 	bl	8006d28 <xTaskGetTickCount>
 8001664:	4603      	mov	r3, r0
 8001666:	61fb      	str	r3, [r7, #28]

    float fc_prev = 0.0f; // Previous cut off frequency
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34

    for (;;)
    {
        vTaskDelayUntil(&next, period); // Delay task for 100ms
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001674:	4618      	mov	r0, r3
 8001676:	f005 f8ff 	bl	8006878 <vTaskDelayUntil>
        uint16_t raw = Pot_ReadRaw12_Injected(); // Read ADC value
 800167a:	f7ff fe4d 	bl	8001318 <Pot_ReadRaw12_Injected>
 800167e:	4603      	mov	r3, r0
 8001680:	857b      	strh	r3, [r7, #42]	@ 0x2a
        float fc = Pot_MapToCutoffHz(raw); // Get cutoff frequency from that data
 8001682:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fe65 	bl	8001354 <Pot_MapToCutoffHz>
 800168a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

        const float base = (fc_prev > 1e-3f) ? fc_prev : fc; // If has changed
 800168e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001692:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001740 <PotTask+0xec>
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd01      	ble.n	80016a4 <PotTask+0x50>
 80016a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a2:	e000      	b.n	80016a6 <PotTask+0x52>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	623b      	str	r3, [r7, #32]
        if (fabsf(fc - fc_prev) < COEF_CHANGE_EPS * base)
 80016a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016ac:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80016b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016bc:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001744 <PotTask+0xf0>
 80016c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d435      	bmi.n	800173a <PotTask+0xe6>
            continue; // ignore tiny changes
        fc_prev = fc; // Save new cut off frequency
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	637b      	str	r3, [r7, #52]	@ 0x34
        // Lock biquad mutex
        xSemaphoreTake(gBiquadMutex, portMAX_DELAY);
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <PotTask+0xf4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fcfc 	bl	80060d8 <xQueueSemaphoreTake>
        // Compute new coefficients for new cutoff
        float c[5];
        Biquad_LP_RBJ(FS_HZ, fc, Q_DEFAULT, c);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 800174c <PotTask+0xf8>
 80016ea:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80016ee:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001750 <PotTask+0xfc>
 80016f2:	f7ff fe81 	bl	80013f8 <Biquad_LP_RBJ>
        for (int i = 0; i < 5; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016fa:	e00d      	b.n	8001718 <PotTask+0xc4>
            gBiquadCoef[i] = c[i];
 80016fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3338      	adds	r3, #56	@ 0x38
 8001702:	443b      	add	r3, r7
 8001704:	3b30      	subs	r3, #48	@ 0x30
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4912      	ldr	r1, [pc, #72]	@ (8001754 <PotTask+0x100>)
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 5; i++)
 8001712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001714:	3301      	adds	r3, #1
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30
 8001718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800171a:	2b04      	cmp	r3, #4
 800171c:	ddee      	ble.n	80016fc <PotTask+0xa8>
        // Reinitialize the biquad filter wit new coefficients and existing state
        arm_biquad_cascade_df1_init_f32(&gBiq, NUM_BIQUAD_STAGES, gBiquadCoef, gBiquadState);
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <PotTask+0x104>)
 8001720:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <PotTask+0x100>)
 8001722:	2101      	movs	r1, #1
 8001724:	480d      	ldr	r0, [pc, #52]	@ (800175c <PotTask+0x108>)
 8001726:	f000 fdd2 	bl	80022ce <arm_biquad_cascade_df1_init_f32>
        xSemaphoreGive(gBiquadMutex);
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <PotTask+0xf4>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	f004 faec 	bl	8005d10 <xQueueGenericSend>
 8001738:	e799      	b.n	800166e <PotTask+0x1a>
            continue; // ignore tiny changes
 800173a:	bf00      	nop
    {
 800173c:	e797      	b.n	800166e <PotTask+0x1a>
 800173e:	bf00      	nop
 8001740:	3a83126f 	.word	0x3a83126f
 8001744:	3ca3d70a 	.word	0x3ca3d70a
 8001748:	20002614 	.word	0x20002614
 800174c:	3f3504f3 	.word	0x3f3504f3
 8001750:	447a0000 	.word	0x447a0000
 8001754:	20002624 	.word	0x20002624
 8001758:	20002638 	.word	0x20002638
 800175c:	20002618 	.word	0x20002618

08001760 <RTOS_init>:

/**
 * @brief Initalize all RTOS tasks, synchronization objects, and DSP
 */
void RTOS_init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
	// Create filter and sampler task
    xTaskCreate(SamplerTask, "Sampler", 256, NULL, tskIDLE_PRIORITY + 2, &samplerTaskHandle);
 8001766:	4b51      	ldr	r3, [pc, #324]	@ (80018ac <RTOS_init+0x14c>)
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2302      	movs	r3, #2
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001774:	494e      	ldr	r1, [pc, #312]	@ (80018b0 <RTOS_init+0x150>)
 8001776:	484f      	ldr	r0, [pc, #316]	@ (80018b4 <RTOS_init+0x154>)
 8001778:	f004 ff46 	bl	8006608 <xTaskCreate>
    xTaskCreate(FilterTask, "Filter",  512, NULL, tskIDLE_PRIORITY + 3, &filterTaskHandle);
 800177c:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <RTOS_init+0x158>)
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2303      	movs	r3, #3
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178a:	494c      	ldr	r1, [pc, #304]	@ (80018bc <RTOS_init+0x15c>)
 800178c:	484c      	ldr	r0, [pc, #304]	@ (80018c0 <RTOS_init+0x160>)
 800178e:	f004 ff3b 	bl	8006608 <xTaskCreate>

    // Biquad mutex + initial configuration of filter
    gBiquadMutex = xSemaphoreCreateMutex();
 8001792:	2001      	movs	r0, #1
 8001794:	f004 faa4 	bl	8005ce0 <xQueueCreateMutex>
 8001798:	4603      	mov	r3, r0
 800179a:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <RTOS_init+0x164>)
 800179c:	6013      	str	r3, [r2, #0]
    configASSERT(gBiquadMutex != NULL);
 800179e:	4b49      	ldr	r3, [pc, #292]	@ (80018c4 <RTOS_init+0x164>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10b      	bne.n	80017be <RTOS_init+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017aa:	f383 8811 	msr	BASEPRI, r3
 80017ae:	f3bf 8f6f 	isb	sy
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <RTOS_init+0x5a>
    DSP_InitBiquadLocked(FS_HZ, 100.0f, Q_DEFAULT);
 80017be:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 80018c8 <RTOS_init+0x168>
 80017c2:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80018cc <RTOS_init+0x16c>
 80017c6:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80018d0 <RTOS_init+0x170>
 80017ca:	f7ff fef5 	bl	80015b8 <DSP_InitBiquadLocked>

    // Create potentiometer task
    xTaskCreate(PotTask, "PotTask", 256, NULL, tskIDLE_PRIORITY + 2, &potTaskHandle);
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <RTOS_init+0x174>)
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2302      	movs	r3, #2
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017dc:	493e      	ldr	r1, [pc, #248]	@ (80018d8 <RTOS_init+0x178>)
 80017de:	483f      	ldr	r0, [pc, #252]	@ (80018dc <RTOS_init+0x17c>)
 80017e0:	f004 ff12 	bl	8006608 <xTaskCreate>

    // UART mutex + Queue
    xUartMutex = xSemaphoreCreateMutex();
 80017e4:	2001      	movs	r0, #1
 80017e6:	f004 fa7b 	bl	8005ce0 <xQueueCreateMutex>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a3c      	ldr	r2, [pc, #240]	@ (80018e0 <RTOS_init+0x180>)
 80017ee:	6013      	str	r3, [r2, #0]
    configASSERT(xUartMutex != NULL);
 80017f0:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <RTOS_init+0x180>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <RTOS_init+0xb0>
	__asm volatile
 80017f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	60fb      	str	r3, [r7, #12]
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <RTOS_init+0xac>
    txQueue = xQueueCreate(TX_QUEUE_DEPTH, sizeof(TxBlock));
 8001810:	2200      	movs	r2, #0
 8001812:	2108      	movs	r1, #8
 8001814:	2008      	movs	r0, #8
 8001816:	f004 f9ef 	bl	8005bf8 <xQueueGenericCreate>
 800181a:	4603      	mov	r3, r0
 800181c:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <RTOS_init+0x184>)
 800181e:	6013      	str	r3, [r2, #0]
    freePool = xQueueCreate(TX_POOL_BLOCKS, sizeof(float32_t*));
 8001820:	2200      	movs	r2, #0
 8001822:	2104      	movs	r1, #4
 8001824:	2006      	movs	r0, #6
 8001826:	f004 f9e7 	bl	8005bf8 <xQueueGenericCreate>
 800182a:	4603      	mov	r3, r0
 800182c:	4a2e      	ldr	r2, [pc, #184]	@ (80018e8 <RTOS_init+0x188>)
 800182e:	6013      	str	r3, [r2, #0]
    configASSERT(txQueue && freePool);
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <RTOS_init+0x184>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <RTOS_init+0xe4>
 8001838:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <RTOS_init+0x188>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <RTOS_init+0xe4>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <RTOS_init+0xe6>
 8001844:	2300      	movs	r3, #0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10b      	bne.n	8001862 <RTOS_init+0x102>
	__asm volatile
 800184a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	60bb      	str	r3, [r7, #8]
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	e7fd      	b.n	800185e <RTOS_init+0xfe>

    // Send free pool with pointers to the reusable buffers
    // So each producer can immediately get a buffer
    for(uint32_t i = 0; i < TX_POOL_BLOCKS; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e00f      	b.n	8001888 <RTOS_init+0x128>
    {
    	float32_t *p = &txPool[i][0];
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ec <RTOS_init+0x18c>)
 800186e:	4413      	add	r3, r2
 8001870:	607b      	str	r3, [r7, #4]
    	xQueueSend(freePool, &p, portMAX_DELAY);
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <RTOS_init+0x188>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	1d39      	adds	r1, r7, #4
 8001878:	2300      	movs	r3, #0
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	f004 fa47 	bl	8005d10 <xQueueGenericSend>
    for(uint32_t i = 0; i < TX_POOL_BLOCKS; i++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d9ec      	bls.n	8001868 <RTOS_init+0x108>
    }
    // UART task (lowest priority)
    xTaskCreate(UARTTask, "UART", 512, NULL, tskIDLE_PRIORITY + 1, &uartTaskHandle);
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <RTOS_init+0x190>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2301      	movs	r3, #1
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800189c:	4915      	ldr	r1, [pc, #84]	@ (80018f4 <RTOS_init+0x194>)
 800189e:	4816      	ldr	r0, [pc, #88]	@ (80018f8 <RTOS_init+0x198>)
 80018a0:	f004 feb2 	bl	8006608 <xTaskCreate>

}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200001f4 	.word	0x200001f4
 80018b0:	0800bc18 	.word	0x0800bc18
 80018b4:	08000f65 	.word	0x08000f65
 80018b8:	200001f8 	.word	0x200001f8
 80018bc:	0800bc20 	.word	0x0800bc20
 80018c0:	08001085 	.word	0x08001085
 80018c4:	20002614 	.word	0x20002614
 80018c8:	3f3504f3 	.word	0x3f3504f3
 80018cc:	42c80000 	.word	0x42c80000
 80018d0:	447a0000 	.word	0x447a0000
 80018d4:	200001fc 	.word	0x200001fc
 80018d8:	0800bc28 	.word	0x0800bc28
 80018dc:	08001655 	.word	0x08001655
 80018e0:	20000a10 	.word	0x20000a10
 80018e4:	20000a08 	.word	0x20000a08
 80018e8:	20000a0c 	.word	0x20000a0c
 80018ec:	20000a14 	.word	0x20000a14
 80018f0:	20000200 	.word	0x20000200
 80018f4:	0800bc30 	.word	0x0800bc30
 80018f8:	080011e1 	.word	0x080011e1

080018fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <vApplicationGetIdleTaskMemory+0x2c>)
 800190c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	4a06      	ldr	r2, [pc, #24]	@ (800192c <vApplicationGetIdleTaskMemory+0x30>)
 8001912:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2280      	movs	r2, #128	@ 0x80
 8001918:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20002648 	.word	0x20002648
 800192c:	2000269c 	.word	0x2000269c

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001936:	f000 fce7 	bl	8002308 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800193a:	f000 f825 	bl	8001988 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193e:	f000 f993 	bl	8001c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001942:	f000 f971 	bl	8001c28 <MX_DMA_Init>
  MX_ADC1_Init();
 8001946:	f000 f87f 	bl	8001a48 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800194a:	f000 f943 	bl	8001bd4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800194e:	f000 f8f3 	bl	8001b38 <MX_TIM3_Init>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <main+0x50>)
 8001954:	1d3c      	adds	r4, r7, #4
 8001956:	461d      	mov	r5, r3
 8001958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f003 ffc6 	bl	80058fa <osThreadCreate>
 800196e:	4603      	mov	r3, r0
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <main+0x54>)
 8001972:	6013      	str	r3, [r2, #0]
  //test_UART();
  //DSP_test();
  RTOS_init();
 8001974:	f7ff fef4 	bl	8001760 <RTOS_init>
  /* Start scheduler */
  osKernelStart();
 8001978:	f003 ffb8 	bl	80058ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <main+0x4c>
 8001980:	0800bc80 	.word	0x0800bc80
 8001984:	200029d4 	.word	0x200029d4

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	2234      	movs	r2, #52	@ 0x34
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f007 f9a7 	bl	8008cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <SystemClock_Config+0xb8>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	4a22      	ldr	r2, [pc, #136]	@ (8001a40 <SystemClock_Config+0xb8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80019bc:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <SystemClock_Config+0xb8>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <SystemClock_Config+0xbc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <SystemClock_Config+0xbc>)
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <SystemClock_Config+0xbc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ec:	2301      	movs	r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f0:	2310      	movs	r3, #16
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fd77 	bl	80044f0 <HAL_RCC_OscConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a08:	f000 f978 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fa9e 	bl	8003f68 <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a32:	f000 f963 	bl	8001cfc <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3750      	adds	r7, #80	@ 0x50
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000

08001a48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	@ 0x30
 8001a4c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2220      	movs	r2, #32
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f007 f941 	bl	8008cea <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a68:	4b30      	ldr	r3, [pc, #192]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a6a:	4a31      	ldr	r2, [pc, #196]	@ (8001b30 <MX_ADC1_Init+0xe8>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a74:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a80:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a86:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a8e:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a96:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001a98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9e:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab8:	481c      	ldr	r0, [pc, #112]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001aba:	f000 fc97 	bl	80023ec <HAL_ADC_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001ac4:	f000 f91a 	bl	8001cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001adc:	f000 fde8 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001ae6:	f000 f909 	bl	8001cfc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <MX_ADC1_Init+0xec>)
 8001b00:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001b0e:	463b      	mov	r3, r7
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <MX_ADC1_Init+0xe4>)
 8001b14:	f001 fa44 	bl	8002fa0 <HAL_ADCEx_InjectedConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001b1e:	f000 f8ed 	bl	8001cfc <Error_Handler>
  }

}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000289c 	.word	0x2000289c
 8001b30:	40012000 	.word	0x40012000
 8001b34:	000f0001 	.word	0x000f0001

08001b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b56:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd0 <MX_TIM3_Init+0x98>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b7c:	f002 ff56 	bl	8004a2c <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b86:	f000 f8b9 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001b98:	f003 f800 	bl	8004b9c <HAL_TIM_ConfigClockSource>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ba2:	f000 f8ab 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_TIM3_Init+0x94>)
 8001bb4:	f003 f9fa 	bl	8004fac <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bbe:	f000 f89d 	bl	8001cfc <Error_Handler>
  }

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20002944 	.word	0x20002944
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <MX_USART2_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001be0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	f003 fa4a 	bl	80050a4 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f000 f871 	bl	8001cfc <Error_Handler>
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000298c 	.word	0x2000298c
 8001c24:	40004400 	.word	0x40004400

08001c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_DMA_Init+0x3c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <MX_DMA_Init+0x3c>)
 8001c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_DMA_Init+0x3c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	2038      	movs	r0, #56	@ 0x38
 8001c50:	f001 fc1b 	bl	800348a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c54:	2038      	movs	r0, #56	@ 0x38
 8001c56:	f001 fc34 	bl	80034c2 <HAL_NVIC_EnableIRQ>

}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <MX_GPIO_Init+0x7c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <MX_GPIO_Init+0x7c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <MX_GPIO_Init+0x7c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_GPIO_Init+0x7c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <MX_GPIO_Init+0x7c>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <MX_GPIO_Init+0x7c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2120      	movs	r1, #32
 8001cba:	480b      	ldr	r0, [pc, #44]	@ (8001ce8 <MX_GPIO_Init+0x80>)
 8001cbc:	f002 f920 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <MX_GPIO_Init+0x80>)
 8001cd8:	f001 ff7e 	bl	8003bd8 <HAL_GPIO_Init>

}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000

08001cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f003 fe4c 	bl	8005992 <osDelay>
 8001cfa:	e7fb      	b.n	8001cf4 <StartDefaultTask+0x8>

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <Error_Handler+0x8>

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	f06f 0001 	mvn.w	r0, #1
 8001d4e:	f001 fb9c 	bl	800348a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e3c <HAL_ADC_MspInit+0xdc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d158      	bne.n	8001e34 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b2e      	ldr	r3, [pc, #184]	@ (8001e40 <HAL_ADC_MspInit+0xe0>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e40 <HAL_ADC_MspInit+0xe0>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_ADC_MspInit+0xe0>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <HAL_ADC_MspInit+0xe0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a26      	ldr	r2, [pc, #152]	@ (8001e40 <HAL_ADC_MspInit+0xe0>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_ADC_MspInit+0xe0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481d      	ldr	r0, [pc, #116]	@ (8001e44 <HAL_ADC_MspInit+0xe4>)
 8001dce:	f001 ff03 	bl	8003bd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <HAL_ADC_MspInit+0xec>)
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001df0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001df4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001e0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e10:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e18:	480b      	ldr	r0, [pc, #44]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001e1a:	f001 fb6d 	bl	80034f8 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001e24:	f7ff ff6a 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e2e:	4a06      	ldr	r2, [pc, #24]	@ (8001e48 <HAL_ADC_MspInit+0xe8>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	@ 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012000 	.word	0x40012000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	200028e4 	.word	0x200028e4
 8001e4c:	40026410 	.word	0x40026410

08001e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10d      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_UART_MspInit+0x84>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d12b      	bne.n	8001f0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <HAL_UART_MspInit+0x88>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <HAL_UART_MspInit+0x88>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_UART_MspInit+0x88>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_UART_MspInit+0x88>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a10      	ldr	r2, [pc, #64]	@ (8001f1c <HAL_UART_MspInit+0x88>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_UART_MspInit+0x88>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eee:	230c      	movs	r3, #12
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efe:	2307      	movs	r3, #7
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <HAL_UART_MspInit+0x8c>)
 8001f0a:	f001 fe65 	bl	8003bd8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	@ 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <NMI_Handler+0x4>

08001f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5e:	f000 fa25 	bl	80023ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f62:	f005 f9ed 	bl	8007340 <xTaskGetSchedulerState>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f6c:	f005 feac 	bl	8007cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <DMA2_Stream0_IRQHandler+0x10>)
 8001f7a:	f001 fbc3 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200028e4 	.word	0x200028e4

08001f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return 1;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_kill>:

int _kill(int pid, int sig)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fa2:	f006 fef5 	bl	8008d90 <__errno>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2216      	movs	r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
  return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_exit>:

void _exit (int status)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ffe7 	bl	8001f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <_exit+0x12>

08001fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e00a      	b.n	8001ff6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe0:	f3af 8000 	nop.w
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	60ba      	str	r2, [r7, #8]
 8001fec:	b2ca      	uxtb	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbf0      	blt.n	8001fe0 <_read+0x12>
  }

  return len;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e009      	b.n	800202e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbf1      	blt.n	800201a <_write+0x12>
  }
  return len;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_close>:

int _close(int file)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002068:	605a      	str	r2, [r3, #4]
  return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_isatty>:

int _isatty(int file)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f006 fe5a 	bl	8008d90 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	@ (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20020000 	.word	0x20020000
 8002108:	00000400 	.word	0x00000400
 800210c:	200029d8 	.word	0x200029d8
 8002110:	20006880 	.word	0x20006880

08002114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <SystemInit+0x20>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <SystemInit+0x20>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002170 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800213c:	f7ff ffea 	bl	8002114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002142:	490d      	ldr	r1, [pc, #52]	@ (8002178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002158:	4c0a      	ldr	r4, [pc, #40]	@ (8002184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002166:	f006 fe19 	bl	8008d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216a:	f7ff fbe1 	bl	8001930 <main>
  bx  lr    
 800216e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800217c:	0800c430 	.word	0x0800c430
  ldr r2, =_sbss
 8002180:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002184:	20006880 	.word	0x20006880

08002188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC_IRQHandler>

0800218a <arm_biquad_cascade_df1_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800218a:	b480      	push	{r7}
 800218c:	b097      	sub	sp, #92	@ 0x5c
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	657b      	str	r3, [r7, #84]	@ 0x54
        float32_t *pOut = pDst;                        /* Destination pointer */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	653b      	str	r3, [r7, #80]	@ 0x50
        float32_t *pState = S->pState;                 /* pState pointer */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	633b      	str	r3, [r7, #48]	@ 0x30

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 80021b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b4:	1d1a      	adds	r2, r3, #4
 80021b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    b1 = *pCoeffs++;
 80021bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021be:	1d1a      	adds	r2, r3, #4
 80021c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    b2 = *pCoeffs++;
 80021c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021c8:	1d1a      	adds	r2, r3, #4
 80021ca:	64ba      	str	r2, [r7, #72]	@ 0x48
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
    a1 = *pCoeffs++;
 80021d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021d2:	1d1a      	adds	r2, r3, #4
 80021d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 80021da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021dc:	1d1a      	adds	r2, r3, #4
 80021de:	64ba      	str	r2, [r7, #72]	@ 0x48
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 80021e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	647b      	str	r3, [r7, #68]	@ 0x44
    Xn2 = pState[1];
 80021ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	643b      	str	r3, [r7, #64]	@ 0x40
    Yn1 = pState[2];
 80021f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Yn2 = pState[3];
 80021f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    sample = blockSize & 0x3U;

#else

    /* Initialize blkCnt with number of samples */
    sample = blockSize;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 8002200:	e03c      	b.n	800227c <arm_biquad_cascade_df1_f32+0xf2>
    {
      /* Read the input */
      Xn = *pIn++;
 8002202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002204:	1d1a      	adds	r2, r3, #4
 8002206:	657a      	str	r2, [r7, #84]	@ 0x54
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800220c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002210:	edd7 7a06 	vldr	s15, [r7, #24]
 8002214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002218:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800221c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002228:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800222c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	edd7 6a08 	vldr	s13, [r7, #32]
 800223c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002248:	edd7 6a07 	vldr	s13, [r7, #28]
 800224c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store output in destination buffer. */
      *pOut++ = acc;
 800225c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	653a      	str	r2, [r7, #80]	@ 0x50
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	601a      	str	r2, [r3, #0]
      /* The states should be updated as: */
      /* Xn2 = Xn1 */
      /* Xn1 = Xn  */
      /* Yn2 = Yn1 */
      /* Yn1 = acc */
      Xn2 = Xn1;
 8002266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002268:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	647b      	str	r3, [r7, #68]	@ 0x44
      Yn2 = Yn1;
 800226e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002270:	63bb      	str	r3, [r7, #56]	@ 0x38
      Yn1 = acc;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* decrement loop counter */
      sample--;
 8002276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002278:	3b01      	subs	r3, #1
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (sample > 0U)
 800227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1bf      	bne.n	8002202 <arm_biquad_cascade_df1_f32+0x78>
    }

    /* Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 8002282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800228a:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 800228c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002292:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002294:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 8002296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002298:	1d1a      	adds	r2, r3, #4
 800229a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800229c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229e:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 80022a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022a2:	1d1a      	adds	r2, r3, #4
 80022a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80022a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022a8:	601a      	str	r2, [r3, #0]

    /* The first stage goes from the input buffer to the output buffer. */
    /* Subsequent numStages occur in-place in the output buffer */
    pIn = pDst;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Reset output pointer */
    pOut = pDst;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	653b      	str	r3, [r7, #80]	@ 0x50

    /* decrement loop counter */
    stage--;
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	3b01      	subs	r3, #1
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30

  } while (stage > 0U);
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f47f af79 	bne.w	80021b2 <arm_biquad_cascade_df1_f32+0x28>

}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	375c      	adds	r7, #92	@ 0x5c
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <arm_biquad_cascade_df1_init_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	460b      	mov	r3, r1
 80022dc:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 80022de:	7afa      	ldrb	r2, [r7, #11]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	461a      	mov	r2, r3
 80022f0:	2100      	movs	r1, #0
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	f006 fcf9 	bl	8008cea <memset>

  /* Assign state pointer */
  S->pState = pState;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	605a      	str	r2, [r3, #4]
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800230c:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <HAL_Init+0x40>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_Init+0x40>)
 800231e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_Init+0x40>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f001 f89f 	bl	8003474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	200f      	movs	r0, #15
 8002338:	f000 f808 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fce4 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023c00 	.word	0x40023c00

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x54>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_InitTick+0x58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f8b7 	bl	80034de <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f001 f87f 	bl	800348a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	@ (80023a8 <HAL_InitTick+0x5c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000008 	.word	0x20000008
 80023d0:	200029dc 	.word	0x200029dc

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	@ (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200029dc 	.word	0x200029dc

080023ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e033      	b.n	800246a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fca8 	bl	8001d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002432:	f023 0302 	bic.w	r3, r3, #2
 8002436:	f043 0202 	orr.w	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa68 	bl	8002914 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
 800245a:	e001      	b.n	8002460 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Start_DMA+0x22>
 8002492:	2302      	movs	r3, #2
 8002494:	e0eb      	b.n	800266e <HAL_ADC_Start_DMA+0x1fa>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d018      	beq.n	80024de <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <HAL_ADC_Start_DMA+0x204>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	@ (800267c <HAL_ADC_Start_DMA+0x208>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9a      	lsrs	r2, r3, #18
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ec:	d107      	bne.n	80024fe <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 80a3 	bne.w	8002654 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002538:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254c:	d106      	bne.n	800255c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f023 0206 	bic.w	r2, r3, #6
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
 800255a:	e002      	b.n	8002562 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256a:	4b45      	ldr	r3, [pc, #276]	@ (8002680 <HAL_ADC_Start_DMA+0x20c>)
 800256c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	4a44      	ldr	r2, [pc, #272]	@ (8002684 <HAL_ADC_Start_DMA+0x210>)
 8002574:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	4a43      	ldr	r2, [pc, #268]	@ (8002688 <HAL_ADC_Start_DMA+0x214>)
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002582:	4a42      	ldr	r2, [pc, #264]	@ (800268c <HAL_ADC_Start_DMA+0x218>)
 8002584:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800258e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800259e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	334c      	adds	r3, #76	@ 0x4c
 80025ba:	4619      	mov	r1, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f001 f848 	bl	8003654 <HAL_DMA_Start_IT>
 80025c4:	4603      	mov	r3, r0
 80025c6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d12a      	bne.n	800262a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002690 <HAL_ADC_Start_DMA+0x21c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d015      	beq.n	800260a <HAL_ADC_Start_DMA+0x196>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002694 <HAL_ADC_Start_DMA+0x220>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x180>
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <HAL_ADC_Start_DMA+0x20c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a27      	ldr	r2, [pc, #156]	@ (8002698 <HAL_ADC_Start_DMA+0x224>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d136      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f8>
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_ADC_Start_DMA+0x20c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d129      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e020      	b.n	800266c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <HAL_ADC_Start_DMA+0x21c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d11b      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d114      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	e00b      	b.n	800266c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0210 	orr.w	r2, r3, #16
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800266c:	7ffb      	ldrb	r3, [r7, #31]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000000 	.word	0x20000000
 800267c:	431bde83 	.word	0x431bde83
 8002680:	40012300 	.word	0x40012300
 8002684:	08002b0d 	.word	0x08002b0d
 8002688:	08002bc7 	.word	0x08002bc7
 800268c:	08002be3 	.word	0x08002be3
 8002690:	40012000 	.word	0x40012000
 8002694:	40012100 	.word	0x40012100
 8002698:	40012200 	.word	0x40012200

0800269c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e113      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x244>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d925      	bls.n	8002728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68d9      	ldr	r1, [r3, #12]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	4603      	mov	r3, r0
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4403      	add	r3, r0
 800271a:	3b1e      	subs	r3, #30
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e022      	b.n	800276e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	2207      	movs	r2, #7
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	4603      	mov	r3, r0
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4403      	add	r3, r0
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d824      	bhi.n	80027c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b05      	subs	r3, #5
 80027b2:	fa00 f203 	lsl.w	r2, r0, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80027be:	e04c      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b23      	subs	r3, #35	@ 0x23
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b23      	subs	r3, #35	@ 0x23
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002810:	e023      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	@ 0x41
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b41      	subs	r3, #65	@ 0x41
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285a:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_ADC_ConfigChannel+0x250>)
 800285c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <HAL_ADC_ConfigChannel+0x254>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d10f      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d8>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d10b      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <HAL_ADC_ConfigChannel+0x254>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12b      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x23a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <HAL_ADC_ConfigChannel+0x258>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x1f4>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b11      	cmp	r3, #17
 80028a2:	d122      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_ADC_ConfigChannel+0x258>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_ADC_ConfigChannel+0x25c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <HAL_ADC_ConfigChannel+0x260>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	0c9a      	lsrs	r2, r3, #18
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028dc:	e002      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f9      	bne.n	80028de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012300 	.word	0x40012300
 8002904:	40012000 	.word	0x40012000
 8002908:	10000012 	.word	0x10000012
 800290c:	20000000 	.word	0x20000000
 8002910:	431bde83 	.word	0x431bde83

08002914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291c:	4b79      	ldr	r3, [pc, #484]	@ (8002b04 <ADC_Init+0x1f0>)
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a6:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <ADC_Init+0x1f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e00f      	b.n	8002a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0202 	bic.w	r2, r2, #2
 8002a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e1b      	ldrb	r3, [r3, #24]
 8002a2c:	005a      	lsls	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	035a      	lsls	r2, r3, #13
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	e007      	b.n	8002a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	051a      	lsls	r2, r3, #20
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aca:	025a      	lsls	r2, r3, #9
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	029a      	lsls	r2, r3, #10
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40012300 	.word	0x40012300
 8002b08:	0f000001 	.word	0x0f000001

08002b0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d13c      	bne.n	8002ba0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d12b      	bne.n	8002b98 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d127      	bne.n	8002b98 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d119      	bne.n	8002b98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0220 	bic.w	r2, r2, #32
 8002b72:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7fe fa45 	bl	8001028 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b9e:	e00e      	b.n	8002bbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fd75 	bl	800269c <HAL_ADC_ErrorCallback>
}
 8002bb2:	e004      	b.n	8002bbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7fe f9f9 	bl	8000fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2240      	movs	r2, #64	@ 0x40
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fd4a 	bl	800269c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADCEx_InjectedStart+0x22>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0aa      	b.n	8002d88 <HAL_ADCEx_InjectedStart+0x178>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d018      	beq.n	8002c7a <HAL_ADCEx_InjectedStart+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c58:	4b4e      	ldr	r3, [pc, #312]	@ (8002d94 <HAL_ADCEx_InjectedStart+0x184>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d98 <HAL_ADCEx_InjectedStart+0x188>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9a      	lsrs	r2, r3, #18
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c6c:	e002      	b.n	8002c74 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f9      	bne.n	8002c6e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d172      	bne.n	8002d6e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0204 	mvn.w	r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc0:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <HAL_ADCEx_InjectedStart+0x18c>)
 8002cc2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d124      	bne.n	8002d1a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d041      	beq.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d03e      	beq.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	e035      	b.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <HAL_ADCEx_InjectedStart+0x190>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d11a      	bne.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d017      	beq.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d014      	beq.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	e00b      	b.n	8002d86 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	20000000 	.word	0x20000000
 8002d98:	431bde83 	.word	0x431bde83
 8002d9c:	40012300 	.word	0x40012300
 8002da0:	40012000 	.word	0x40012000

08002da4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADCEx_InjectedStop+0x1a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e037      	b.n	8002e2e <HAL_ADCEx_InjectedStop+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if (((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d120      	bne.n	8002e14 <HAL_ADCEx_InjectedStop+0x70>
      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  if (((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d119      	bne.n	8002e14 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	609a      	str	r2, [r3, #8]

    /* Check if ADC is effectively disabled */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d112      	bne.n	8002e24 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e12:	e007      	b.n	8002e24 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_ADCEx_InjectedPollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e48:	f7ff fac4 	bl	80023d4 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8002e4e:	e01e      	b.n	8002e8e <HAL_ADCEx_InjectedPollForConversion+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d01a      	beq.n	8002e8e <HAL_ADCEx_InjectedPollForConversion+0x54>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_ADCEx_InjectedPollForConversion+0x34>
 8002e5e:	f7ff fab9 	bl	80023d4 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d20f      	bcs.n	8002e8e <HAL_ADCEx_InjectedPollForConversion+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d008      	beq.n	8002e8e <HAL_ADCEx_InjectedPollForConversion+0x54>
        {
          hadc->State = HAL_ADC_STATE_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04b      	b.n	8002f26 <HAL_ADCEx_InjectedPollForConversion+0xec>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d1d9      	bne.n	8002e50 <HAL_ADCEx_InjectedPollForConversion+0x16>
      }
    }
  }

  /* Clear injected group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 020c 	mvn.w	r2, #12
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d131      	bne.n	8002f24 <HAL_ADCEx_InjectedPollForConversion+0xea>
      (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_ADCEx_InjectedPollForConversion+0xa2>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d123      	bne.n	8002f24 <HAL_ADCEx_InjectedPollForConversion+0xea>
      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11c      	bne.n	8002f24 <HAL_ADCEx_InjectedPollForConversion+0xea>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <HAL_ADCEx_InjectedPollForConversion+0xea>
        (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e1b      	ldrb	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d111      	bne.n	8002f24 <HAL_ADCEx_InjectedPollForConversion+0xea>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <HAL_ADCEx_InjectedPollForConversion+0xea>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0204 	mvn.w	r2, #4
 8002f46:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d81f      	bhi.n	8002f90 <HAL_ADCEx_InjectedGetValue+0x60>
 8002f50:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <HAL_ADCEx_InjectedGetValue+0x28>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f87 	.word	0x08002f87
 8002f5c:	08002f7d 	.word	0x08002f7d
 8002f60:	08002f73 	.word	0x08002f73
 8002f64:	08002f69 	.word	0x08002f69
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002f70:	e00f      	b.n	8002f92 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002f7a:	e00a      	b.n	8002f92 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002f84:	e005      	b.n	8002f92 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002f8e:	e000      	b.n	8002f92 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8002f90:	bf00      	nop
  }
  return tmp;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e17e      	b.n	80032b6 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d925      	bls.n	8003014 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68d9      	ldr	r1, [r3, #12]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	2207      	movs	r2, #7
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	4603      	mov	r3, r0
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4403      	add	r3, r0
 8003006:	3b1e      	subs	r3, #30
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e022      	b.n	800305a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	2207      	movs	r2, #7
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	400a      	ands	r2, r1
 8003036:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6919      	ldr	r1, [r3, #16]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	4603      	mov	r3, r0
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4403      	add	r3, r0
 8003050:	409a      	lsls	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003068:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	3b01      	subs	r3, #1
 8003076:	051a      	lsls	r2, r3, #20
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3303      	adds	r3, #3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	221f      	movs	r2, #31
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43da      	mvns	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	400a      	ands	r2, r1
 80030b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3303      	adds	r3, #3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	fa00 f203 	lsl.w	r2, r0, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a75      	ldr	r2, [pc, #468]	@ (80032c4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8003100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6899      	ldr	r1, [r3, #8]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	e00f      	b.n	8003158 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8003146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003156:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	7d5b      	ldrb	r3, [r3, #21]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e007      	b.n	8003182 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003180:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	7d1b      	ldrb	r3, [r3, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e007      	b.n	80031ac <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031aa:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d02e      	beq.n	8003212 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d840      	bhi.n	800323a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d002      	beq.n	80031c2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d014      	beq.n	80031ea <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80031c0:	e03b      	b.n	800323a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80031d0:	f023 030f 	bic.w	r3, r3, #15
 80031d4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6959      	ldr	r1, [r3, #20]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	615a      	str	r2, [r3, #20]
      break;
 80031e8:	e03b      	b.n	8003262 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80031f8:	f023 030f 	bic.w	r3, r3, #15
 80031fc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6999      	ldr	r1, [r3, #24]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
      break;
 8003210:	e027      	b.n	8003262 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003220:	f023 030f 	bic.w	r3, r3, #15
 8003224:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69d9      	ldr	r1, [r3, #28]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	61da      	str	r2, [r3, #28]
      break;
 8003238:	e013      	b.n	8003262 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003248:	f023 030f 	bic.w	r3, r3, #15
 800324c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a19      	ldr	r1, [r3, #32]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	621a      	str	r2, [r3, #32]
      break;
 8003260:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003262:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003264:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a18      	ldr	r2, [pc, #96]	@ (80032cc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d109      	bne.n	8003284 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b12      	cmp	r3, #18
 8003276:	d105      	bne.n	8003284 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10e      	bne.n	80032ac <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a0f      	ldr	r2, [pc, #60]	@ (80032d0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b11      	cmp	r3, #17
 800329e:	d105      	bne.n	80032ac <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	000f0001 	.word	0x000f0001
 80032c8:	40012300 	.word	0x40012300
 80032cc:	40012000 	.word	0x40012000
 80032d0:	10000012 	.word	0x10000012

080032d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	2b00      	cmp	r3, #0
 8003348:	db0b      	blt.n	8003362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4907      	ldr	r1, [pc, #28]	@ (8003370 <__NVIC_EnableIRQ+0x38>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2001      	movs	r0, #1
 800335a:	fa00 f202 	lsl.w	r2, r0, r2
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e100 	.word	0xe000e100

08003374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	6039      	str	r1, [r7, #0]
 800337e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db0a      	blt.n	800339e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	490c      	ldr	r1, [pc, #48]	@ (80033c0 <__NVIC_SetPriority+0x4c>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	440b      	add	r3, r1
 8003398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800339c:	e00a      	b.n	80033b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4908      	ldr	r1, [pc, #32]	@ (80033c4 <__NVIC_SetPriority+0x50>)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	3b04      	subs	r3, #4
 80033ac:	0112      	lsls	r2, r2, #4
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	440b      	add	r3, r1
 80033b2:	761a      	strb	r2, [r3, #24]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000e100 	.word	0xe000e100
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	@ 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f1c3 0307 	rsb	r3, r3, #7
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	bf28      	it	cs
 80033e6:	2304      	movcs	r3, #4
 80033e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d902      	bls.n	80033f8 <NVIC_EncodePriority+0x30>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3b03      	subs	r3, #3
 80033f6:	e000      	b.n	80033fa <NVIC_EncodePriority+0x32>
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43da      	mvns	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	401a      	ands	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003410:	f04f 31ff 	mov.w	r1, #4294967295
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	43d9      	mvns	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	4313      	orrs	r3, r2
         );
}
 8003422:	4618      	mov	r0, r3
 8003424:	3724      	adds	r7, #36	@ 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003440:	d301      	bcc.n	8003446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003442:	2301      	movs	r3, #1
 8003444:	e00f      	b.n	8003466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003446:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <SysTick_Config+0x40>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344e:	210f      	movs	r1, #15
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	f7ff ff8e 	bl	8003374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <SysTick_Config+0x40>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <SysTick_Config+0x40>)
 8003460:	2207      	movs	r2, #7
 8003462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	e000e010 	.word	0xe000e010

08003474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff29 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800349c:	f7ff ff3e 	bl	800331c <__NVIC_GetPriorityGrouping>
 80034a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff ff8e 	bl	80033c8 <NVIC_EncodePriority>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff5d 	bl	8003374 <__NVIC_SetPriority>
}
 80034ba:	bf00      	nop
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff31 	bl	8003338 <__NVIC_EnableIRQ>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffa2 	bl	8003430 <SysTick_Config>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7fe ff66 	bl	80023d4 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e099      	b.n	8003648 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003534:	e00f      	b.n	8003556 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003536:	f7fe ff4d 	bl	80023d4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b05      	cmp	r3, #5
 8003542:	d908      	bls.n	8003556 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e078      	b.n	8003648 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e8      	bne.n	8003536 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <HAL_DMA_Init+0x158>)
 8003570:	4013      	ands	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003582:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d107      	bne.n	80035c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	4313      	orrs	r3, r2
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0307 	bic.w	r3, r3, #7
 80035d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d117      	bne.n	800361a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fa6f 	bl	8003ae0 <DMA_CheckFifoParam>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2240      	movs	r2, #64	@ 0x40
 800360c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003616:	2301      	movs	r3, #1
 8003618:	e016      	b.n	8003648 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa26 	bl	8003a74 <DMA_CalcBaseAndBitshift>
 8003628:	4603      	mov	r3, r0
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	223f      	movs	r2, #63	@ 0x3f
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	f010803f 	.word	0xf010803f

08003654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_DMA_Start_IT+0x26>
 8003676:	2302      	movs	r3, #2
 8003678:	e040      	b.n	80036fc <HAL_DMA_Start_IT+0xa8>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d12f      	bne.n	80036ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9b8 	bl	8003a18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ac:	223f      	movs	r2, #63	@ 0x3f
 80036ae:	409a      	lsls	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0216 	orr.w	r2, r2, #22
 80036c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e005      	b.n	80036fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003710:	4b8e      	ldr	r3, [pc, #568]	@ (800394c <HAL_DMA_IRQHandler+0x248>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a8e      	ldr	r2, [pc, #568]	@ (8003950 <HAL_DMA_IRQHandler+0x24c>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a9b      	lsrs	r3, r3, #10
 800371c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	2208      	movs	r2, #8
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01a      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	2204      	movs	r2, #4
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	2204      	movs	r2, #4
 80037ca:	409a      	lsls	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e0:	2210      	movs	r2, #16
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d043      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d03c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	2210      	movs	r2, #16
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d024      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e01f      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	e016      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0208 	bic.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	2220      	movs	r2, #32
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 808f 	beq.w	80039a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8087 	beq.w	80039a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	2220      	movs	r2, #32
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d136      	bne.n	800391c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0216 	bic.w	r2, r2, #22
 80038bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_DMA_IRQHandler+0x1da>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0208 	bic.w	r2, r2, #8
 80038ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f2:	223f      	movs	r2, #63	@ 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d07e      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
        }
        return;
 800391a:	e079      	b.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01d      	beq.n	8003966 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	2b00      	cmp	r3, #0
 800393e:	d031      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e02c      	b.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000
 8003950:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d023      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
 8003964:	e01e      	b.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10f      	bne.n	8003994 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0210 	bic.w	r2, r2, #16
 8003982:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d032      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d022      	beq.n	80039fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2205      	movs	r2, #5
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d307      	bcc.n	80039ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f2      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x2cc>
 80039ea:	e000      	b.n	80039ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
 8003a0e:	e000      	b.n	8003a12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a10:	bf00      	nop
    }
  }
}
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	d108      	bne.n	8003a58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a56:	e007      	b.n	8003a68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3b10      	subs	r3, #16
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8e:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <DMA_CalcBaseAndBitshift+0x68>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d909      	bls.n	8003ab6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ab4:	e007      	b.n	8003ac6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	aaaaaaab 	.word	0xaaaaaaab
 8003adc:	0800bcbc 	.word	0x0800bcbc

08003ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d856      	bhi.n	8003bae <DMA_CheckFifoParam+0xce>
 8003b00:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <DMA_CheckFifoParam+0x28>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003baf 	.word	0x08003baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e043      	b.n	8003bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b32:	d140      	bne.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e03d      	b.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	d121      	bne.n	8003b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d837      	bhi.n	8003bba <DMA_CheckFifoParam+0xda>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <DMA_CheckFifoParam+0x70>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b67 	.word	0x08003b67
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003b79 	.word	0x08003b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e030      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d025      	beq.n	8003bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e022      	b.n	8003bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b86:	e01c      	b.n	8003bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d903      	bls.n	8003b96 <DMA_CheckFifoParam+0xb6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b94:	e018      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e015      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e00b      	b.n	8003bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e00a      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e008      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e006      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	@ 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e165      	b.n	8003ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f040 8154 	bne.w	8003eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d005      	beq.n	8003c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d130      	bne.n	8003c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c60:	2201      	movs	r2, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 0201 	and.w	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d017      	beq.n	8003cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d123      	bne.n	8003d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80ae 	beq.w	8003eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed8 <HAL_GPIO_Init+0x300>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	4a5c      	ldr	r2, [pc, #368]	@ (8003ed8 <HAL_GPIO_Init+0x300>)
 8003d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed8 <HAL_GPIO_Init+0x300>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7a:	4a58      	ldr	r2, [pc, #352]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	220f      	movs	r2, #15
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4f      	ldr	r2, [pc, #316]	@ (8003ee0 <HAL_GPIO_Init+0x308>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d025      	beq.n	8003df2 <HAL_GPIO_Init+0x21a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01f      	beq.n	8003dee <HAL_GPIO_Init+0x216>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ee8 <HAL_GPIO_Init+0x310>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d019      	beq.n	8003dea <HAL_GPIO_Init+0x212>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4c      	ldr	r2, [pc, #304]	@ (8003eec <HAL_GPIO_Init+0x314>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_GPIO_Init+0x20e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef0 <HAL_GPIO_Init+0x318>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00d      	beq.n	8003de2 <HAL_GPIO_Init+0x20a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef4 <HAL_GPIO_Init+0x31c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <HAL_GPIO_Init+0x206>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a49      	ldr	r2, [pc, #292]	@ (8003ef8 <HAL_GPIO_Init+0x320>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <HAL_GPIO_Init+0x202>
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	e00c      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e00a      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003dde:	2305      	movs	r3, #5
 8003de0:	e008      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003de2:	2304      	movs	r3, #4
 8003de4:	e006      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003de6:	2303      	movs	r3, #3
 8003de8:	e004      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e002      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_GPIO_Init+0x21c>
 8003df2:	2300      	movs	r3, #0
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f002 0203 	and.w	r2, r2, #3
 8003dfa:	0092      	lsls	r2, r2, #2
 8003dfc:	4093      	lsls	r3, r2
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e04:	4935      	ldr	r1, [pc, #212]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e12:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e36:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e60:	4a26      	ldr	r2, [pc, #152]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e66:	4b25      	ldr	r3, [pc, #148]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eb4:	4a11      	ldr	r2, [pc, #68]	@ (8003efc <HAL_GPIO_Init+0x324>)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	f67f ae96 	bls.w	8003bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3724      	adds	r7, #36	@ 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	40020400 	.word	0x40020400
 8003ee8:	40020800 	.word	0x40020800
 8003eec:	40020c00 	.word	0x40020c00
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40021400 	.word	0x40021400
 8003ef8:	40021800 	.word	0x40021800
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f1c:	e003      	b.n	8003f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	041a      	lsls	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	43d9      	mvns	r1, r3
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	400b      	ands	r3, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0cc      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b68      	ldr	r3, [pc, #416]	@ (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d90c      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b65      	ldr	r3, [pc, #404]	@ (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b63      	ldr	r3, [pc, #396]	@ (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b8      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fbc:	4b59      	ldr	r3, [pc, #356]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd4:	4b53      	ldr	r3, [pc, #332]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b50      	ldr	r3, [pc, #320]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	494d      	ldr	r1, [pc, #308]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d044      	beq.n	8004088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d119      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d003      	beq.n	8004026 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b3f      	ldr	r3, [pc, #252]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e067      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b37      	ldr	r3, [pc, #220]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4934      	ldr	r1, [pc, #208]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004058:	f7fe f9bc 	bl	80023d4 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e00a      	b.n	8004076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7fe f9b8 	bl	80023d4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e04f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 020c 	and.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1eb      	bne.n	8004060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b25      	ldr	r3, [pc, #148]	@ (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d20c      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b22      	ldr	r3, [pc, #136]	@ (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e032      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4916      	ldr	r1, [pc, #88]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040da:	4b12      	ldr	r3, [pc, #72]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	490e      	ldr	r1, [pc, #56]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ee:	f000 f855 	bl	800419c <HAL_RCC_GetSysClockFreq>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	490a      	ldr	r1, [pc, #40]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	5ccb      	ldrb	r3, [r1, r3]
 8004102:	fa22 f303 	lsr.w	r3, r2, r3
 8004106:	4a09      	ldr	r2, [pc, #36]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800410a:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe f91c 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023c00 	.word	0x40023c00
 8004124:	40023800 	.word	0x40023800
 8004128:	0800bca4 	.word	0x0800bca4
 800412c:	20000000 	.word	0x20000000
 8004130:	20000004 	.word	0x20000004

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004150:	f7ff fff0 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	0800bcb4 	.word	0x0800bcb4

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004178:	f7ff ffdc 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0b5b      	lsrs	r3, r3, #13
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	@ (8004198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	0800bcb4 	.word	0x0800bcb4

0800419c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b0a6      	sub	sp, #152	@ 0x98
 80041a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c2:	4bc8      	ldr	r3, [pc, #800]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	f200 817e 	bhi.w	80044cc <HAL_RCC_GetSysClockFreq+0x330>
 80041d0:	a201      	add	r2, pc, #4	@ (adr r2, 80041d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	0800420d 	.word	0x0800420d
 80041dc:	080044cd 	.word	0x080044cd
 80041e0:	080044cd 	.word	0x080044cd
 80041e4:	080044cd 	.word	0x080044cd
 80041e8:	08004215 	.word	0x08004215
 80041ec:	080044cd 	.word	0x080044cd
 80041f0:	080044cd 	.word	0x080044cd
 80041f4:	080044cd 	.word	0x080044cd
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	080044cd 	.word	0x080044cd
 8004200:	080044cd 	.word	0x080044cd
 8004204:	080044cd 	.word	0x080044cd
 8004208:	08004387 	.word	0x08004387
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4bb6      	ldr	r3, [pc, #728]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800420e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004212:	e15f      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004214:	4bb5      	ldr	r3, [pc, #724]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x350>)
 8004216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800421a:	e15b      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4bb1      	ldr	r3, [pc, #708]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004224:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004228:	4bae      	ldr	r3, [pc, #696]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d031      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004234:	4bab      	ldr	r3, [pc, #684]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	099b      	lsrs	r3, r3, #6
 800423a:	2200      	movs	r2, #0
 800423c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800423e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004246:	663b      	str	r3, [r7, #96]	@ 0x60
 8004248:	2300      	movs	r3, #0
 800424a:	667b      	str	r3, [r7, #100]	@ 0x64
 800424c:	4ba7      	ldr	r3, [pc, #668]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x350>)
 800424e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004252:	462a      	mov	r2, r5
 8004254:	fb03 f202 	mul.w	r2, r3, r2
 8004258:	2300      	movs	r3, #0
 800425a:	4621      	mov	r1, r4
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	4aa2      	ldr	r2, [pc, #648]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x350>)
 8004264:	4621      	mov	r1, r4
 8004266:	fba1 1202 	umull	r1, r2, r1, r2
 800426a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800426c:	460a      	mov	r2, r1
 800426e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004270:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004272:	4413      	add	r3, r2
 8004274:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800427a:	2200      	movs	r2, #0
 800427c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800427e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004280:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004284:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004288:	f7fc fcae 	bl	8000be8 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004296:	e064      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004298:	4b92      	ldr	r3, [pc, #584]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	2200      	movs	r2, #0
 80042a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80042a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80042a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	2300      	movs	r3, #0
 80042ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80042b4:	4622      	mov	r2, r4
 80042b6:	462b      	mov	r3, r5
 80042b8:	f04f 0000 	mov.w	r0, #0
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	0159      	lsls	r1, r3, #5
 80042c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c6:	0150      	lsls	r0, r2, #5
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4621      	mov	r1, r4
 80042ce:	1a51      	subs	r1, r2, r1
 80042d0:	6139      	str	r1, [r7, #16]
 80042d2:	4629      	mov	r1, r5
 80042d4:	eb63 0301 	sbc.w	r3, r3, r1
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e6:	4659      	mov	r1, fp
 80042e8:	018b      	lsls	r3, r1, #6
 80042ea:	4651      	mov	r1, sl
 80042ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042f0:	4651      	mov	r1, sl
 80042f2:	018a      	lsls	r2, r1, #6
 80042f4:	4651      	mov	r1, sl
 80042f6:	ebb2 0801 	subs.w	r8, r2, r1
 80042fa:	4659      	mov	r1, fp
 80042fc:	eb63 0901 	sbc.w	r9, r3, r1
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800430c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004310:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004314:	4690      	mov	r8, r2
 8004316:	4699      	mov	r9, r3
 8004318:	4623      	mov	r3, r4
 800431a:	eb18 0303 	adds.w	r3, r8, r3
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	462b      	mov	r3, r5
 8004322:	eb49 0303 	adc.w	r3, r9, r3
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004334:	4629      	mov	r1, r5
 8004336:	028b      	lsls	r3, r1, #10
 8004338:	4621      	mov	r1, r4
 800433a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800433e:	4621      	mov	r1, r4
 8004340:	028a      	lsls	r2, r1, #10
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800434a:	2200      	movs	r2, #0
 800434c:	643b      	str	r3, [r7, #64]	@ 0x40
 800434e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004350:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004354:	f7fc fc48 	bl	8000be8 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4613      	mov	r3, r2
 800435e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004362:	4b60      	ldr	r3, [pc, #384]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	3301      	adds	r3, #1
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004374:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004384:	e0a6      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004386:	4b57      	ldr	r3, [pc, #348]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800438e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004392:	4b54      	ldr	r3, [pc, #336]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02a      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439e:	4b51      	ldr	r3, [pc, #324]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	099b      	lsrs	r3, r3, #6
 80043a4:	2200      	movs	r2, #0
 80043a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043b0:	2100      	movs	r1, #0
 80043b2:	4b4e      	ldr	r3, [pc, #312]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x350>)
 80043b4:	fb03 f201 	mul.w	r2, r3, r1
 80043b8:	2300      	movs	r3, #0
 80043ba:	fb00 f303 	mul.w	r3, r0, r3
 80043be:	4413      	add	r3, r2
 80043c0:	4a4a      	ldr	r2, [pc, #296]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x350>)
 80043c2:	fba0 1202 	umull	r1, r2, r0, r2
 80043c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80043c8:	460a      	mov	r2, r1
 80043ca:	673a      	str	r2, [r7, #112]	@ 0x70
 80043cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043ce:	4413      	add	r3, r2
 80043d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80043d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d6:	2200      	movs	r2, #0
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043da:	637a      	str	r2, [r7, #52]	@ 0x34
 80043dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80043e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80043e4:	f7fc fc00 	bl	8000be8 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043f2:	e05b      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f4:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	2200      	movs	r2, #0
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	0159      	lsls	r1, r3, #5
 800441e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004422:	0150      	lsls	r0, r2, #5
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4641      	mov	r1, r8
 800442a:	ebb2 0a01 	subs.w	sl, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb63 0b01 	sbc.w	fp, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004448:	ebb2 040a 	subs.w	r4, r2, sl
 800444c:	eb63 050b 	sbc.w	r5, r3, fp
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	00eb      	lsls	r3, r5, #3
 800445a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445e:	00e2      	lsls	r2, r4, #3
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	4643      	mov	r3, r8
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	464b      	mov	r3, r9
 800446c:	eb45 0303 	adc.w	r3, r5, r3
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004494:	2200      	movs	r2, #0
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	61fa      	str	r2, [r7, #28]
 800449a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449e:	f7fc fba3 	bl	8000be8 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0f1b      	lsrs	r3, r3, #28
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80044ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80044ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80044d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3798      	adds	r7, #152	@ 0x98
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	017d7840 	.word	0x017d7840

080044f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e28d      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8083 	beq.w	8004616 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004510:	4b94      	ldr	r3, [pc, #592]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b04      	cmp	r3, #4
 800451a:	d019      	beq.n	8004550 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800451c:	4b91      	ldr	r3, [pc, #580]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
        || \
 8004524:	2b08      	cmp	r3, #8
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004528:	4b8e      	ldr	r3, [pc, #568]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004534:	d00c      	beq.n	8004550 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004536:	4b8b      	ldr	r3, [pc, #556]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800453e:	2b0c      	cmp	r3, #12
 8004540:	d112      	bne.n	8004568 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b88      	ldr	r3, [pc, #544]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800454e:	d10b      	bne.n	8004568 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4b84      	ldr	r3, [pc, #528]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d05b      	beq.n	8004614 <HAL_RCC_OscConfig+0x124>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d157      	bne.n	8004614 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e25a      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x90>
 8004572:	4b7c      	ldr	r3, [pc, #496]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7b      	ldr	r2, [pc, #492]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xcc>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0xb4>
 800458a:	4b76      	ldr	r3, [pc, #472]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a75      	ldr	r2, [pc, #468]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b73      	ldr	r3, [pc, #460]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a72      	ldr	r2, [pc, #456]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xcc>
 80045a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd ff06 	bl	80023d4 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd ff02 	bl	80023d4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e21f      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b61      	ldr	r3, [pc, #388]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xdc>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd fef2 	bl	80023d4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd feee 	bl	80023d4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e20b      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	4b57      	ldr	r3, [pc, #348]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x104>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d06f      	beq.n	8004702 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004622:	4b50      	ldr	r3, [pc, #320]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b00      	cmp	r3, #0
 800462c:	d017      	beq.n	800465e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800462e:	4b4d      	ldr	r3, [pc, #308]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
        || \
 8004636:	2b08      	cmp	r3, #8
 8004638:	d105      	bne.n	8004646 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800463a:	4b4a      	ldr	r3, [pc, #296]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b47      	ldr	r3, [pc, #284]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d11c      	bne.n	800468c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b44      	ldr	r3, [pc, #272]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	4b41      	ldr	r3, [pc, #260]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCC_OscConfig+0x186>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e1d3      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004676:	4b3b      	ldr	r3, [pc, #236]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4937      	ldr	r1, [pc, #220]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	e03a      	b.n	8004702 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004694:	4b34      	ldr	r3, [pc, #208]	@ (8004768 <HAL_RCC_OscConfig+0x278>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd fe9b 	bl	80023d4 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a2:	f7fd fe97 	bl	80023d4 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e1b4      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4925      	ldr	r1, [pc, #148]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d6:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <HAL_RCC_OscConfig+0x278>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fe7a 	bl	80023d4 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e4:	f7fd fe76 	bl	80023d4 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e193      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d036      	beq.n	800477c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <HAL_RCC_OscConfig+0x27c>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd fe5a 	bl	80023d4 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd fe56 	bl	80023d4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e173      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x234>
 8004742:	e01b      	b.n	800477c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b09      	ldr	r3, [pc, #36]	@ (800476c <HAL_RCC_OscConfig+0x27c>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fd fe43 	bl	80023d4 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	e00e      	b.n	8004770 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004752:	f7fd fe3f 	bl	80023d4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d907      	bls.n	8004770 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e15c      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
 8004764:	40023800 	.word	0x40023800
 8004768:	42470000 	.word	0x42470000
 800476c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	4b8a      	ldr	r3, [pc, #552]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ea      	bne.n	8004752 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8097 	beq.w	80048b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4b83      	ldr	r3, [pc, #524]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10f      	bne.n	80047ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	4a7e      	ldr	r2, [pc, #504]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047aa:	4b7c      	ldr	r3, [pc, #496]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ba:	4b79      	ldr	r3, [pc, #484]	@ (80049a0 <HAL_RCC_OscConfig+0x4b0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d118      	bne.n	80047f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047c6:	4b76      	ldr	r3, [pc, #472]	@ (80049a0 <HAL_RCC_OscConfig+0x4b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a75      	ldr	r2, [pc, #468]	@ (80049a0 <HAL_RCC_OscConfig+0x4b0>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d2:	f7fd fdff 	bl	80023d4 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fd fdfb 	bl	80023d4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e118      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <HAL_RCC_OscConfig+0x4b0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <HAL_RCC_OscConfig+0x31e>
 8004800:	4b66      	ldr	r3, [pc, #408]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	4a65      	ldr	r2, [pc, #404]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6713      	str	r3, [r2, #112]	@ 0x70
 800480c:	e01c      	b.n	8004848 <HAL_RCC_OscConfig+0x358>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b05      	cmp	r3, #5
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0x340>
 8004816:	4b61      	ldr	r3, [pc, #388]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	4a60      	ldr	r2, [pc, #384]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	6713      	str	r3, [r2, #112]	@ 0x70
 8004822:	4b5e      	ldr	r3, [pc, #376]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	4a5d      	ldr	r2, [pc, #372]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6713      	str	r3, [r2, #112]	@ 0x70
 800482e:	e00b      	b.n	8004848 <HAL_RCC_OscConfig+0x358>
 8004830:	4b5a      	ldr	r3, [pc, #360]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a59      	ldr	r2, [pc, #356]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
 800483c:	4b57      	ldr	r3, [pc, #348]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a56      	ldr	r2, [pc, #344]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f023 0304 	bic.w	r3, r3, #4
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fd fdc0 	bl	80023d4 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fd fdbc 	bl	80023d4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0d7      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ee      	beq.n	8004858 <HAL_RCC_OscConfig+0x368>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fd fdaa 	bl	80023d4 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004882:	e00a      	b.n	800489a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7fd fda6 	bl	80023d4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0c1      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489a:	4b40      	ldr	r3, [pc, #256]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ee      	bne.n	8004884 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ac:	4b3b      	ldr	r3, [pc, #236]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	4a3a      	ldr	r2, [pc, #232]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80048b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80ad 	beq.w	8004a1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c2:	4b36      	ldr	r3, [pc, #216]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d060      	beq.n	8004990 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d145      	bne.n	8004962 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b33      	ldr	r3, [pc, #204]	@ (80049a4 <HAL_RCC_OscConfig+0x4b4>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fd7a 	bl	80023d4 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fd76 	bl	80023d4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e093      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b29      	ldr	r3, [pc, #164]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	491b      	ldr	r1, [pc, #108]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004934:	4b1b      	ldr	r3, [pc, #108]	@ (80049a4 <HAL_RCC_OscConfig+0x4b4>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd fd4b 	bl	80023d4 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fd fd47 	bl	80023d4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e064      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004954:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x452>
 8004960:	e05c      	b.n	8004a1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <HAL_RCC_OscConfig+0x4b4>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd fd34 	bl	80023d4 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd fd30 	bl	80023d4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04d      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_RCC_OscConfig+0x4ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x480>
 800498e:	e045      	b.n	8004a1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e040      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
 800499c:	40023800 	.word	0x40023800
 80049a0:	40007000 	.word	0x40007000
 80049a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a28 <HAL_RCC_OscConfig+0x538>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d030      	beq.n	8004a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d129      	bne.n	8004a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d122      	bne.n	8004a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d119      	bne.n	8004a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	3b01      	subs	r3, #1
 80049f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d10f      	bne.n	8004a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800

08004a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e041      	b.n	8004ac2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd f9fc 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 f95e 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d001      	beq.n	8004ae4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e046      	b.n	8004b72 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a23      	ldr	r2, [pc, #140]	@ (8004b80 <HAL_TIM_Base_Start+0xb4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d01d      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1f      	ldr	r2, [pc, #124]	@ (8004b84 <HAL_TIM_Base_Start+0xb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b88 <HAL_TIM_Base_Start+0xbc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1c      	ldr	r2, [pc, #112]	@ (8004b8c <HAL_TIM_Base_Start+0xc0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1b      	ldr	r2, [pc, #108]	@ (8004b90 <HAL_TIM_Base_Start+0xc4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	@ (8004b94 <HAL_TIM_Base_Start+0xc8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIM_Base_Start+0x70>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	@ (8004b98 <HAL_TIM_Base_Start+0xcc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d111      	bne.n	8004b60 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d010      	beq.n	8004b70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	e007      	b.n	8004b70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40001800 	.word	0x40001800

08004b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e0b4      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x186>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf0:	d03e      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0xd4>
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf6:	f200 8087 	bhi.w	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfe:	f000 8086 	beq.w	8004d0e <HAL_TIM_ConfigClockSource+0x172>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c06:	d87f      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b70      	cmp	r3, #112	@ 0x70
 8004c0a:	d01a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0xa6>
 8004c0c:	2b70      	cmp	r3, #112	@ 0x70
 8004c0e:	d87b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b60      	cmp	r3, #96	@ 0x60
 8004c12:	d050      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c14:	2b60      	cmp	r3, #96	@ 0x60
 8004c16:	d877      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b50      	cmp	r3, #80	@ 0x50
 8004c1a:	d03c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0xfa>
 8004c1c:	2b50      	cmp	r3, #80	@ 0x50
 8004c1e:	d873      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d058      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c24:	2b40      	cmp	r3, #64	@ 0x40
 8004c26:	d86f      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d064      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b30      	cmp	r3, #48	@ 0x30
 8004c2e:	d86b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d060      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d867      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05c      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d05a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	e062      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c52:	f000 f98b 	bl	8004f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
      break;
 8004c6e:	e04f      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	f000 f974 	bl	8004f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c92:	609a      	str	r2, [r3, #8]
      break;
 8004c94:	e03c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 f8e8 	bl	8004e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2150      	movs	r1, #80	@ 0x50
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f941 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e02c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 f907 	bl	8004ed6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2160      	movs	r1, #96	@ 0x60
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f931 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e01c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 f8c8 	bl	8004e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2140      	movs	r1, #64	@ 0x40
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f921 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e00c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 f918 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004d06:	e003      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	e000      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a43      	ldr	r2, [pc, #268]	@ (8004e4c <TIM_Base_SetConfig+0x120>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a40      	ldr	r2, [pc, #256]	@ (8004e50 <TIM_Base_SetConfig+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3f      	ldr	r2, [pc, #252]	@ (8004e54 <TIM_Base_SetConfig+0x128>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3d      	ldr	r2, [pc, #244]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a32      	ldr	r2, [pc, #200]	@ (8004e4c <TIM_Base_SetConfig+0x120>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8c:	d027      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2f      	ldr	r2, [pc, #188]	@ (8004e50 <TIM_Base_SetConfig+0x124>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d023      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2e      	ldr	r2, [pc, #184]	@ (8004e54 <TIM_Base_SetConfig+0x128>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01f      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e60 <TIM_Base_SetConfig+0x134>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2a      	ldr	r2, [pc, #168]	@ (8004e64 <TIM_Base_SetConfig+0x138>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a29      	ldr	r2, [pc, #164]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <TIM_Base_SetConfig+0x140>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <TIM_Base_SetConfig+0x144>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <TIM_Base_SetConfig+0x148>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a0e      	ldr	r2, [pc, #56]	@ (8004e4c <TIM_Base_SetConfig+0x120>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_Base_SetConfig+0xf2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a10      	ldr	r2, [pc, #64]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d103      	bne.n	8004e26 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40001800 	.word	0x40001800
 8004e70:	40001c00 	.word	0x40001c00
 8004e74:	40002000 	.word	0x40002000

08004e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 030a 	bic.w	r3, r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f023 0210 	bic.w	r2, r3, #16
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	031b      	lsls	r3, r3, #12
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f043 0307 	orr.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	021a      	lsls	r2, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e05a      	b.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a21      	ldr	r2, [pc, #132]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d01d      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1d      	ldr	r2, [pc, #116]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d018      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a17      	ldr	r2, [pc, #92]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10c      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4313      	orrs	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40001800 	.word	0x40001800

080050a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e042      	b.n	800513c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc fee2 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	@ 0x24
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f973 	bl	80053d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695a      	ldr	r2, [r3, #20]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800510c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800511c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b20      	cmp	r3, #32
 8005162:	d175      	bne.n	8005250 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_UART_Transmit+0x2c>
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e06e      	b.n	8005252 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2221      	movs	r2, #33	@ 0x21
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005182:	f7fd f927 	bl	80023d4 <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519c:	d108      	bne.n	80051b0 <HAL_UART_Transmit+0x6c>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e003      	b.n	80051b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051b8:	e02e      	b.n	8005218 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	2180      	movs	r1, #128	@ 0x80
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f848 	bl	800525a <UART_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e03a      	b.n	8005252 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	3302      	adds	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e007      	b.n	800520a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3301      	adds	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1cb      	bne.n	80051ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	2140      	movs	r1, #64	@ 0x40
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f814 	bl	800525a <UART_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	603b      	str	r3, [r7, #0]
 8005266:	4613      	mov	r3, r2
 8005268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526a:	e03b      	b.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d037      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7fd f8ae 	bl	80023d4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <UART_WaitOnFlagUntilTimeout+0x30>
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e03a      	b.n	8005304 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d023      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b80      	cmp	r3, #128	@ 0x80
 80052a0:	d020      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d01d      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d116      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f81d 	bl	800530c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2208      	movs	r2, #8
 80052d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e00f      	b.n	8005304 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d0b4      	beq.n	800526c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530c:	b480      	push	{r7}
 800530e:	b095      	sub	sp, #84	@ 0x54
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800532a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005334:	643a      	str	r2, [r7, #64]	@ 0x40
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800533a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3314      	adds	r3, #20
 800534e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	61fb      	str	r3, [r7, #28]
   return(result);
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005368:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	d119      	bne.n	80053b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	60bb      	str	r3, [r7, #8]
   return(result);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f023 0310 	bic.w	r3, r3, #16
 800539a:	647b      	str	r3, [r7, #68]	@ 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a4:	61ba      	str	r2, [r7, #24]
 80053a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6979      	ldr	r1, [r7, #20]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	613b      	str	r3, [r7, #16]
   return(result);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e5      	bne.n	8005384 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053c6:	bf00      	nop
 80053c8:	3754      	adds	r7, #84	@ 0x54
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d8:	b0c0      	sub	sp, #256	@ 0x100
 80053da:	af00      	add	r7, sp, #0
 80053dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	68d9      	ldr	r1, [r3, #12]
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	ea40 0301 	orr.w	r3, r0, r1
 80053fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	431a      	orrs	r2, r3
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	431a      	orrs	r2, r3
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800542c:	f021 010c 	bic.w	r1, r1, #12
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800543a:	430b      	orrs	r3, r1
 800543c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544e:	6999      	ldr	r1, [r3, #24]
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	ea40 0301 	orr.w	r3, r0, r1
 800545a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b8f      	ldr	r3, [pc, #572]	@ (80056a0 <UART_SetConfig+0x2cc>)
 8005464:	429a      	cmp	r2, r3
 8005466:	d005      	beq.n	8005474 <UART_SetConfig+0xa0>
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b8d      	ldr	r3, [pc, #564]	@ (80056a4 <UART_SetConfig+0x2d0>)
 8005470:	429a      	cmp	r2, r3
 8005472:	d104      	bne.n	800547e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fe fe7e 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8005478:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800547c:	e003      	b.n	8005486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800547e:	f7fe fe65 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8005482:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005490:	f040 810c 	bne.w	80056ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800549e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054a6:	4622      	mov	r2, r4
 80054a8:	462b      	mov	r3, r5
 80054aa:	1891      	adds	r1, r2, r2
 80054ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054ae:	415b      	adcs	r3, r3
 80054b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054b6:	4621      	mov	r1, r4
 80054b8:	eb12 0801 	adds.w	r8, r2, r1
 80054bc:	4629      	mov	r1, r5
 80054be:	eb43 0901 	adc.w	r9, r3, r1
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054d6:	4690      	mov	r8, r2
 80054d8:	4699      	mov	r9, r3
 80054da:	4623      	mov	r3, r4
 80054dc:	eb18 0303 	adds.w	r3, r8, r3
 80054e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054e4:	462b      	mov	r3, r5
 80054e6:	eb49 0303 	adc.w	r3, r9, r3
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005502:	460b      	mov	r3, r1
 8005504:	18db      	adds	r3, r3, r3
 8005506:	653b      	str	r3, [r7, #80]	@ 0x50
 8005508:	4613      	mov	r3, r2
 800550a:	eb42 0303 	adc.w	r3, r2, r3
 800550e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005518:	f7fb fb66 	bl	8000be8 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b61      	ldr	r3, [pc, #388]	@ (80056a8 <UART_SetConfig+0x2d4>)
 8005522:	fba3 2302 	umull	r2, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	011c      	lsls	r4, r3, #4
 800552a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005534:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800553c:	4642      	mov	r2, r8
 800553e:	464b      	mov	r3, r9
 8005540:	1891      	adds	r1, r2, r2
 8005542:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005544:	415b      	adcs	r3, r3
 8005546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800554c:	4641      	mov	r1, r8
 800554e:	eb12 0a01 	adds.w	sl, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb43 0b01 	adc.w	fp, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800556c:	4692      	mov	sl, r2
 800556e:	469b      	mov	fp, r3
 8005570:	4643      	mov	r3, r8
 8005572:	eb1a 0303 	adds.w	r3, sl, r3
 8005576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800557a:	464b      	mov	r3, r9
 800557c:	eb4b 0303 	adc.w	r3, fp, r3
 8005580:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005590:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005598:	460b      	mov	r3, r1
 800559a:	18db      	adds	r3, r3, r3
 800559c:	643b      	str	r3, [r7, #64]	@ 0x40
 800559e:	4613      	mov	r3, r2
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055ae:	f7fb fb1b 	bl	8000be8 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <UART_SetConfig+0x2d4>)
 80055ba:	fba3 2301 	umull	r2, r3, r3, r1
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2264      	movs	r2, #100	@ 0x64
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	1acb      	subs	r3, r1, r3
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055ce:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <UART_SetConfig+0x2d4>)
 80055d0:	fba3 2302 	umull	r2, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055dc:	441c      	add	r4, r3
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	1891      	adds	r1, r2, r2
 80055f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055f8:	415b      	adcs	r3, r3
 80055fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005600:	4641      	mov	r1, r8
 8005602:	1851      	adds	r1, r2, r1
 8005604:	6339      	str	r1, [r7, #48]	@ 0x30
 8005606:	4649      	mov	r1, r9
 8005608:	414b      	adcs	r3, r1
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005618:	4659      	mov	r1, fp
 800561a:	00cb      	lsls	r3, r1, #3
 800561c:	4651      	mov	r1, sl
 800561e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005622:	4651      	mov	r1, sl
 8005624:	00ca      	lsls	r2, r1, #3
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	4603      	mov	r3, r0
 800562c:	4642      	mov	r2, r8
 800562e:	189b      	adds	r3, r3, r2
 8005630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005634:	464b      	mov	r3, r9
 8005636:	460a      	mov	r2, r1
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800564c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005654:	460b      	mov	r3, r1
 8005656:	18db      	adds	r3, r3, r3
 8005658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800565a:	4613      	mov	r3, r2
 800565c:	eb42 0303 	adc.w	r3, r2, r3
 8005660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800566a:	f7fb fabd 	bl	8000be8 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <UART_SetConfig+0x2d4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	@ 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	3332      	adds	r3, #50	@ 0x32
 8005686:	4a08      	ldr	r2, [pc, #32]	@ (80056a8 <UART_SetConfig+0x2d4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 0207 	and.w	r2, r3, #7
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4422      	add	r2, r4
 800569a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800569c:	e106      	b.n	80058ac <UART_SetConfig+0x4d8>
 800569e:	bf00      	nop
 80056a0:	40011000 	.word	0x40011000
 80056a4:	40011400 	.word	0x40011400
 80056a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056be:	4642      	mov	r2, r8
 80056c0:	464b      	mov	r3, r9
 80056c2:	1891      	adds	r1, r2, r2
 80056c4:	6239      	str	r1, [r7, #32]
 80056c6:	415b      	adcs	r3, r3
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ce:	4641      	mov	r1, r8
 80056d0:	1854      	adds	r4, r2, r1
 80056d2:	4649      	mov	r1, r9
 80056d4:	eb43 0501 	adc.w	r5, r3, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	00eb      	lsls	r3, r5, #3
 80056e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056e6:	00e2      	lsls	r2, r4, #3
 80056e8:	4614      	mov	r4, r2
 80056ea:	461d      	mov	r5, r3
 80056ec:	4643      	mov	r3, r8
 80056ee:	18e3      	adds	r3, r4, r3
 80056f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056f4:	464b      	mov	r3, r9
 80056f6:	eb45 0303 	adc.w	r3, r5, r3
 80056fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800570a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800571a:	4629      	mov	r1, r5
 800571c:	008b      	lsls	r3, r1, #2
 800571e:	4621      	mov	r1, r4
 8005720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005724:	4621      	mov	r1, r4
 8005726:	008a      	lsls	r2, r1, #2
 8005728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800572c:	f7fb fa5c 	bl	8000be8 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4b60      	ldr	r3, [pc, #384]	@ (80058b8 <UART_SetConfig+0x4e4>)
 8005736:	fba3 2302 	umull	r2, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	011c      	lsls	r4, r3, #4
 800573e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005748:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800574c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	1891      	adds	r1, r2, r2
 8005756:	61b9      	str	r1, [r7, #24]
 8005758:	415b      	adcs	r3, r3
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005760:	4641      	mov	r1, r8
 8005762:	1851      	adds	r1, r2, r1
 8005764:	6139      	str	r1, [r7, #16]
 8005766:	4649      	mov	r1, r9
 8005768:	414b      	adcs	r3, r1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005778:	4659      	mov	r1, fp
 800577a:	00cb      	lsls	r3, r1, #3
 800577c:	4651      	mov	r1, sl
 800577e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005782:	4651      	mov	r1, sl
 8005784:	00ca      	lsls	r2, r1, #3
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	4603      	mov	r3, r0
 800578c:	4642      	mov	r2, r8
 800578e:	189b      	adds	r3, r3, r2
 8005790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005794:	464b      	mov	r3, r9
 8005796:	460a      	mov	r2, r1
 8005798:	eb42 0303 	adc.w	r3, r2, r3
 800579c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057b8:	4649      	mov	r1, r9
 80057ba:	008b      	lsls	r3, r1, #2
 80057bc:	4641      	mov	r1, r8
 80057be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c2:	4641      	mov	r1, r8
 80057c4:	008a      	lsls	r2, r1, #2
 80057c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057ca:	f7fb fa0d 	bl	8000be8 <__aeabi_uldivmod>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4611      	mov	r1, r2
 80057d4:	4b38      	ldr	r3, [pc, #224]	@ (80058b8 <UART_SetConfig+0x4e4>)
 80057d6:	fba3 2301 	umull	r2, r3, r3, r1
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2264      	movs	r2, #100	@ 0x64
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	1acb      	subs	r3, r1, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	@ 0x32
 80057e8:	4a33      	ldr	r2, [pc, #204]	@ (80058b8 <UART_SetConfig+0x4e4>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057f4:	441c      	add	r4, r3
 80057f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fa:	2200      	movs	r2, #0
 80057fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80057fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005804:	4642      	mov	r2, r8
 8005806:	464b      	mov	r3, r9
 8005808:	1891      	adds	r1, r2, r2
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	415b      	adcs	r3, r3
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005814:	4641      	mov	r1, r8
 8005816:	1851      	adds	r1, r2, r1
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	4649      	mov	r1, r9
 800581c:	414b      	adcs	r3, r1
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800582c:	4659      	mov	r1, fp
 800582e:	00cb      	lsls	r3, r1, #3
 8005830:	4651      	mov	r1, sl
 8005832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005836:	4651      	mov	r1, sl
 8005838:	00ca      	lsls	r2, r1, #3
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	4603      	mov	r3, r0
 8005840:	4642      	mov	r2, r8
 8005842:	189b      	adds	r3, r3, r2
 8005844:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005846:	464b      	mov	r3, r9
 8005848:	460a      	mov	r2, r1
 800584a:	eb42 0303 	adc.w	r3, r2, r3
 800584e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	663b      	str	r3, [r7, #96]	@ 0x60
 800585a:	667a      	str	r2, [r7, #100]	@ 0x64
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005868:	4649      	mov	r1, r9
 800586a:	008b      	lsls	r3, r1, #2
 800586c:	4641      	mov	r1, r8
 800586e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005872:	4641      	mov	r1, r8
 8005874:	008a      	lsls	r2, r1, #2
 8005876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800587a:	f7fb f9b5 	bl	8000be8 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <UART_SetConfig+0x4e4>)
 8005884:	fba3 1302 	umull	r1, r3, r3, r2
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	2164      	movs	r1, #100	@ 0x64
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	3332      	adds	r3, #50	@ 0x32
 8005896:	4a08      	ldr	r2, [pc, #32]	@ (80058b8 <UART_SetConfig+0x4e4>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4422      	add	r2, r4
 80058aa:	609a      	str	r2, [r3, #8]
}
 80058ac:	bf00      	nop
 80058ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058b2:	46bd      	mov	sp, r7
 80058b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b8:	51eb851f 	.word	0x51eb851f

080058bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ce:	2b84      	cmp	r3, #132	@ 0x84
 80058d0:	d005      	beq.n	80058de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	3303      	adds	r3, #3
 80058dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058f0:	f001 f90c 	bl	8006b0c <vTaskStartScheduler>
  
  return osOK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	bd80      	pop	{r7, pc}

080058fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fc:	b089      	sub	sp, #36	@ 0x24
 80058fe:	af04      	add	r7, sp, #16
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d020      	beq.n	800594e <osThreadCreate+0x54>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01c      	beq.n	800594e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685c      	ldr	r4, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691e      	ldr	r6, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ffc8 	bl	80058bc <makeFreeRtosPriority>
 800592c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005936:	9202      	str	r2, [sp, #8]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	9100      	str	r1, [sp, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4632      	mov	r2, r6
 8005940:	4629      	mov	r1, r5
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fe00 	bl	8006548 <xTaskCreateStatic>
 8005948:	4603      	mov	r3, r0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e01c      	b.n	8005988 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685c      	ldr	r4, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800595a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ffaa 	bl	80058bc <makeFreeRtosPriority>
 8005968:	4602      	mov	r2, r0
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	9200      	str	r2, [sp, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	4632      	mov	r2, r6
 8005976:	4629      	mov	r1, r5
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fe45 	bl	8006608 <xTaskCreate>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	e000      	b.n	800598a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005988:	68fb      	ldr	r3, [r7, #12]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005992 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <osDelay+0x16>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	e000      	b.n	80059aa <osDelay+0x18>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 ffe4 	bl	8006978 <vTaskDelay>
  
  return osOK;
 80059b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 0208 	add.w	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f103 0208 	add.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f103 0208 	add.w	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e00c      	b.n	8005a96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e002      	b.n	8005a8a <vListInsert+0x2e>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d2f6      	bcs.n	8005a84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6892      	ldr	r2, [r2, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6852      	ldr	r2, [r2, #4]
 8005aee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d103      	bne.n	8005b02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <xQueueGenericReset+0x2c>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	60bb      	str	r3, [r7, #8]
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b50:	f002 f82a 	bl	8007ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	3b01      	subs	r3, #1
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	22ff      	movs	r2, #255	@ 0xff
 8005b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	22ff      	movs	r2, #255	@ 0xff
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d114      	bne.n	8005bd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01a      	beq.n	8005be4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3310      	adds	r3, #16
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fa04 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <xQueueGenericReset+0xd0>)
 8005bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	e009      	b.n	8005be4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fef0 	bl	80059ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3324      	adds	r3, #36	@ 0x24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff feeb 	bl	80059ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005be4:	f002 f812 	bl	8007c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005be8:	2301      	movs	r3, #1
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08a      	sub	sp, #40	@ 0x28
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	613b      	str	r3, [r7, #16]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3348      	adds	r3, #72	@ 0x48
 8005c32:	4618      	mov	r0, r3
 8005c34:	f002 f8da 	bl	8007dec <pvPortMalloc>
 8005c38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d011      	beq.n	8005c64 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3348      	adds	r3, #72	@ 0x48
 8005c48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c52:	79fa      	ldrb	r2, [r7, #7]
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f805 	bl	8005c6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c64:	69bb      	ldr	r3, [r7, #24]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	e002      	b.n	8005c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	69b8      	ldr	r0, [r7, #24]
 8005ca0:	f7ff ff40 	bl	8005b24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f81c 	bl	8005d10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cea:	2301      	movs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	6978      	ldr	r0, [r7, #20]
 8005cfa:	f7ff ff7d 	bl	8005bf8 <xQueueGenericCreate>
 8005cfe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff ffd3 	bl	8005cac <prvInitialiseMutex>

		return xNewQueue;
 8005d06:	68fb      	ldr	r3, [r7, #12]
	}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	@ 0x38
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <xQueueGenericSend+0x34>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <xQueueGenericSend+0x42>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <xQueueGenericSend+0x46>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <xQueueGenericSend+0x48>
 8005d56:	2300      	movs	r3, #0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <xQueueGenericSend+0x64>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSend+0x72>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <xQueueGenericSend+0x76>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <xQueueGenericSend+0x78>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <xQueueGenericSend+0x94>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	623b      	str	r3, [r7, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005da4:	f001 facc 	bl	8007340 <xTaskGetSchedulerState>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <xQueueGenericSend+0xa4>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <xQueueGenericSend+0xa8>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <xQueueGenericSend+0xaa>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	61fb      	str	r3, [r7, #28]
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	e7fd      	b.n	8005dd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dd6:	f001 fee7 	bl	8007ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d302      	bcc.n	8005dec <xQueueGenericSend+0xdc>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d129      	bne.n	8005e40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005df2:	f000 fa99 	bl	8006328 <prvCopyDataToQueue>
 8005df6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	3324      	adds	r3, #36	@ 0x24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 f8db 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d013      	beq.n	8005e38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e10:	4b3f      	ldr	r3, [pc, #252]	@ (8005f10 <xQueueGenericSend+0x200>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	e00a      	b.n	8005e38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e28:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <xQueueGenericSend+0x200>)
 8005e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e38:	f001 fee8 	bl	8007c0c <vPortExitCritical>
				return pdPASS;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e063      	b.n	8005f08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e46:	f001 fee1 	bl	8007c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e05c      	b.n	8005f08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 f915 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e62:	f001 fed3 	bl	8007c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e66:	f000 feb3 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e6a:	f001 fe9d 	bl	8007ba8 <vPortEnterCritical>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e74:	b25b      	sxtb	r3, r3
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d103      	bne.n	8005e84 <xQueueGenericSend+0x174>
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d103      	bne.n	8005e9a <xQueueGenericSend+0x18a>
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e9a:	f001 feb7 	bl	8007c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e9e:	1d3a      	adds	r2, r7, #4
 8005ea0:	f107 0314 	add.w	r3, r7, #20
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f904 	bl	80070b4 <xTaskCheckForTimeOut>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d124      	bne.n	8005efc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eb4:	f000 fb30 	bl	8006518 <prvIsQueueFull>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	3310      	adds	r3, #16
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f854 	bl	8006f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ece:	f000 fabb 	bl	8006448 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ed2:	f000 fe8b 	bl	8006bec <xTaskResumeAll>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f47f af7c 	bne.w	8005dd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ede:	4b0c      	ldr	r3, [pc, #48]	@ (8005f10 <xQueueGenericSend+0x200>)
 8005ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	e772      	b.n	8005dd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ef2:	f000 faa9 	bl	8006448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ef6:	f000 fe79 	bl	8006bec <xTaskResumeAll>
 8005efa:	e76c      	b.n	8005dd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005efe:	f000 faa3 	bl	8006448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f02:	f000 fe73 	bl	8006bec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3738      	adds	r7, #56	@ 0x38
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	@ 0x30
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <xQueueReceive+0x32>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	623b      	str	r3, [r7, #32]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <xQueueReceive+0x40>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <xQueueReceive+0x44>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <xQueueReceive+0x46>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <xQueueReceive+0x62>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	61fb      	str	r3, [r7, #28]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f76:	f001 f9e3 	bl	8007340 <xTaskGetSchedulerState>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <xQueueReceive+0x72>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <xQueueReceive+0x76>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueReceive+0x78>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <xQueueReceive+0x94>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61bb      	str	r3, [r7, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fa8:	f001 fdfe 	bl	8007ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01f      	beq.n	8005ff8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fbc:	f000 fa1e 	bl	80063fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00f      	beq.n	8005ff0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	3310      	adds	r3, #16
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fff3 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80060d4 <xQueueReceive+0x1c0>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ff0:	f001 fe0c 	bl	8007c0c <vPortExitCritical>
				return pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e069      	b.n	80060cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ffe:	f001 fe05 	bl	8007c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006002:	2300      	movs	r3, #0
 8006004:	e062      	b.n	80060cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800600c:	f107 0310 	add.w	r3, r7, #16
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f839 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601a:	f001 fdf7 	bl	8007c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800601e:	f000 fdd7 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006022:	f001 fdc1 	bl	8007ba8 <vPortEnterCritical>
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800602c:	b25b      	sxtb	r3, r3
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d103      	bne.n	800603c <xQueueReceive+0x128>
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <xQueueReceive+0x13e>
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006052:	f001 fddb 	bl	8007c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006056:	1d3a      	adds	r2, r7, #4
 8006058:	f107 0310 	add.w	r3, r7, #16
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f001 f828 	bl	80070b4 <xTaskCheckForTimeOut>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d123      	bne.n	80060b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800606a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800606c:	f000 fa3e 	bl	80064ec <prvIsQueueEmpty>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d017      	beq.n	80060a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	3324      	adds	r3, #36	@ 0x24
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f000 ff78 	bl	8006f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006086:	f000 f9df 	bl	8006448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800608a:	f000 fdaf 	bl	8006bec <xTaskResumeAll>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d189      	bne.n	8005fa8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006094:	4b0f      	ldr	r3, [pc, #60]	@ (80060d4 <xQueueReceive+0x1c0>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	e780      	b.n	8005fa8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a8:	f000 f9ce 	bl	8006448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ac:	f000 fd9e 	bl	8006bec <xTaskResumeAll>
 80060b0:	e77a      	b.n	8005fa8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b4:	f000 f9c8 	bl	8006448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060b8:	f000 fd98 	bl	8006bec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060be:	f000 fa15 	bl	80064ec <prvIsQueueEmpty>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f43f af6f 	beq.w	8005fa8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3730      	adds	r7, #48	@ 0x30
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	@ 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <xQueueSemaphoreTake+0x34>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	623b      	str	r3, [r7, #32]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61fb      	str	r3, [r7, #28]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800612c:	f001 f908 	bl	8007340 <xTaskGetSchedulerState>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <xQueueSemaphoreTake+0x64>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <xQueueSemaphoreTake+0x68>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <xQueueSemaphoreTake+0x6a>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	61bb      	str	r3, [r7, #24]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800615e:	f001 fd23 	bl	8007ba8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d024      	beq.n	80061b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	1e5a      	subs	r2, r3, #1
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800617e:	f001 fa8b 	bl	8007698 <pvTaskIncrementMutexHeldCount>
 8006182:	4602      	mov	r2, r0
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00f      	beq.n	80061b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	3310      	adds	r3, #16
 8006194:	4618      	mov	r0, r3
 8006196:	f000 ff13 	bl	8006fc0 <xTaskRemoveFromEventList>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061a0:	4b54      	ldr	r3, [pc, #336]	@ (80062f4 <xQueueSemaphoreTake+0x21c>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061b0:	f001 fd2c 	bl	8007c0c <vPortExitCritical>
				return pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e098      	b.n	80062ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d112      	bne.n	80061e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	617b      	str	r3, [r7, #20]
}
 80061d6:	bf00      	nop
 80061d8:	bf00      	nop
 80061da:	e7fd      	b.n	80061d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80061dc:	f001 fd16 	bl	8007c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e082      	b.n	80062ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 ff4a 	bl	8007088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061f4:	2301      	movs	r3, #1
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061f8:	f001 fd08 	bl	8007c0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061fc:	f000 fce8 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006200:	f001 fcd2 	bl	8007ba8 <vPortEnterCritical>
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800620a:	b25b      	sxtb	r3, r3
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d103      	bne.n	800621a <xQueueSemaphoreTake+0x142>
 8006212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800621a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d103      	bne.n	8006230 <xQueueSemaphoreTake+0x158>
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006230:	f001 fcec 	bl	8007c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006234:	463a      	mov	r2, r7
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ff39 	bl	80070b4 <xTaskCheckForTimeOut>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d132      	bne.n	80062ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800624a:	f000 f94f 	bl	80064ec <prvIsQueueEmpty>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d026      	beq.n	80062a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800625c:	f001 fca4 	bl	8007ba8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4618      	mov	r0, r3
 8006266:	f001 f889 	bl	800737c <xTaskPriorityInherit>
 800626a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800626c:	f001 fcce 	bl	8007c0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006272:	3324      	adds	r3, #36	@ 0x24
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	4611      	mov	r1, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fe7b 	bl	8006f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800627e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006280:	f000 f8e2 	bl	8006448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006284:	f000 fcb2 	bl	8006bec <xTaskResumeAll>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	f47f af67 	bne.w	800615e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006290:	4b18      	ldr	r3, [pc, #96]	@ (80062f4 <xQueueSemaphoreTake+0x21c>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	e75d      	b.n	800615e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062a4:	f000 f8d0 	bl	8006448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062a8:	f000 fca0 	bl	8006bec <xTaskResumeAll>
 80062ac:	e757      	b.n	800615e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062b0:	f000 f8ca 	bl	8006448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b4:	f000 fc9a 	bl	8006bec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ba:	f000 f917 	bl	80064ec <prvIsQueueEmpty>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f43f af4c 	beq.w	800615e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80062cc:	f001 fc6c 	bl	8007ba8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80062d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062d2:	f000 f811 	bl	80062f8 <prvGetDisinheritPriorityAfterTimeout>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f94a 	bl	8007578 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80062e4:	f001 fc92 	bl	8007c0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3738      	adds	r7, #56	@ 0x38
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d006      	beq.n	8006316 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1c3 0307 	rsb	r3, r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e001      	b.n	800631a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800631a:	68fb      	ldr	r3, [r7, #12]
	}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10d      	bne.n	8006362 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d14d      	bne.n	80063ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f888 	bl	8007468 <xTaskPriorityDisinherit>
 8006358:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	e043      	b.n	80063ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d119      	bne.n	800639c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6858      	ldr	r0, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	461a      	mov	r2, r3
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	f002 fd39 	bl	8008dea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	441a      	add	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d32b      	bcc.n	80063ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	e026      	b.n	80063ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68d8      	ldr	r0, [r3, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a4:	461a      	mov	r2, r3
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	f002 fd1f 	bl	8008dea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b4:	425b      	negs	r3, r3
 80063b6:	441a      	add	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d207      	bcs.n	80063d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	425b      	negs	r3, r3
 80063d2:	441a      	add	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d105      	bne.n	80063ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063f2:	697b      	ldr	r3, [r7, #20]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d018      	beq.n	8006440 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	441a      	add	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	429a      	cmp	r2, r3
 8006426:	d303      	bcc.n	8006430 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68d9      	ldr	r1, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006438:	461a      	mov	r2, r3
 800643a:	6838      	ldr	r0, [r7, #0]
 800643c:	f002 fcd5 	bl	8008dea <memcpy>
	}
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006450:	f001 fbaa 	bl	8007ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800645a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800645c:	e011      	b.n	8006482 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3324      	adds	r3, #36	@ 0x24
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fda8 	bl	8006fc0 <xTaskRemoveFromEventList>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006476:	f000 fe81 	bl	800717c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	3b01      	subs	r3, #1
 800647e:	b2db      	uxtb	r3, r3
 8006480:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	dce9      	bgt.n	800645e <prvUnlockQueue+0x16>
 800648a:	e000      	b.n	800648e <prvUnlockQueue+0x46>
					break;
 800648c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	22ff      	movs	r2, #255	@ 0xff
 8006492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006496:	f001 fbb9 	bl	8007c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800649a:	f001 fb85 	bl	8007ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064a6:	e011      	b.n	80064cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d012      	beq.n	80064d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3310      	adds	r3, #16
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fd83 	bl	8006fc0 <xTaskRemoveFromEventList>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064c0:	f000 fe5c 	bl	800717c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dce9      	bgt.n	80064a8 <prvUnlockQueue+0x60>
 80064d4:	e000      	b.n	80064d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	22ff      	movs	r2, #255	@ 0xff
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064e0:	f001 fb94 	bl	8007c0c <vPortExitCritical>
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064f4:	f001 fb58 	bl	8007ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e001      	b.n	800650a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800650a:	f001 fb7f 	bl	8007c0c <vPortExitCritical>

	return xReturn;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006520:	f001 fb42 	bl	8007ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652c:	429a      	cmp	r2, r3
 800652e:	d102      	bne.n	8006536 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e001      	b.n	800653a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fb67 	bl	8007c0c <vPortExitCritical>

	return xReturn;
 800653e:	68fb      	ldr	r3, [r7, #12]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08e      	sub	sp, #56	@ 0x38
 800654c:	af04      	add	r7, sp, #16
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <xTaskCreateStatic+0x2c>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	623b      	str	r3, [r7, #32]
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <xTaskCreateStatic+0x4a>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	61fb      	str	r3, [r7, #28]
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006592:	2354      	movs	r3, #84	@ 0x54
 8006594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b54      	cmp	r3, #84	@ 0x54
 800659a:	d00b      	beq.n	80065b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	61bb      	str	r3, [r7, #24]
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01e      	beq.n	80065fa <xTaskCreateStatic+0xb2>
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01b      	beq.n	80065fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065d4:	2300      	movs	r3, #0
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	f107 0314 	add.w	r3, r7, #20
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 f850 	bl	8006692 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065f4:	f000 f8d6 	bl	80067a4 <prvAddNewTaskToReadyList>
 80065f8:	e001      	b.n	80065fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065fe:	697b      	ldr	r3, [r7, #20]
	}
 8006600:	4618      	mov	r0, r3
 8006602:	3728      	adds	r7, #40	@ 0x28
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08c      	sub	sp, #48	@ 0x30
 800660c:	af04      	add	r7, sp, #16
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006618:	88fb      	ldrh	r3, [r7, #6]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fbe5 	bl	8007dec <pvPortMalloc>
 8006622:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800662a:	2054      	movs	r0, #84	@ 0x54
 800662c:	f001 fbde 	bl	8007dec <pvPortMalloc>
 8006630:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	631a      	str	r2, [r3, #48]	@ 0x30
 800663e:	e005      	b.n	800664c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006640:	6978      	ldr	r0, [r7, #20]
 8006642:	f001 fca1 	bl	8007f88 <vPortFree>
 8006646:	e001      	b.n	800664c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d017      	beq.n	8006682 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800665a:	88fa      	ldrh	r2, [r7, #6]
 800665c:	2300      	movs	r3, #0
 800665e:	9303      	str	r3, [sp, #12]
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	9302      	str	r3, [sp, #8]
 8006664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f80e 	bl	8006692 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006676:	69f8      	ldr	r0, [r7, #28]
 8006678:	f000 f894 	bl	80067a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800667c:	2301      	movs	r3, #1
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e002      	b.n	8006688 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006682:	f04f 33ff 	mov.w	r3, #4294967295
 8006686:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006688:	69bb      	ldr	r3, [r7, #24]
	}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066aa:	3b01      	subs	r3, #1
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	f023 0307 	bic.w	r3, r3, #7
 80066b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	617b      	str	r3, [r7, #20]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01f      	beq.n	8006722 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	e012      	b.n	800670e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	7819      	ldrb	r1, [r3, #0]
 80066f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	3334      	adds	r3, #52	@ 0x34
 80066f8:	460a      	mov	r2, r1
 80066fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2b0f      	cmp	r3, #15
 8006712:	d9e9      	bls.n	80066e8 <prvInitialiseNewTask+0x56>
 8006714:	e000      	b.n	8006718 <prvInitialiseNewTask+0x86>
			{
				break;
 8006716:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006720:	e003      	b.n	800672a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	2b06      	cmp	r3, #6
 800672e:	d901      	bls.n	8006734 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006730:	2306      	movs	r3, #6
 8006732:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006738:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800673e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	2200      	movs	r2, #0
 8006744:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	3304      	adds	r3, #4
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff f955 	bl	80059fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	3318      	adds	r3, #24
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff f950 	bl	80059fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800675e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	f1c3 0207 	rsb	r2, r3, #7
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	2200      	movs	r2, #0
 8006774:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	68f9      	ldr	r1, [r7, #12]
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f001 f8de 	bl	8007944 <pxPortInitialiseStack>
 8006788:	4602      	mov	r2, r0
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800678e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800679a:	bf00      	nop
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067ac:	f001 f9fc 	bl	8007ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067b0:	4b2a      	ldr	r3, [pc, #168]	@ (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a29      	ldr	r2, [pc, #164]	@ (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ba:	4b29      	ldr	r3, [pc, #164]	@ (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067c2:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067c8:	4b24      	ldr	r3, [pc, #144]	@ (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d110      	bne.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067d0:	f000 fcf8 	bl	80071c4 <prvInitialiseTaskLists>
 80067d4:	e00d      	b.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067d6:	4b23      	ldr	r3, [pc, #140]	@ (8006864 <prvAddNewTaskToReadyList+0xc0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067de:	4b20      	ldr	r3, [pc, #128]	@ (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d802      	bhi.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006868 <prvAddNewTaskToReadyList+0xc4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3301      	adds	r3, #1
 80067f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006868 <prvAddNewTaskToReadyList+0xc4>)
 80067fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	4b19      	ldr	r3, [pc, #100]	@ (800686c <prvAddNewTaskToReadyList+0xc8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	4a18      	ldr	r2, [pc, #96]	@ (800686c <prvAddNewTaskToReadyList+0xc8>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a15      	ldr	r2, [pc, #84]	@ (8006870 <prvAddNewTaskToReadyList+0xcc>)
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7ff f8f5 	bl	8005a14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800682a:	f001 f9ef 	bl	8007c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800682e:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <prvAddNewTaskToReadyList+0xc0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006836:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <prvAddNewTaskToReadyList+0xbc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d207      	bcs.n	8006854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006844:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <prvAddNewTaskToReadyList+0xd0>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20002ae0 	.word	0x20002ae0
 8006860:	200029e0 	.word	0x200029e0
 8006864:	20002aec 	.word	0x20002aec
 8006868:	20002afc 	.word	0x20002afc
 800686c:	20002ae8 	.word	0x20002ae8
 8006870:	200029e4 	.word	0x200029e4
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	@ 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10b      	bne.n	80068a4 <vTaskDelayUntil+0x2c>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	617b      	str	r3, [r7, #20]
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	e7fd      	b.n	80068a0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10b      	bne.n	80068c2 <vTaskDelayUntil+0x4a>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	613b      	str	r3, [r7, #16]
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	e7fd      	b.n	80068be <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80068c2:	4b2a      	ldr	r3, [pc, #168]	@ (800696c <vTaskDelayUntil+0xf4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <vTaskDelayUntil+0x6a>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	60fb      	str	r3, [r7, #12]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80068e2:	f000 f975 	bl	8006bd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80068e6:	4b22      	ldr	r3, [pc, #136]	@ (8006970 <vTaskDelayUntil+0xf8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	4413      	add	r3, r2
 80068f4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d20b      	bcs.n	8006918 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	429a      	cmp	r2, r3
 8006908:	d211      	bcs.n	800692e <vTaskDelayUntil+0xb6>
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90d      	bls.n	800692e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006912:	2301      	movs	r3, #1
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
 8006916:	e00a      	b.n	800692e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	429a      	cmp	r2, r3
 8006920:	d303      	bcc.n	800692a <vTaskDelayUntil+0xb2>
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	429a      	cmp	r2, r3
 8006928:	d901      	bls.n	800692e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2100      	movs	r1, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f000 ff98 	bl	8007878 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006948:	f000 f950 	bl	8006bec <xTaskResumeAll>
 800694c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006954:	4b07      	ldr	r3, [pc, #28]	@ (8006974 <vTaskDelayUntil+0xfc>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006964:	bf00      	nop
 8006966:	3728      	adds	r7, #40	@ 0x28
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20002b08 	.word	0x20002b08
 8006970:	20002ae4 	.word	0x20002ae4
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800698a:	4b14      	ldr	r3, [pc, #80]	@ (80069dc <vTaskDelay+0x64>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <vTaskDelay+0x32>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60bb      	str	r3, [r7, #8]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069aa:	f000 f911 	bl	8006bd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069ae:	2100      	movs	r1, #0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 ff61 	bl	8007878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069b6:	f000 f919 	bl	8006bec <xTaskResumeAll>
 80069ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d107      	bne.n	80069d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069c2:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <vTaskDelay+0x68>)
 80069c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20002b08 	.word	0x20002b08
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80069ec:	f001 f8dc 	bl	8007ba8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <vTaskSuspend+0x18>
 80069f6:	4b3d      	ldr	r3, [pc, #244]	@ (8006aec <vTaskSuspend+0x108>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	e000      	b.n	80069fe <vTaskSuspend+0x1a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff f862 	bl	8005ace <uxListRemove>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d115      	bne.n	8006a3c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a14:	4936      	ldr	r1, [pc, #216]	@ (8006af0 <vTaskSuspend+0x10c>)
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <vTaskSuspend+0x58>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	43da      	mvns	r2, r3
 8006a32:	4b30      	ldr	r3, [pc, #192]	@ (8006af4 <vTaskSuspend+0x110>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4013      	ands	r3, r2
 8006a38:	4a2e      	ldr	r2, [pc, #184]	@ (8006af4 <vTaskSuspend+0x110>)
 8006a3a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff f840 	bl	8005ace <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	4828      	ldr	r0, [pc, #160]	@ (8006af8 <vTaskSuspend+0x114>)
 8006a56:	f7fe ffdd 	bl	8005a14 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d103      	bne.n	8006a6e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006a6e:	f001 f8cd 	bl	8007c0c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006a72:	4b22      	ldr	r3, [pc, #136]	@ (8006afc <vTaskSuspend+0x118>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006a7a:	f001 f895 	bl	8007ba8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006a7e:	f000 fc3f 	bl	8007300 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006a82:	f001 f8c3 	bl	8007c0c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006a86:	4b19      	ldr	r3, [pc, #100]	@ (8006aec <vTaskSuspend+0x108>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d128      	bne.n	8006ae2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a90:	4b1a      	ldr	r3, [pc, #104]	@ (8006afc <vTaskSuspend+0x118>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d018      	beq.n	8006aca <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006a98:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <vTaskSuspend+0x11c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <vTaskSuspend+0xd4>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60bb      	str	r3, [r7, #8]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006ab8:	4b12      	ldr	r3, [pc, #72]	@ (8006b04 <vTaskSuspend+0x120>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac8:	e00b      	b.n	8006ae2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <vTaskSuspend+0x114>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	4b0e      	ldr	r3, [pc, #56]	@ (8006b08 <vTaskSuspend+0x124>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d103      	bne.n	8006ade <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <vTaskSuspend+0x108>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
	}
 8006adc:	e001      	b.n	8006ae2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8006ade:	f000 f9ed 	bl	8006ebc <vTaskSwitchContext>
	}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200029e0 	.word	0x200029e0
 8006af0:	200029e4 	.word	0x200029e4
 8006af4:	20002ae8 	.word	0x20002ae8
 8006af8:	20002acc 	.word	0x20002acc
 8006afc:	20002aec 	.word	0x20002aec
 8006b00:	20002b08 	.word	0x20002b08
 8006b04:	e000ed04 	.word	0xe000ed04
 8006b08:	20002ae0 	.word	0x20002ae0

08006b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b1a:	463a      	mov	r2, r7
 8006b1c:	1d39      	adds	r1, r7, #4
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa feea 	bl	80018fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	9202      	str	r2, [sp, #8]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	2300      	movs	r3, #0
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	460a      	mov	r2, r1
 8006b3a:	491f      	ldr	r1, [pc, #124]	@ (8006bb8 <vTaskStartScheduler+0xac>)
 8006b3c:	481f      	ldr	r0, [pc, #124]	@ (8006bbc <vTaskStartScheduler+0xb0>)
 8006b3e:	f7ff fd03 	bl	8006548 <xTaskCreateStatic>
 8006b42:	4603      	mov	r3, r0
 8006b44:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc0 <vTaskStartScheduler+0xb4>)
 8006b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b48:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <vTaskStartScheduler+0xb4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e001      	b.n	8006b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d116      	bne.n	8006b8e <vTaskStartScheduler+0x82>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	613b      	str	r3, [r7, #16]
}
 8006b72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b74:	4b13      	ldr	r3, [pc, #76]	@ (8006bc4 <vTaskStartScheduler+0xb8>)
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b7c:	4b12      	ldr	r3, [pc, #72]	@ (8006bc8 <vTaskStartScheduler+0xbc>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b82:	4b12      	ldr	r3, [pc, #72]	@ (8006bcc <vTaskStartScheduler+0xc0>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b88:	f000 ff6a 	bl	8007a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b8c:	e00f      	b.n	8006bae <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d10b      	bne.n	8006bae <vTaskStartScheduler+0xa2>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60fb      	str	r3, [r7, #12]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <vTaskStartScheduler+0x9e>
}
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	0800bc9c 	.word	0x0800bc9c
 8006bbc:	08007195 	.word	0x08007195
 8006bc0:	20002b04 	.word	0x20002b04
 8006bc4:	20002b00 	.word	0x20002b00
 8006bc8:	20002aec 	.word	0x20002aec
 8006bcc:	20002ae4 	.word	0x20002ae4

08006bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bd4:	4b04      	ldr	r3, [pc, #16]	@ (8006be8 <vTaskSuspendAll+0x18>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	4a03      	ldr	r2, [pc, #12]	@ (8006be8 <vTaskSuspendAll+0x18>)
 8006bdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20002b08 	.word	0x20002b08

08006bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfa:	4b42      	ldr	r3, [pc, #264]	@ (8006d04 <xTaskResumeAll+0x118>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10b      	bne.n	8006c1a <xTaskResumeAll+0x2e>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	603b      	str	r3, [r7, #0]
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	e7fd      	b.n	8006c16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c1a:	f000 ffc5 	bl	8007ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c1e:	4b39      	ldr	r3, [pc, #228]	@ (8006d04 <xTaskResumeAll+0x118>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	4a37      	ldr	r2, [pc, #220]	@ (8006d04 <xTaskResumeAll+0x118>)
 8006c26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c28:	4b36      	ldr	r3, [pc, #216]	@ (8006d04 <xTaskResumeAll+0x118>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d161      	bne.n	8006cf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c30:	4b35      	ldr	r3, [pc, #212]	@ (8006d08 <xTaskResumeAll+0x11c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d05d      	beq.n	8006cf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c38:	e02e      	b.n	8006c98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3a:	4b34      	ldr	r3, [pc, #208]	@ (8006d0c <xTaskResumeAll+0x120>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3318      	adds	r3, #24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe ff41 	bl	8005ace <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe ff3c 	bl	8005ace <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d10 <xTaskResumeAll+0x124>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	4a2a      	ldr	r2, [pc, #168]	@ (8006d10 <xTaskResumeAll+0x124>)
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4a27      	ldr	r2, [pc, #156]	@ (8006d14 <xTaskResumeAll+0x128>)
 8006c76:	441a      	add	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f7fe fec8 	bl	8005a14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c88:	4b23      	ldr	r3, [pc, #140]	@ (8006d18 <xTaskResumeAll+0x12c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d302      	bcc.n	8006c98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c92:	4b22      	ldr	r3, [pc, #136]	@ (8006d1c <xTaskResumeAll+0x130>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c98:	4b1c      	ldr	r3, [pc, #112]	@ (8006d0c <xTaskResumeAll+0x120>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1cc      	bne.n	8006c3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ca6:	f000 fb2b 	bl	8007300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006caa:	4b1d      	ldr	r3, [pc, #116]	@ (8006d20 <xTaskResumeAll+0x134>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d010      	beq.n	8006cd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cb6:	f000 f847 	bl	8006d48 <xTaskIncrementTick>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006cc0:	4b16      	ldr	r3, [pc, #88]	@ (8006d1c <xTaskResumeAll+0x130>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f1      	bne.n	8006cb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006cd2:	4b13      	ldr	r3, [pc, #76]	@ (8006d20 <xTaskResumeAll+0x134>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cd8:	4b10      	ldr	r3, [pc, #64]	@ (8006d1c <xTaskResumeAll+0x130>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <xTaskResumeAll+0x138>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf4:	f000 ff8a 	bl	8007c0c <vPortExitCritical>

	return xAlreadyYielded;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20002b08 	.word	0x20002b08
 8006d08:	20002ae0 	.word	0x20002ae0
 8006d0c:	20002aa0 	.word	0x20002aa0
 8006d10:	20002ae8 	.word	0x20002ae8
 8006d14:	200029e4 	.word	0x200029e4
 8006d18:	200029e0 	.word	0x200029e0
 8006d1c:	20002af4 	.word	0x20002af4
 8006d20:	20002af0 	.word	0x20002af0
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d2e:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <xTaskGetTickCount+0x1c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d34:	687b      	ldr	r3, [r7, #4]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20002ae4 	.word	0x20002ae4

08006d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d52:	4b4f      	ldr	r3, [pc, #316]	@ (8006e90 <xTaskIncrementTick+0x148>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 808f 	bne.w	8006e7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e94 <xTaskIncrementTick+0x14c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d64:	4a4b      	ldr	r2, [pc, #300]	@ (8006e94 <xTaskIncrementTick+0x14c>)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d121      	bne.n	8006db4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d70:	4b49      	ldr	r3, [pc, #292]	@ (8006e98 <xTaskIncrementTick+0x150>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	603b      	str	r3, [r7, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <xTaskIncrementTick+0x46>
 8006d92:	4b41      	ldr	r3, [pc, #260]	@ (8006e98 <xTaskIncrementTick+0x150>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	4b40      	ldr	r3, [pc, #256]	@ (8006e9c <xTaskIncrementTick+0x154>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e98 <xTaskIncrementTick+0x150>)
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4a3e      	ldr	r2, [pc, #248]	@ (8006e9c <xTaskIncrementTick+0x154>)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ea0 <xTaskIncrementTick+0x158>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	4a3c      	ldr	r2, [pc, #240]	@ (8006ea0 <xTaskIncrementTick+0x158>)
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	f000 faa6 	bl	8007300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006db4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea4 <xTaskIncrementTick+0x15c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d348      	bcc.n	8006e50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dbe:	4b36      	ldr	r3, [pc, #216]	@ (8006e98 <xTaskIncrementTick+0x150>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc8:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <xTaskIncrementTick+0x15c>)
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295
 8006dce:	601a      	str	r2, [r3, #0]
					break;
 8006dd0:	e03e      	b.n	8006e50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd2:	4b31      	ldr	r3, [pc, #196]	@ (8006e98 <xTaskIncrementTick+0x150>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d203      	bcs.n	8006df2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dea:	4a2e      	ldr	r2, [pc, #184]	@ (8006ea4 <xTaskIncrementTick+0x15c>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006df0:	e02e      	b.n	8006e50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fe69 	bl	8005ace <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3318      	adds	r3, #24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe fe60 	bl	8005ace <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	2201      	movs	r2, #1
 8006e14:	409a      	lsls	r2, r3
 8006e16:	4b24      	ldr	r3, [pc, #144]	@ (8006ea8 <xTaskIncrementTick+0x160>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	4a22      	ldr	r2, [pc, #136]	@ (8006ea8 <xTaskIncrementTick+0x160>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006eac <xTaskIncrementTick+0x164>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe fdec 	bl	8005a14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e40:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb0 <xTaskIncrementTick+0x168>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3b9      	bcc.n	8006dbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4e:	e7b6      	b.n	8006dbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e50:	4b17      	ldr	r3, [pc, #92]	@ (8006eb0 <xTaskIncrementTick+0x168>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e56:	4915      	ldr	r1, [pc, #84]	@ (8006eac <xTaskIncrementTick+0x164>)
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d901      	bls.n	8006e6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e6c:	4b11      	ldr	r3, [pc, #68]	@ (8006eb4 <xTaskIncrementTick+0x16c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	e004      	b.n	8006e84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <xTaskIncrementTick+0x170>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb8 <xTaskIncrementTick+0x170>)
 8006e82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e84:	697b      	ldr	r3, [r7, #20]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20002b08 	.word	0x20002b08
 8006e94:	20002ae4 	.word	0x20002ae4
 8006e98:	20002a98 	.word	0x20002a98
 8006e9c:	20002a9c 	.word	0x20002a9c
 8006ea0:	20002af8 	.word	0x20002af8
 8006ea4:	20002b00 	.word	0x20002b00
 8006ea8:	20002ae8 	.word	0x20002ae8
 8006eac:	200029e4 	.word	0x200029e4
 8006eb0:	200029e0 	.word	0x200029e0
 8006eb4:	20002af4 	.word	0x20002af4
 8006eb8:	20002af0 	.word	0x20002af0

08006ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ec2:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <vTaskSwitchContext+0xa4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eca:	4b26      	ldr	r3, [pc, #152]	@ (8006f64 <vTaskSwitchContext+0xa8>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ed0:	e040      	b.n	8006f54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006ed2:	4b24      	ldr	r3, [pc, #144]	@ (8006f64 <vTaskSwitchContext+0xa8>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	4b23      	ldr	r3, [pc, #140]	@ (8006f68 <vTaskSwitchContext+0xac>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	fab3 f383 	clz	r3, r3
 8006ee4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	f1c3 031f 	rsb	r3, r3, #31
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	491f      	ldr	r1, [pc, #124]	@ (8006f6c <vTaskSwitchContext+0xb0>)
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	607b      	str	r3, [r7, #4]
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	e7fd      	b.n	8006f16 <vTaskSwitchContext+0x5a>
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4a11      	ldr	r2, [pc, #68]	@ (8006f6c <vTaskSwitchContext+0xb0>)
 8006f26:	4413      	add	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d104      	bne.n	8006f4a <vTaskSwitchContext+0x8e>
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a07      	ldr	r2, [pc, #28]	@ (8006f70 <vTaskSwitchContext+0xb4>)
 8006f52:	6013      	str	r3, [r2, #0]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20002b08 	.word	0x20002b08
 8006f64:	20002af4 	.word	0x20002af4
 8006f68:	20002ae8 	.word	0x20002ae8
 8006f6c:	200029e4 	.word	0x200029e4
 8006f70:	200029e0 	.word	0x200029e0

08006f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10b      	bne.n	8006f9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60fb      	str	r3, [r7, #12]
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <vTaskPlaceOnEventList+0x48>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3318      	adds	r3, #24
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7fe fd59 	bl	8005a5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006faa:	2101      	movs	r1, #1
 8006fac:	6838      	ldr	r0, [r7, #0]
 8006fae:	f000 fc63 	bl	8007878 <prvAddCurrentTaskToDelayedList>
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	200029e0 	.word	0x200029e0

08006fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60fb      	str	r3, [r7, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3318      	adds	r3, #24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fd6b 	bl	8005ace <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8007070 <xTaskRemoveFromEventList+0xb0>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d11c      	bne.n	800703a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3304      	adds	r3, #4
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fd62 	bl	8005ace <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	2201      	movs	r2, #1
 8007010:	409a      	lsls	r2, r3
 8007012:	4b18      	ldr	r3, [pc, #96]	@ (8007074 <xTaskRemoveFromEventList+0xb4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4313      	orrs	r3, r2
 8007018:	4a16      	ldr	r2, [pc, #88]	@ (8007074 <xTaskRemoveFromEventList+0xb4>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a13      	ldr	r2, [pc, #76]	@ (8007078 <xTaskRemoveFromEventList+0xb8>)
 800702a:	441a      	add	r2, r3
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f7fe fcee 	bl	8005a14 <vListInsertEnd>
 8007038:	e005      	b.n	8007046 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3318      	adds	r3, #24
 800703e:	4619      	mov	r1, r3
 8007040:	480e      	ldr	r0, [pc, #56]	@ (800707c <xTaskRemoveFromEventList+0xbc>)
 8007042:	f7fe fce7 	bl	8005a14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <xTaskRemoveFromEventList+0xc0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d905      	bls.n	8007060 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007058:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <xTaskRemoveFromEventList+0xc4>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e001      	b.n	8007064 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007064:	697b      	ldr	r3, [r7, #20]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20002b08 	.word	0x20002b08
 8007074:	20002ae8 	.word	0x20002ae8
 8007078:	200029e4 	.word	0x200029e4
 800707c:	20002aa0 	.word	0x20002aa0
 8007080:	200029e0 	.word	0x200029e0
 8007084:	20002af4 	.word	0x20002af4

08007088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <vTaskInternalSetTimeOutState+0x24>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <vTaskInternalSetTimeOutState+0x28>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20002af8 	.word	0x20002af8
 80070b0:	20002ae4 	.word	0x20002ae4

080070b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	613b      	str	r3, [r7, #16]
}
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	e7fd      	b.n	80070d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60fb      	str	r3, [r7, #12]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80070fa:	f000 fd55 	bl	8007ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <xTaskCheckForTimeOut+0xc0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007116:	d102      	bne.n	800711e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e023      	b.n	8007166 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <xTaskCheckForTimeOut+0xc4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d007      	beq.n	800713a <xTaskCheckForTimeOut+0x86>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e015      	b.n	8007166 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	429a      	cmp	r2, r3
 8007142:	d20b      	bcs.n	800715c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ff99 	bl	8007088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	e004      	b.n	8007166 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007162:	2301      	movs	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007166:	f000 fd51 	bl	8007c0c <vPortExitCritical>

	return xReturn;
 800716a:	69fb      	ldr	r3, [r7, #28]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20002ae4 	.word	0x20002ae4
 8007178:	20002af8 	.word	0x20002af8

0800717c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007180:	4b03      	ldr	r3, [pc, #12]	@ (8007190 <vTaskMissedYield+0x14>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20002af4 	.word	0x20002af4

08007194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800719c:	f000 f852 	bl	8007244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071a0:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <prvIdleTask+0x28>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d9f9      	bls.n	800719c <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a8:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <prvIdleTask+0x2c>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b8:	e7f0      	b.n	800719c <prvIdleTask+0x8>
 80071ba:	bf00      	nop
 80071bc:	200029e4 	.word	0x200029e4
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	e00c      	b.n	80071ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4a12      	ldr	r2, [pc, #72]	@ (8007224 <prvInitialiseTaskLists+0x60>)
 80071dc:	4413      	add	r3, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fbeb 	bl	80059ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3301      	adds	r3, #1
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d9ef      	bls.n	80071d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071f0:	480d      	ldr	r0, [pc, #52]	@ (8007228 <prvInitialiseTaskLists+0x64>)
 80071f2:	f7fe fbe2 	bl	80059ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071f6:	480d      	ldr	r0, [pc, #52]	@ (800722c <prvInitialiseTaskLists+0x68>)
 80071f8:	f7fe fbdf 	bl	80059ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071fc:	480c      	ldr	r0, [pc, #48]	@ (8007230 <prvInitialiseTaskLists+0x6c>)
 80071fe:	f7fe fbdc 	bl	80059ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007202:	480c      	ldr	r0, [pc, #48]	@ (8007234 <prvInitialiseTaskLists+0x70>)
 8007204:	f7fe fbd9 	bl	80059ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007208:	480b      	ldr	r0, [pc, #44]	@ (8007238 <prvInitialiseTaskLists+0x74>)
 800720a:	f7fe fbd6 	bl	80059ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800720e:	4b0b      	ldr	r3, [pc, #44]	@ (800723c <prvInitialiseTaskLists+0x78>)
 8007210:	4a05      	ldr	r2, [pc, #20]	@ (8007228 <prvInitialiseTaskLists+0x64>)
 8007212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007214:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <prvInitialiseTaskLists+0x7c>)
 8007216:	4a05      	ldr	r2, [pc, #20]	@ (800722c <prvInitialiseTaskLists+0x68>)
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	200029e4 	.word	0x200029e4
 8007228:	20002a70 	.word	0x20002a70
 800722c:	20002a84 	.word	0x20002a84
 8007230:	20002aa0 	.word	0x20002aa0
 8007234:	20002ab4 	.word	0x20002ab4
 8007238:	20002acc 	.word	0x20002acc
 800723c:	20002a98 	.word	0x20002a98
 8007240:	20002a9c 	.word	0x20002a9c

08007244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800724a:	e019      	b.n	8007280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800724c:	f000 fcac 	bl	8007ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007250:	4b10      	ldr	r3, [pc, #64]	@ (8007294 <prvCheckTasksWaitingTermination+0x50>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fc36 	bl	8005ace <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007262:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <prvCheckTasksWaitingTermination+0x54>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a0b      	ldr	r2, [pc, #44]	@ (8007298 <prvCheckTasksWaitingTermination+0x54>)
 800726a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800726c:	4b0b      	ldr	r3, [pc, #44]	@ (800729c <prvCheckTasksWaitingTermination+0x58>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	4a0a      	ldr	r2, [pc, #40]	@ (800729c <prvCheckTasksWaitingTermination+0x58>)
 8007274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007276:	f000 fcc9 	bl	8007c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f810 	bl	80072a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007280:	4b06      	ldr	r3, [pc, #24]	@ (800729c <prvCheckTasksWaitingTermination+0x58>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e1      	bne.n	800724c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20002ab4 	.word	0x20002ab4
 8007298:	20002ae0 	.word	0x20002ae0
 800729c:	20002ac8 	.word	0x20002ac8

080072a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d108      	bne.n	80072c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fe66 	bl	8007f88 <vPortFree>
				vPortFree( pxTCB );
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fe63 	bl	8007f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072c2:	e019      	b.n	80072f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d103      	bne.n	80072d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fe5a 	bl	8007f88 <vPortFree>
	}
 80072d4:	e010      	b.n	80072f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d00b      	beq.n	80072f8 <prvDeleteTCB+0x58>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <prvDeleteTCB+0x54>
	}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007306:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <prvResetNextTaskUnblockTime+0x38>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007310:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <prvResetNextTaskUnblockTime+0x3c>)
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007318:	e008      	b.n	800732c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731a:	4b07      	ldr	r3, [pc, #28]	@ (8007338 <prvResetNextTaskUnblockTime+0x38>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a04      	ldr	r2, [pc, #16]	@ (800733c <prvResetNextTaskUnblockTime+0x3c>)
 800732a:	6013      	str	r3, [r2, #0]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20002a98 	.word	0x20002a98
 800733c:	20002b00 	.word	0x20002b00

08007340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007346:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <xTaskGetSchedulerState+0x34>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d102      	bne.n	8007354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800734e:	2301      	movs	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e008      	b.n	8007366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007354:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <xTaskGetSchedulerState+0x38>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800735c:	2302      	movs	r3, #2
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e001      	b.n	8007366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007366:	687b      	ldr	r3, [r7, #4]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20002aec 	.word	0x20002aec
 8007378:	20002b08 	.word	0x20002b08

0800737c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d05e      	beq.n	8007450 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007396:	4b31      	ldr	r3, [pc, #196]	@ (800745c <xTaskPriorityInherit+0xe0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	429a      	cmp	r2, r3
 800739e:	d24e      	bcs.n	800743e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	db06      	blt.n	80073b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a8:	4b2c      	ldr	r3, [pc, #176]	@ (800745c <xTaskPriorityInherit+0xe0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	f1c3 0207 	rsb	r2, r3, #7
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6959      	ldr	r1, [r3, #20]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4a26      	ldr	r2, [pc, #152]	@ (8007460 <xTaskPriorityInherit+0xe4>)
 80073c8:	4413      	add	r3, r2
 80073ca:	4299      	cmp	r1, r3
 80073cc:	d12f      	bne.n	800742e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fb7b 	bl	8005ace <uxListRemove>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	2201      	movs	r2, #1
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	43da      	mvns	r2, r3
 80073ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007464 <xTaskPriorityInherit+0xe8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4013      	ands	r3, r2
 80073f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <xTaskPriorityInherit+0xe8>)
 80073f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073f4:	4b19      	ldr	r3, [pc, #100]	@ (800745c <xTaskPriorityInherit+0xe0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	2201      	movs	r2, #1
 8007404:	409a      	lsls	r2, r3
 8007406:	4b17      	ldr	r3, [pc, #92]	@ (8007464 <xTaskPriorityInherit+0xe8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4313      	orrs	r3, r2
 800740c:	4a15      	ldr	r2, [pc, #84]	@ (8007464 <xTaskPriorityInherit+0xe8>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4a10      	ldr	r2, [pc, #64]	@ (8007460 <xTaskPriorityInherit+0xe4>)
 800741e:	441a      	add	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7fe faf4 	bl	8005a14 <vListInsertEnd>
 800742c:	e004      	b.n	8007438 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800742e:	4b0b      	ldr	r3, [pc, #44]	@ (800745c <xTaskPriorityInherit+0xe0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e008      	b.n	8007450 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007442:	4b06      	ldr	r3, [pc, #24]	@ (800745c <xTaskPriorityInherit+0xe0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	429a      	cmp	r2, r3
 800744a:	d201      	bcs.n	8007450 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007450:	68fb      	ldr	r3, [r7, #12]
	}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200029e0 	.word	0x200029e0
 8007460:	200029e4 	.word	0x200029e4
 8007464:	20002ae8 	.word	0x20002ae8

08007468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d070      	beq.n	8007560 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800747e:	4b3b      	ldr	r3, [pc, #236]	@ (800756c <xTaskPriorityDisinherit+0x104>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d00b      	beq.n	80074a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60fb      	str	r3, [r7, #12]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	60bb      	str	r3, [r7, #8]
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c4:	1e5a      	subs	r2, r3, #1
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d044      	beq.n	8007560 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d140      	bne.n	8007560 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe faf3 	bl	8005ace <uxListRemove>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d115      	bne.n	800751a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f2:	491f      	ldr	r1, [pc, #124]	@ (8007570 <xTaskPriorityDisinherit+0x108>)
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xTaskPriorityDisinherit+0xb2>
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007508:	2201      	movs	r2, #1
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	43da      	mvns	r2, r3
 8007510:	4b18      	ldr	r3, [pc, #96]	@ (8007574 <xTaskPriorityDisinherit+0x10c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4013      	ands	r3, r2
 8007516:	4a17      	ldr	r2, [pc, #92]	@ (8007574 <xTaskPriorityDisinherit+0x10c>)
 8007518:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007526:	f1c3 0207 	rsb	r2, r3, #7
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	2201      	movs	r2, #1
 8007534:	409a      	lsls	r2, r3
 8007536:	4b0f      	ldr	r3, [pc, #60]	@ (8007574 <xTaskPriorityDisinherit+0x10c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4313      	orrs	r3, r2
 800753c:	4a0d      	ldr	r2, [pc, #52]	@ (8007574 <xTaskPriorityDisinherit+0x10c>)
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4a08      	ldr	r2, [pc, #32]	@ (8007570 <xTaskPriorityDisinherit+0x108>)
 800754e:	441a      	add	r2, r3
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	3304      	adds	r3, #4
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f7fe fa5c 	bl	8005a14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007560:	697b      	ldr	r3, [r7, #20]
	}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200029e0 	.word	0x200029e0
 8007570:	200029e4 	.word	0x200029e4
 8007574:	20002ae8 	.word	0x20002ae8

08007578 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007586:	2301      	movs	r3, #1
 8007588:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d079      	beq.n	8007684 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	60fb      	str	r3, [r7, #12]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d902      	bls.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	e002      	b.n	80075c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d059      	beq.n	8007684 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d154      	bne.n	8007684 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075da:	4b2c      	ldr	r3, [pc, #176]	@ (800768c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d10b      	bne.n	80075fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	60bb      	str	r3, [r7, #8]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	db04      	blt.n	800761a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f1c3 0207 	rsb	r2, r3, #7
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	6959      	ldr	r1, [r3, #20]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4a19      	ldr	r2, [pc, #100]	@ (8007690 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800762a:	4413      	add	r3, r2
 800762c:	4299      	cmp	r1, r3
 800762e:	d129      	bne.n	8007684 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe fa4a 	bl	8005ace <uxListRemove>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	2201      	movs	r2, #1
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43da      	mvns	r2, r3
 800764c:	4b11      	ldr	r3, [pc, #68]	@ (8007694 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	4a10      	ldr	r2, [pc, #64]	@ (8007694 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007654:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	2201      	movs	r2, #1
 800765c:	409a      	lsls	r2, r3
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4313      	orrs	r3, r2
 8007664:	4a0b      	ldr	r2, [pc, #44]	@ (8007694 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4a06      	ldr	r2, [pc, #24]	@ (8007690 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007676:	441a      	add	r2, r3
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe f9c8 	bl	8005a14 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007684:	bf00      	nop
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200029e0 	.word	0x200029e0
 8007690:	200029e4 	.word	0x200029e4
 8007694:	20002ae8 	.word	0x20002ae8

08007698 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800769c:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <pvTaskIncrementMutexHeldCount+0x24>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076a4:	4b05      	ldr	r3, [pc, #20]	@ (80076bc <pvTaskIncrementMutexHeldCount+0x24>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076aa:	3201      	adds	r2, #1
 80076ac:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80076ae:	4b03      	ldr	r3, [pc, #12]	@ (80076bc <pvTaskIncrementMutexHeldCount+0x24>)
 80076b0:	681b      	ldr	r3, [r3, #0]
	}
 80076b2:	4618      	mov	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	200029e0 	.word	0x200029e0

080076c0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80076ca:	f000 fa6d 	bl	8007ba8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80076ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007748 <ulTaskNotifyTake+0x88>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d113      	bne.n	8007700 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80076d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007748 <ulTaskNotifyTake+0x88>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076e8:	2101      	movs	r1, #1
 80076ea:	6838      	ldr	r0, [r7, #0]
 80076ec:	f000 f8c4 	bl	8007878 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80076f0:	4b16      	ldr	r3, [pc, #88]	@ (800774c <ulTaskNotifyTake+0x8c>)
 80076f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007700:	f000 fa84 	bl	8007c0c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007704:	f000 fa50 	bl	8007ba8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007708:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <ulTaskNotifyTake+0x88>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00c      	beq.n	8007730 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800771c:	4b0a      	ldr	r3, [pc, #40]	@ (8007748 <ulTaskNotifyTake+0x88>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007724:	e004      	b.n	8007730 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007726:	4b08      	ldr	r3, [pc, #32]	@ (8007748 <ulTaskNotifyTake+0x88>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	3a01      	subs	r2, #1
 800772e:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <ulTaskNotifyTake+0x88>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800773a:	f000 fa67 	bl	8007c0c <vPortExitCritical>

		return ulReturn;
 800773e:	68fb      	ldr	r3, [r7, #12]
	}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	200029e0 	.word	0x200029e0
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	@ 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10b      	bne.n	8007778 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	61bb      	str	r3, [r7, #24]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007778:	f000 faf6 	bl	8007d68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007780:	f3ef 8211 	mrs	r2, BASEPRI
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	617a      	str	r2, [r7, #20]
 8007796:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007798:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800779a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077a2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80077b6:	7ffb      	ldrb	r3, [r7, #31]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d146      	bne.n	800784a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077dc:	4b20      	ldr	r3, [pc, #128]	@ (8007860 <vTaskNotifyGiveFromISR+0x110>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11c      	bne.n	800781e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	3304      	adds	r3, #4
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe f970 	bl	8005ace <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f2:	2201      	movs	r2, #1
 80077f4:	409a      	lsls	r2, r3
 80077f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007864 <vTaskNotifyGiveFromISR+0x114>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	4a19      	ldr	r2, [pc, #100]	@ (8007864 <vTaskNotifyGiveFromISR+0x114>)
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4a16      	ldr	r2, [pc, #88]	@ (8007868 <vTaskNotifyGiveFromISR+0x118>)
 800780e:	441a      	add	r2, r3
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	3304      	adds	r3, #4
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f7fe f8fc 	bl	8005a14 <vListInsertEnd>
 800781c:	e005      	b.n	800782a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	3318      	adds	r3, #24
 8007822:	4619      	mov	r1, r3
 8007824:	4811      	ldr	r0, [pc, #68]	@ (800786c <vTaskNotifyGiveFromISR+0x11c>)
 8007826:	f7fe f8f5 	bl	8005a14 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782e:	4b10      	ldr	r3, [pc, #64]	@ (8007870 <vTaskNotifyGiveFromISR+0x120>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007834:	429a      	cmp	r2, r3
 8007836:	d908      	bls.n	800784a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007844:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <vTaskNotifyGiveFromISR+0x124>)
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007854:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007856:	bf00      	nop
 8007858:	3728      	adds	r7, #40	@ 0x28
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20002b08 	.word	0x20002b08
 8007864:	20002ae8 	.word	0x20002ae8
 8007868:	200029e4 	.word	0x200029e4
 800786c:	20002aa0 	.word	0x20002aa0
 8007870:	200029e0 	.word	0x200029e0
 8007874:	20002af4 	.word	0x20002af4

08007878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007882:	4b29      	ldr	r3, [pc, #164]	@ (8007928 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007888:	4b28      	ldr	r3, [pc, #160]	@ (800792c <prvAddCurrentTaskToDelayedList+0xb4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3304      	adds	r3, #4
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe f91d 	bl	8005ace <uxListRemove>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800789a:	4b24      	ldr	r3, [pc, #144]	@ (800792c <prvAddCurrentTaskToDelayedList+0xb4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	2201      	movs	r2, #1
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	43da      	mvns	r2, r3
 80078a8:	4b21      	ldr	r3, [pc, #132]	@ (8007930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4013      	ands	r3, r2
 80078ae:	4a20      	ldr	r2, [pc, #128]	@ (8007930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d10a      	bne.n	80078d0 <prvAddCurrentTaskToDelayedList+0x58>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c0:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	481a      	ldr	r0, [pc, #104]	@ (8007934 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078ca:	f7fe f8a3 	bl	8005a14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078ce:	e026      	b.n	800791e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078d8:	4b14      	ldr	r3, [pc, #80]	@ (800792c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d209      	bcs.n	80078fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e8:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <prvAddCurrentTaskToDelayedList+0xc0>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b0f      	ldr	r3, [pc, #60]	@ (800792c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fe f8b1 	bl	8005a5c <vListInsert>
}
 80078fa:	e010      	b.n	800791e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078fc:	4b0f      	ldr	r3, [pc, #60]	@ (800793c <prvAddCurrentTaskToDelayedList+0xc4>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7fe f8a7 	bl	8005a5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800790e:	4b0c      	ldr	r3, [pc, #48]	@ (8007940 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	429a      	cmp	r2, r3
 8007916:	d202      	bcs.n	800791e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007918:	4a09      	ldr	r2, [pc, #36]	@ (8007940 <prvAddCurrentTaskToDelayedList+0xc8>)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6013      	str	r3, [r2, #0]
}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20002ae4 	.word	0x20002ae4
 800792c:	200029e0 	.word	0x200029e0
 8007930:	20002ae8 	.word	0x20002ae8
 8007934:	20002acc 	.word	0x20002acc
 8007938:	20002a9c 	.word	0x20002a9c
 800793c:	20002a98 	.word	0x20002a98
 8007940:	20002b00 	.word	0x20002b00

08007944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3b04      	subs	r3, #4
 8007954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800795c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b04      	subs	r3, #4
 8007962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f023 0201 	bic.w	r2, r3, #1
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3b04      	subs	r3, #4
 8007972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007974:	4a0c      	ldr	r2, [pc, #48]	@ (80079a8 <pxPortInitialiseStack+0x64>)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3b14      	subs	r3, #20
 800797e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3b04      	subs	r3, #4
 800798a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f06f 0202 	mvn.w	r2, #2
 8007992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3b20      	subs	r3, #32
 8007998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800799a:	68fb      	ldr	r3, [r7, #12]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	080079ad 	.word	0x080079ad

080079ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079b6:	4b13      	ldr	r3, [pc, #76]	@ (8007a04 <prvTaskExitError+0x58>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d00b      	beq.n	80079d8 <prvTaskExitError+0x2c>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	60fb      	str	r3, [r7, #12]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <prvTaskExitError+0x28>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60bb      	str	r3, [r7, #8]
}
 80079ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079ec:	bf00      	nop
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0fc      	beq.n	80079ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	2000000c 	.word	0x2000000c
	...

08007a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <pxCurrentTCBConst2>)
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	6808      	ldr	r0, [r1, #0]
 8007a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	f380 8809 	msr	PSP, r0
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f380 8811 	msr	BASEPRI, r0
 8007a2a:	4770      	bx	lr
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst2>:
 8007a30:	200029e0 	.word	0x200029e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a38:	4808      	ldr	r0, [pc, #32]	@ (8007a5c <prvPortStartFirstTask+0x24>)
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	6800      	ldr	r0, [r0, #0]
 8007a3e:	f380 8808 	msr	MSP, r0
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f380 8814 	msr	CONTROL, r0
 8007a4a:	b662      	cpsie	i
 8007a4c:	b661      	cpsie	f
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	df00      	svc	0
 8007a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a5a:	bf00      	nop
 8007a5c:	e000ed08 	.word	0xe000ed08

08007a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a66:	4b47      	ldr	r3, [pc, #284]	@ (8007b84 <xPortStartScheduler+0x124>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a47      	ldr	r2, [pc, #284]	@ (8007b88 <xPortStartScheduler+0x128>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d10b      	bne.n	8007a88 <xPortStartScheduler+0x28>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	613b      	str	r3, [r7, #16]
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a88:	4b3e      	ldr	r3, [pc, #248]	@ (8007b84 <xPortStartScheduler+0x124>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b8c <xPortStartScheduler+0x12c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10b      	bne.n	8007aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	60fb      	str	r3, [r7, #12]
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	e7fd      	b.n	8007aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aaa:	4b39      	ldr	r3, [pc, #228]	@ (8007b90 <xPortStartScheduler+0x130>)
 8007aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	22ff      	movs	r2, #255	@ 0xff
 8007aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	4b31      	ldr	r3, [pc, #196]	@ (8007b94 <xPortStartScheduler+0x134>)
 8007ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ad2:	4b31      	ldr	r3, [pc, #196]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007ad4:	2207      	movs	r2, #7
 8007ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ad8:	e009      	b.n	8007aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007ada:	4b2f      	ldr	r3, [pc, #188]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af6:	2b80      	cmp	r3, #128	@ 0x80
 8007af8:	d0ef      	beq.n	8007ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007afa:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1c3 0307 	rsb	r3, r3, #7
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d00b      	beq.n	8007b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b28:	4b1b      	ldr	r3, [pc, #108]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b30:	4a19      	ldr	r2, [pc, #100]	@ (8007b98 <xPortStartScheduler+0x138>)
 8007b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b3c:	4b17      	ldr	r3, [pc, #92]	@ (8007b9c <xPortStartScheduler+0x13c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a16      	ldr	r2, [pc, #88]	@ (8007b9c <xPortStartScheduler+0x13c>)
 8007b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b48:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <xPortStartScheduler+0x13c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a13      	ldr	r2, [pc, #76]	@ (8007b9c <xPortStartScheduler+0x13c>)
 8007b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b54:	f000 f8da 	bl	8007d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b58:	4b11      	ldr	r3, [pc, #68]	@ (8007ba0 <xPortStartScheduler+0x140>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b5e:	f000 f8f9 	bl	8007d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b62:	4b10      	ldr	r3, [pc, #64]	@ (8007ba4 <xPortStartScheduler+0x144>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ba4 <xPortStartScheduler+0x144>)
 8007b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b6e:	f7ff ff63 	bl	8007a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b72:	f7ff f9a3 	bl	8006ebc <vTaskSwitchContext>
	prvTaskExitError();
 8007b76:	f7ff ff19 	bl	80079ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	e000ed00 	.word	0xe000ed00
 8007b88:	410fc271 	.word	0x410fc271
 8007b8c:	410fc270 	.word	0x410fc270
 8007b90:	e000e400 	.word	0xe000e400
 8007b94:	20002b0c 	.word	0x20002b0c
 8007b98:	20002b10 	.word	0x20002b10
 8007b9c:	e000ed20 	.word	0xe000ed20
 8007ba0:	2000000c 	.word	0x2000000c
 8007ba4:	e000ef34 	.word	0xe000ef34

08007ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bc2:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <vPortEnterCritical+0x5c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8007c04 <vPortEnterCritical+0x5c>)
 8007bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <vPortEnterCritical+0x5c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d110      	bne.n	8007bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <vPortEnterCritical+0x60>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	603b      	str	r3, [r7, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	e7fd      	b.n	8007bf2 <vPortEnterCritical+0x4a>
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	2000000c 	.word	0x2000000c
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c12:	4b12      	ldr	r3, [pc, #72]	@ (8007c5c <vPortExitCritical+0x50>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <vPortExitCritical+0x26>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	607b      	str	r3, [r7, #4]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c32:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <vPortExitCritical+0x50>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4a08      	ldr	r2, [pc, #32]	@ (8007c5c <vPortExitCritical+0x50>)
 8007c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c3c:	4b07      	ldr	r3, [pc, #28]	@ (8007c5c <vPortExitCritical+0x50>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <vPortExitCritical+0x44>
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	2000000c 	.word	0x2000000c

08007c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c60:	f3ef 8009 	mrs	r0, PSP
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <pxCurrentTCBConst>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f01e 0f10 	tst.w	lr, #16
 8007c70:	bf08      	it	eq
 8007c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c84:	f380 8811 	msr	BASEPRI, r0
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f7ff f914 	bl	8006ebc <vTaskSwitchContext>
 8007c94:	f04f 0000 	mov.w	r0, #0
 8007c98:	f380 8811 	msr	BASEPRI, r0
 8007c9c:	bc09      	pop	{r0, r3}
 8007c9e:	6819      	ldr	r1, [r3, #0]
 8007ca0:	6808      	ldr	r0, [r1, #0]
 8007ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca6:	f01e 0f10 	tst.w	lr, #16
 8007caa:	bf08      	it	eq
 8007cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cb0:	f380 8809 	msr	PSP, r0
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst>:
 8007cc0:	200029e0 	.word	0x200029e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	607b      	str	r3, [r7, #4]
}
 8007ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ce2:	f7ff f831 	bl	8006d48 <xTaskIncrementTick>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cec:	4b06      	ldr	r3, [pc, #24]	@ (8007d08 <xPortSysTickHandler+0x40>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f383 8811 	msr	BASEPRI, r3
}
 8007cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d10:	4b0b      	ldr	r3, [pc, #44]	@ (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d16:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <vPortSetupTimerInterrupt+0x38>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <vPortSetupTimerInterrupt+0x3c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	@ (8007d4c <vPortSetupTimerInterrupt+0x40>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	099b      	lsrs	r3, r3, #6
 8007d28:	4a09      	ldr	r2, [pc, #36]	@ (8007d50 <vPortSetupTimerInterrupt+0x44>)
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d2e:	4b04      	ldr	r3, [pc, #16]	@ (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d30:	2207      	movs	r2, #7
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	e000e010 	.word	0xe000e010
 8007d44:	e000e018 	.word	0xe000e018
 8007d48:	20000000 	.word	0x20000000
 8007d4c:	10624dd3 	.word	0x10624dd3
 8007d50:	e000e014 	.word	0xe000e014

08007d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d64 <vPortEnableVFP+0x10>
 8007d58:	6801      	ldr	r1, [r0, #0]
 8007d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d5e:	6001      	str	r1, [r0, #0]
 8007d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d62:	bf00      	nop
 8007d64:	e000ed88 	.word	0xe000ed88

08007d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d6e:	f3ef 8305 	mrs	r3, IPSR
 8007d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b0f      	cmp	r3, #15
 8007d78:	d915      	bls.n	8007da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d7a:	4a18      	ldr	r2, [pc, #96]	@ (8007ddc <vPortValidateInterruptPriority+0x74>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d84:	4b16      	ldr	r3, [pc, #88]	@ (8007de0 <vPortValidateInterruptPriority+0x78>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	7afa      	ldrb	r2, [r7, #11]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d20b      	bcs.n	8007da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007da6:	4b0f      	ldr	r3, [pc, #60]	@ (8007de4 <vPortValidateInterruptPriority+0x7c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dae:	4b0e      	ldr	r3, [pc, #56]	@ (8007de8 <vPortValidateInterruptPriority+0x80>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d90b      	bls.n	8007dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	603b      	str	r3, [r7, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <vPortValidateInterruptPriority+0x62>
	}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000e3f0 	.word	0xe000e3f0
 8007de0:	20002b0c 	.word	0x20002b0c
 8007de4:	e000ed0c 	.word	0xe000ed0c
 8007de8:	20002b10 	.word	0x20002b10

08007dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	@ 0x28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007df8:	f7fe feea 	bl	8006bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8007f70 <pvPortMalloc+0x184>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e04:	f000 f924 	bl	8008050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e08:	4b5a      	ldr	r3, [pc, #360]	@ (8007f74 <pvPortMalloc+0x188>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f040 8095 	bne.w	8007f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01e      	beq.n	8007e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d015      	beq.n	8007e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	3308      	adds	r3, #8
 8007e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <pvPortMalloc+0x6e>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	617b      	str	r3, [r7, #20]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d06f      	beq.n	8007f40 <pvPortMalloc+0x154>
 8007e60:	4b45      	ldr	r3, [pc, #276]	@ (8007f78 <pvPortMalloc+0x18c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d86a      	bhi.n	8007f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e6a:	4b44      	ldr	r3, [pc, #272]	@ (8007f7c <pvPortMalloc+0x190>)
 8007e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e6e:	4b43      	ldr	r3, [pc, #268]	@ (8007f7c <pvPortMalloc+0x190>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e74:	e004      	b.n	8007e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d903      	bls.n	8007e92 <pvPortMalloc+0xa6>
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f1      	bne.n	8007e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e92:	4b37      	ldr	r3, [pc, #220]	@ (8007f70 <pvPortMalloc+0x184>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d051      	beq.n	8007f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	4413      	add	r3, r2
 8007ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	1ad2      	subs	r2, r2, r3
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d920      	bls.n	8007f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	613b      	str	r3, [r7, #16]
}
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	e7fd      	b.n	8007ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f000 f90a 	bl	8008114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f00:	4b1d      	ldr	r3, [pc, #116]	@ (8007f78 <pvPortMalloc+0x18c>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <pvPortMalloc+0x18c>)
 8007f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007f78 <pvPortMalloc+0x18c>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b1b      	ldr	r3, [pc, #108]	@ (8007f80 <pvPortMalloc+0x194>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d203      	bcs.n	8007f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f1a:	4b17      	ldr	r3, [pc, #92]	@ (8007f78 <pvPortMalloc+0x18c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a18      	ldr	r2, [pc, #96]	@ (8007f80 <pvPortMalloc+0x194>)
 8007f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4b13      	ldr	r3, [pc, #76]	@ (8007f74 <pvPortMalloc+0x188>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f36:	4b13      	ldr	r3, [pc, #76]	@ (8007f84 <pvPortMalloc+0x198>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	4a11      	ldr	r2, [pc, #68]	@ (8007f84 <pvPortMalloc+0x198>)
 8007f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f40:	f7fe fe54 	bl	8006bec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <pvPortMalloc+0x17a>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60fb      	str	r3, [r7, #12]
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	e7fd      	b.n	8007f62 <pvPortMalloc+0x176>
	return pvReturn;
 8007f66:	69fb      	ldr	r3, [r7, #28]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3728      	adds	r7, #40	@ 0x28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	2000671c 	.word	0x2000671c
 8007f74:	20006730 	.word	0x20006730
 8007f78:	20006720 	.word	0x20006720
 8007f7c:	20006714 	.word	0x20006714
 8007f80:	20006724 	.word	0x20006724
 8007f84:	20006728 	.word	0x20006728

08007f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d04f      	beq.n	800803a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	425b      	negs	r3, r3
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	4b25      	ldr	r3, [pc, #148]	@ (8008044 <vPortFree+0xbc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <vPortFree+0x46>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60fb      	str	r3, [r7, #12]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <vPortFree+0x66>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	60bb      	str	r3, [r7, #8]
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	e7fd      	b.n	8007fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	4b14      	ldr	r3, [pc, #80]	@ (8008044 <vPortFree+0xbc>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01e      	beq.n	800803a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11a      	bne.n	800803a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	4b0e      	ldr	r3, [pc, #56]	@ (8008044 <vPortFree+0xbc>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	43db      	mvns	r3, r3
 800800e:	401a      	ands	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008014:	f7fe fddc 	bl	8006bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <vPortFree+0xc0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4413      	add	r3, r2
 8008022:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <vPortFree+0xc0>)
 8008024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008026:	6938      	ldr	r0, [r7, #16]
 8008028:	f000 f874 	bl	8008114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800802c:	4b07      	ldr	r3, [pc, #28]	@ (800804c <vPortFree+0xc4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3301      	adds	r3, #1
 8008032:	4a06      	ldr	r2, [pc, #24]	@ (800804c <vPortFree+0xc4>)
 8008034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008036:	f7fe fdd9 	bl	8006bec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800803a:	bf00      	nop
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20006730 	.word	0x20006730
 8008048:	20006720 	.word	0x20006720
 800804c:	2000672c 	.word	0x2000672c

08008050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800805a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800805c:	4b27      	ldr	r3, [pc, #156]	@ (80080fc <prvHeapInit+0xac>)
 800805e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00c      	beq.n	8008084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3307      	adds	r3, #7
 800806e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0307 	bic.w	r3, r3, #7
 8008076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	4a1f      	ldr	r2, [pc, #124]	@ (80080fc <prvHeapInit+0xac>)
 8008080:	4413      	add	r3, r2
 8008082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008088:	4a1d      	ldr	r2, [pc, #116]	@ (8008100 <prvHeapInit+0xb0>)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800808e:	4b1c      	ldr	r3, [pc, #112]	@ (8008100 <prvHeapInit+0xb0>)
 8008090:	2200      	movs	r2, #0
 8008092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4413      	add	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800809c:	2208      	movs	r2, #8
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4a15      	ldr	r2, [pc, #84]	@ (8008104 <prvHeapInit+0xb4>)
 80080b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080b2:	4b14      	ldr	r3, [pc, #80]	@ (8008104 <prvHeapInit+0xb4>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2200      	movs	r2, #0
 80080b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ba:	4b12      	ldr	r3, [pc, #72]	@ (8008104 <prvHeapInit+0xb4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	1ad2      	subs	r2, r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008104 <prvHeapInit+0xb4>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008108 <prvHeapInit+0xb8>)
 80080de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	4a09      	ldr	r2, [pc, #36]	@ (800810c <prvHeapInit+0xbc>)
 80080e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080e8:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <prvHeapInit+0xc0>)
 80080ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080ee:	601a      	str	r2, [r3, #0]
}
 80080f0:	bf00      	nop
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	20002b14 	.word	0x20002b14
 8008100:	20006714 	.word	0x20006714
 8008104:	2000671c 	.word	0x2000671c
 8008108:	20006724 	.word	0x20006724
 800810c:	20006720 	.word	0x20006720
 8008110:	20006730 	.word	0x20006730

08008114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800811c:	4b28      	ldr	r3, [pc, #160]	@ (80081c0 <prvInsertBlockIntoFreeList+0xac>)
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e002      	b.n	8008128 <prvInsertBlockIntoFreeList+0x14>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	d8f7      	bhi.n	8008122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4413      	add	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d108      	bne.n	8008156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	441a      	add	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	441a      	add	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d118      	bne.n	800819c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b15      	ldr	r3, [pc, #84]	@ (80081c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d00d      	beq.n	8008192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	441a      	add	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e008      	b.n	80081a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008192:	4b0c      	ldr	r3, [pc, #48]	@ (80081c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e003      	b.n	80081a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d002      	beq.n	80081b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20006714 	.word	0x20006714
 80081c4:	2000671c 	.word	0x2000671c

080081c8 <__cvt>:
 80081c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	ec57 6b10 	vmov	r6, r7, d0
 80081d0:	2f00      	cmp	r7, #0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4619      	mov	r1, r3
 80081d6:	463b      	mov	r3, r7
 80081d8:	bfbb      	ittet	lt
 80081da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081de:	461f      	movlt	r7, r3
 80081e0:	2300      	movge	r3, #0
 80081e2:	232d      	movlt	r3, #45	@ 0x2d
 80081e4:	700b      	strb	r3, [r1, #0]
 80081e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081ec:	4691      	mov	r9, r2
 80081ee:	f023 0820 	bic.w	r8, r3, #32
 80081f2:	bfbc      	itt	lt
 80081f4:	4632      	movlt	r2, r6
 80081f6:	4616      	movlt	r6, r2
 80081f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081fc:	d005      	beq.n	800820a <__cvt+0x42>
 80081fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008202:	d100      	bne.n	8008206 <__cvt+0x3e>
 8008204:	3401      	adds	r4, #1
 8008206:	2102      	movs	r1, #2
 8008208:	e000      	b.n	800820c <__cvt+0x44>
 800820a:	2103      	movs	r1, #3
 800820c:	ab03      	add	r3, sp, #12
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	ab02      	add	r3, sp, #8
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	ec47 6b10 	vmov	d0, r6, r7
 8008218:	4653      	mov	r3, sl
 800821a:	4622      	mov	r2, r4
 800821c:	f000 fe7c 	bl	8008f18 <_dtoa_r>
 8008220:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008224:	4605      	mov	r5, r0
 8008226:	d119      	bne.n	800825c <__cvt+0x94>
 8008228:	f019 0f01 	tst.w	r9, #1
 800822c:	d00e      	beq.n	800824c <__cvt+0x84>
 800822e:	eb00 0904 	add.w	r9, r0, r4
 8008232:	2200      	movs	r2, #0
 8008234:	2300      	movs	r3, #0
 8008236:	4630      	mov	r0, r6
 8008238:	4639      	mov	r1, r7
 800823a:	f7f8 fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800823e:	b108      	cbz	r0, 8008244 <__cvt+0x7c>
 8008240:	f8cd 900c 	str.w	r9, [sp, #12]
 8008244:	2230      	movs	r2, #48	@ 0x30
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	454b      	cmp	r3, r9
 800824a:	d31e      	bcc.n	800828a <__cvt+0xc2>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008250:	1b5b      	subs	r3, r3, r5
 8008252:	4628      	mov	r0, r5
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	b004      	add	sp, #16
 8008258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008260:	eb00 0904 	add.w	r9, r0, r4
 8008264:	d1e5      	bne.n	8008232 <__cvt+0x6a>
 8008266:	7803      	ldrb	r3, [r0, #0]
 8008268:	2b30      	cmp	r3, #48	@ 0x30
 800826a:	d10a      	bne.n	8008282 <__cvt+0xba>
 800826c:	2200      	movs	r2, #0
 800826e:	2300      	movs	r3, #0
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f8 fc48 	bl	8000b08 <__aeabi_dcmpeq>
 8008278:	b918      	cbnz	r0, 8008282 <__cvt+0xba>
 800827a:	f1c4 0401 	rsb	r4, r4, #1
 800827e:	f8ca 4000 	str.w	r4, [sl]
 8008282:	f8da 3000 	ldr.w	r3, [sl]
 8008286:	4499      	add	r9, r3
 8008288:	e7d3      	b.n	8008232 <__cvt+0x6a>
 800828a:	1c59      	adds	r1, r3, #1
 800828c:	9103      	str	r1, [sp, #12]
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e7d9      	b.n	8008246 <__cvt+0x7e>

08008292 <__exponent>:
 8008292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008294:	2900      	cmp	r1, #0
 8008296:	bfba      	itte	lt
 8008298:	4249      	neglt	r1, r1
 800829a:	232d      	movlt	r3, #45	@ 0x2d
 800829c:	232b      	movge	r3, #43	@ 0x2b
 800829e:	2909      	cmp	r1, #9
 80082a0:	7002      	strb	r2, [r0, #0]
 80082a2:	7043      	strb	r3, [r0, #1]
 80082a4:	dd29      	ble.n	80082fa <__exponent+0x68>
 80082a6:	f10d 0307 	add.w	r3, sp, #7
 80082aa:	461d      	mov	r5, r3
 80082ac:	270a      	movs	r7, #10
 80082ae:	461a      	mov	r2, r3
 80082b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80082b4:	fb07 1416 	mls	r4, r7, r6, r1
 80082b8:	3430      	adds	r4, #48	@ 0x30
 80082ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082be:	460c      	mov	r4, r1
 80082c0:	2c63      	cmp	r4, #99	@ 0x63
 80082c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80082c6:	4631      	mov	r1, r6
 80082c8:	dcf1      	bgt.n	80082ae <__exponent+0x1c>
 80082ca:	3130      	adds	r1, #48	@ 0x30
 80082cc:	1e94      	subs	r4, r2, #2
 80082ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082d2:	1c41      	adds	r1, r0, #1
 80082d4:	4623      	mov	r3, r4
 80082d6:	42ab      	cmp	r3, r5
 80082d8:	d30a      	bcc.n	80082f0 <__exponent+0x5e>
 80082da:	f10d 0309 	add.w	r3, sp, #9
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	42ac      	cmp	r4, r5
 80082e2:	bf88      	it	hi
 80082e4:	2300      	movhi	r3, #0
 80082e6:	3302      	adds	r3, #2
 80082e8:	4403      	add	r3, r0
 80082ea:	1a18      	subs	r0, r3, r0
 80082ec:	b003      	add	sp, #12
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082f8:	e7ed      	b.n	80082d6 <__exponent+0x44>
 80082fa:	2330      	movs	r3, #48	@ 0x30
 80082fc:	3130      	adds	r1, #48	@ 0x30
 80082fe:	7083      	strb	r3, [r0, #2]
 8008300:	70c1      	strb	r1, [r0, #3]
 8008302:	1d03      	adds	r3, r0, #4
 8008304:	e7f1      	b.n	80082ea <__exponent+0x58>
	...

08008308 <_printf_float>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	b08d      	sub	sp, #52	@ 0x34
 800830e:	460c      	mov	r4, r1
 8008310:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008314:	4616      	mov	r6, r2
 8008316:	461f      	mov	r7, r3
 8008318:	4605      	mov	r5, r0
 800831a:	f000 fcef 	bl	8008cfc <_localeconv_r>
 800831e:	6803      	ldr	r3, [r0, #0]
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	4618      	mov	r0, r3
 8008324:	f7f7 ffc4 	bl	80002b0 <strlen>
 8008328:	2300      	movs	r3, #0
 800832a:	930a      	str	r3, [sp, #40]	@ 0x28
 800832c:	f8d8 3000 	ldr.w	r3, [r8]
 8008330:	9005      	str	r0, [sp, #20]
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	f103 0208 	add.w	r2, r3, #8
 800833c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008340:	f8d4 b000 	ldr.w	fp, [r4]
 8008344:	f8c8 2000 	str.w	r2, [r8]
 8008348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800834c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	f8cd 8018 	str.w	r8, [sp, #24]
 8008356:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800835a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800835e:	4b9c      	ldr	r3, [pc, #624]	@ (80085d0 <_printf_float+0x2c8>)
 8008360:	f04f 32ff 	mov.w	r2, #4294967295
 8008364:	f7f8 fc02 	bl	8000b6c <__aeabi_dcmpun>
 8008368:	bb70      	cbnz	r0, 80083c8 <_printf_float+0xc0>
 800836a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800836e:	4b98      	ldr	r3, [pc, #608]	@ (80085d0 <_printf_float+0x2c8>)
 8008370:	f04f 32ff 	mov.w	r2, #4294967295
 8008374:	f7f8 fbdc 	bl	8000b30 <__aeabi_dcmple>
 8008378:	bb30      	cbnz	r0, 80083c8 <_printf_float+0xc0>
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f8 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8008386:	b110      	cbz	r0, 800838e <_printf_float+0x86>
 8008388:	232d      	movs	r3, #45	@ 0x2d
 800838a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800838e:	4a91      	ldr	r2, [pc, #580]	@ (80085d4 <_printf_float+0x2cc>)
 8008390:	4b91      	ldr	r3, [pc, #580]	@ (80085d8 <_printf_float+0x2d0>)
 8008392:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008396:	bf94      	ite	ls
 8008398:	4690      	movls	r8, r2
 800839a:	4698      	movhi	r8, r3
 800839c:	2303      	movs	r3, #3
 800839e:	6123      	str	r3, [r4, #16]
 80083a0:	f02b 0304 	bic.w	r3, fp, #4
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	f04f 0900 	mov.w	r9, #0
 80083aa:	9700      	str	r7, [sp, #0]
 80083ac:	4633      	mov	r3, r6
 80083ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f9d2 	bl	800875c <_printf_common>
 80083b8:	3001      	adds	r0, #1
 80083ba:	f040 808d 	bne.w	80084d8 <_printf_float+0x1d0>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295
 80083c2:	b00d      	add	sp, #52	@ 0x34
 80083c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	4649      	mov	r1, r9
 80083d0:	f7f8 fbcc 	bl	8000b6c <__aeabi_dcmpun>
 80083d4:	b140      	cbz	r0, 80083e8 <_printf_float+0xe0>
 80083d6:	464b      	mov	r3, r9
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfbc      	itt	lt
 80083dc:	232d      	movlt	r3, #45	@ 0x2d
 80083de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083e2:	4a7e      	ldr	r2, [pc, #504]	@ (80085dc <_printf_float+0x2d4>)
 80083e4:	4b7e      	ldr	r3, [pc, #504]	@ (80085e0 <_printf_float+0x2d8>)
 80083e6:	e7d4      	b.n	8008392 <_printf_float+0x8a>
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083ee:	9206      	str	r2, [sp, #24]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	d13b      	bne.n	800846c <_printf_float+0x164>
 80083f4:	2306      	movs	r3, #6
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083fc:	2300      	movs	r3, #0
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	ab0a      	add	r3, sp, #40	@ 0x28
 8008404:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008408:	ab09      	add	r3, sp, #36	@ 0x24
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	6861      	ldr	r1, [r4, #4]
 800840e:	ec49 8b10 	vmov	d0, r8, r9
 8008412:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008416:	4628      	mov	r0, r5
 8008418:	f7ff fed6 	bl	80081c8 <__cvt>
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008420:	2b47      	cmp	r3, #71	@ 0x47
 8008422:	4680      	mov	r8, r0
 8008424:	d129      	bne.n	800847a <_printf_float+0x172>
 8008426:	1cc8      	adds	r0, r1, #3
 8008428:	db02      	blt.n	8008430 <_printf_float+0x128>
 800842a:	6863      	ldr	r3, [r4, #4]
 800842c:	4299      	cmp	r1, r3
 800842e:	dd41      	ble.n	80084b4 <_printf_float+0x1ac>
 8008430:	f1aa 0a02 	sub.w	sl, sl, #2
 8008434:	fa5f fa8a 	uxtb.w	sl, sl
 8008438:	3901      	subs	r1, #1
 800843a:	4652      	mov	r2, sl
 800843c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008440:	9109      	str	r1, [sp, #36]	@ 0x24
 8008442:	f7ff ff26 	bl	8008292 <__exponent>
 8008446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008448:	1813      	adds	r3, r2, r0
 800844a:	2a01      	cmp	r2, #1
 800844c:	4681      	mov	r9, r0
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	dc02      	bgt.n	8008458 <_printf_float+0x150>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	07d2      	lsls	r2, r2, #31
 8008456:	d501      	bpl.n	800845c <_printf_float+0x154>
 8008458:	3301      	adds	r3, #1
 800845a:	6123      	str	r3, [r4, #16]
 800845c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0a2      	beq.n	80083aa <_printf_float+0xa2>
 8008464:	232d      	movs	r3, #45	@ 0x2d
 8008466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800846a:	e79e      	b.n	80083aa <_printf_float+0xa2>
 800846c:	9a06      	ldr	r2, [sp, #24]
 800846e:	2a47      	cmp	r2, #71	@ 0x47
 8008470:	d1c2      	bne.n	80083f8 <_printf_float+0xf0>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1c0      	bne.n	80083f8 <_printf_float+0xf0>
 8008476:	2301      	movs	r3, #1
 8008478:	e7bd      	b.n	80083f6 <_printf_float+0xee>
 800847a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800847e:	d9db      	bls.n	8008438 <_printf_float+0x130>
 8008480:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008484:	d118      	bne.n	80084b8 <_printf_float+0x1b0>
 8008486:	2900      	cmp	r1, #0
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	dd0b      	ble.n	80084a4 <_printf_float+0x19c>
 800848c:	6121      	str	r1, [r4, #16]
 800848e:	b913      	cbnz	r3, 8008496 <_printf_float+0x18e>
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	07d0      	lsls	r0, r2, #31
 8008494:	d502      	bpl.n	800849c <_printf_float+0x194>
 8008496:	3301      	adds	r3, #1
 8008498:	440b      	add	r3, r1
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800849e:	f04f 0900 	mov.w	r9, #0
 80084a2:	e7db      	b.n	800845c <_printf_float+0x154>
 80084a4:	b913      	cbnz	r3, 80084ac <_printf_float+0x1a4>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	07d2      	lsls	r2, r2, #31
 80084aa:	d501      	bpl.n	80084b0 <_printf_float+0x1a8>
 80084ac:	3302      	adds	r3, #2
 80084ae:	e7f4      	b.n	800849a <_printf_float+0x192>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7f2      	b.n	800849a <_printf_float+0x192>
 80084b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ba:	4299      	cmp	r1, r3
 80084bc:	db05      	blt.n	80084ca <_printf_float+0x1c2>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	6121      	str	r1, [r4, #16]
 80084c2:	07d8      	lsls	r0, r3, #31
 80084c4:	d5ea      	bpl.n	800849c <_printf_float+0x194>
 80084c6:	1c4b      	adds	r3, r1, #1
 80084c8:	e7e7      	b.n	800849a <_printf_float+0x192>
 80084ca:	2900      	cmp	r1, #0
 80084cc:	bfd4      	ite	le
 80084ce:	f1c1 0202 	rsble	r2, r1, #2
 80084d2:	2201      	movgt	r2, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	e7e0      	b.n	800849a <_printf_float+0x192>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	055a      	lsls	r2, r3, #21
 80084dc:	d407      	bmi.n	80084ee <_printf_float+0x1e6>
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	4642      	mov	r2, r8
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b8      	blx	r7
 80084e8:	3001      	adds	r0, #1
 80084ea:	d12b      	bne.n	8008544 <_printf_float+0x23c>
 80084ec:	e767      	b.n	80083be <_printf_float+0xb6>
 80084ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084f2:	f240 80dd 	bls.w	80086b0 <_printf_float+0x3a8>
 80084f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084fa:	2200      	movs	r2, #0
 80084fc:	2300      	movs	r3, #0
 80084fe:	f7f8 fb03 	bl	8000b08 <__aeabi_dcmpeq>
 8008502:	2800      	cmp	r0, #0
 8008504:	d033      	beq.n	800856e <_printf_float+0x266>
 8008506:	4a37      	ldr	r2, [pc, #220]	@ (80085e4 <_printf_float+0x2dc>)
 8008508:	2301      	movs	r3, #1
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f af54 	beq.w	80083be <_printf_float+0xb6>
 8008516:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800851a:	4543      	cmp	r3, r8
 800851c:	db02      	blt.n	8008524 <_printf_float+0x21c>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	07d8      	lsls	r0, r3, #31
 8008522:	d50f      	bpl.n	8008544 <_printf_float+0x23c>
 8008524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f af45 	beq.w	80083be <_printf_float+0xb6>
 8008534:	f04f 0900 	mov.w	r9, #0
 8008538:	f108 38ff 	add.w	r8, r8, #4294967295
 800853c:	f104 0a1a 	add.w	sl, r4, #26
 8008540:	45c8      	cmp	r8, r9
 8008542:	dc09      	bgt.n	8008558 <_printf_float+0x250>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	079b      	lsls	r3, r3, #30
 8008548:	f100 8103 	bmi.w	8008752 <_printf_float+0x44a>
 800854c:	68e0      	ldr	r0, [r4, #12]
 800854e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008550:	4298      	cmp	r0, r3
 8008552:	bfb8      	it	lt
 8008554:	4618      	movlt	r0, r3
 8008556:	e734      	b.n	80083c2 <_printf_float+0xba>
 8008558:	2301      	movs	r3, #1
 800855a:	4652      	mov	r2, sl
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f af2b 	beq.w	80083be <_printf_float+0xb6>
 8008568:	f109 0901 	add.w	r9, r9, #1
 800856c:	e7e8      	b.n	8008540 <_printf_float+0x238>
 800856e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	dc39      	bgt.n	80085e8 <_printf_float+0x2e0>
 8008574:	4a1b      	ldr	r2, [pc, #108]	@ (80085e4 <_printf_float+0x2dc>)
 8008576:	2301      	movs	r3, #1
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af1d 	beq.w	80083be <_printf_float+0xb6>
 8008584:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008588:	ea59 0303 	orrs.w	r3, r9, r3
 800858c:	d102      	bne.n	8008594 <_printf_float+0x28c>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	07d9      	lsls	r1, r3, #31
 8008592:	d5d7      	bpl.n	8008544 <_printf_float+0x23c>
 8008594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	f43f af0d 	beq.w	80083be <_printf_float+0xb6>
 80085a4:	f04f 0a00 	mov.w	sl, #0
 80085a8:	f104 0b1a 	add.w	fp, r4, #26
 80085ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ae:	425b      	negs	r3, r3
 80085b0:	4553      	cmp	r3, sl
 80085b2:	dc01      	bgt.n	80085b8 <_printf_float+0x2b0>
 80085b4:	464b      	mov	r3, r9
 80085b6:	e793      	b.n	80084e0 <_printf_float+0x1d8>
 80085b8:	2301      	movs	r3, #1
 80085ba:	465a      	mov	r2, fp
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f aefb 	beq.w	80083be <_printf_float+0xb6>
 80085c8:	f10a 0a01 	add.w	sl, sl, #1
 80085cc:	e7ee      	b.n	80085ac <_printf_float+0x2a4>
 80085ce:	bf00      	nop
 80085d0:	7fefffff 	.word	0x7fefffff
 80085d4:	0800bcc4 	.word	0x0800bcc4
 80085d8:	0800bcc8 	.word	0x0800bcc8
 80085dc:	0800bccc 	.word	0x0800bccc
 80085e0:	0800bcd0 	.word	0x0800bcd0
 80085e4:	0800bcd4 	.word	0x0800bcd4
 80085e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085ee:	4553      	cmp	r3, sl
 80085f0:	bfa8      	it	ge
 80085f2:	4653      	movge	r3, sl
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	4699      	mov	r9, r3
 80085f8:	dc36      	bgt.n	8008668 <_printf_float+0x360>
 80085fa:	f04f 0b00 	mov.w	fp, #0
 80085fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008602:	f104 021a 	add.w	r2, r4, #26
 8008606:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008608:	9306      	str	r3, [sp, #24]
 800860a:	eba3 0309 	sub.w	r3, r3, r9
 800860e:	455b      	cmp	r3, fp
 8008610:	dc31      	bgt.n	8008676 <_printf_float+0x36e>
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	459a      	cmp	sl, r3
 8008616:	dc3a      	bgt.n	800868e <_printf_float+0x386>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	07da      	lsls	r2, r3, #31
 800861c:	d437      	bmi.n	800868e <_printf_float+0x386>
 800861e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008620:	ebaa 0903 	sub.w	r9, sl, r3
 8008624:	9b06      	ldr	r3, [sp, #24]
 8008626:	ebaa 0303 	sub.w	r3, sl, r3
 800862a:	4599      	cmp	r9, r3
 800862c:	bfa8      	it	ge
 800862e:	4699      	movge	r9, r3
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	dc33      	bgt.n	800869e <_printf_float+0x396>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800863e:	f104 0b1a 	add.w	fp, r4, #26
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	ebaa 0303 	sub.w	r3, sl, r3
 8008648:	eba3 0309 	sub.w	r3, r3, r9
 800864c:	4543      	cmp	r3, r8
 800864e:	f77f af79 	ble.w	8008544 <_printf_float+0x23c>
 8008652:	2301      	movs	r3, #1
 8008654:	465a      	mov	r2, fp
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	f43f aeae 	beq.w	80083be <_printf_float+0xb6>
 8008662:	f108 0801 	add.w	r8, r8, #1
 8008666:	e7ec      	b.n	8008642 <_printf_float+0x33a>
 8008668:	4642      	mov	r2, r8
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	d1c2      	bne.n	80085fa <_printf_float+0x2f2>
 8008674:	e6a3      	b.n	80083be <_printf_float+0xb6>
 8008676:	2301      	movs	r3, #1
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	9206      	str	r2, [sp, #24]
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f ae9c 	beq.w	80083be <_printf_float+0xb6>
 8008686:	9a06      	ldr	r2, [sp, #24]
 8008688:	f10b 0b01 	add.w	fp, fp, #1
 800868c:	e7bb      	b.n	8008606 <_printf_float+0x2fe>
 800868e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	d1c0      	bne.n	800861e <_printf_float+0x316>
 800869c:	e68f      	b.n	80083be <_printf_float+0xb6>
 800869e:	9a06      	ldr	r2, [sp, #24]
 80086a0:	464b      	mov	r3, r9
 80086a2:	4442      	add	r2, r8
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	d1c3      	bne.n	8008636 <_printf_float+0x32e>
 80086ae:	e686      	b.n	80083be <_printf_float+0xb6>
 80086b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086b4:	f1ba 0f01 	cmp.w	sl, #1
 80086b8:	dc01      	bgt.n	80086be <_printf_float+0x3b6>
 80086ba:	07db      	lsls	r3, r3, #31
 80086bc:	d536      	bpl.n	800872c <_printf_float+0x424>
 80086be:	2301      	movs	r3, #1
 80086c0:	4642      	mov	r2, r8
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	f43f ae78 	beq.w	80083be <_printf_float+0xb6>
 80086ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f ae70 	beq.w	80083be <_printf_float+0xb6>
 80086de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ea:	f7f8 fa0d 	bl	8000b08 <__aeabi_dcmpeq>
 80086ee:	b9c0      	cbnz	r0, 8008722 <_printf_float+0x41a>
 80086f0:	4653      	mov	r3, sl
 80086f2:	f108 0201 	add.w	r2, r8, #1
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	d10c      	bne.n	800871a <_printf_float+0x412>
 8008700:	e65d      	b.n	80083be <_printf_float+0xb6>
 8008702:	2301      	movs	r3, #1
 8008704:	465a      	mov	r2, fp
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	f43f ae56 	beq.w	80083be <_printf_float+0xb6>
 8008712:	f108 0801 	add.w	r8, r8, #1
 8008716:	45d0      	cmp	r8, sl
 8008718:	dbf3      	blt.n	8008702 <_printf_float+0x3fa>
 800871a:	464b      	mov	r3, r9
 800871c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008720:	e6df      	b.n	80084e2 <_printf_float+0x1da>
 8008722:	f04f 0800 	mov.w	r8, #0
 8008726:	f104 0b1a 	add.w	fp, r4, #26
 800872a:	e7f4      	b.n	8008716 <_printf_float+0x40e>
 800872c:	2301      	movs	r3, #1
 800872e:	4642      	mov	r2, r8
 8008730:	e7e1      	b.n	80086f6 <_printf_float+0x3ee>
 8008732:	2301      	movs	r3, #1
 8008734:	464a      	mov	r2, r9
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f ae3e 	beq.w	80083be <_printf_float+0xb6>
 8008742:	f108 0801 	add.w	r8, r8, #1
 8008746:	68e3      	ldr	r3, [r4, #12]
 8008748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800874a:	1a5b      	subs	r3, r3, r1
 800874c:	4543      	cmp	r3, r8
 800874e:	dcf0      	bgt.n	8008732 <_printf_float+0x42a>
 8008750:	e6fc      	b.n	800854c <_printf_float+0x244>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	f104 0919 	add.w	r9, r4, #25
 800875a:	e7f4      	b.n	8008746 <_printf_float+0x43e>

0800875c <_printf_common>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	4616      	mov	r6, r2
 8008762:	4698      	mov	r8, r3
 8008764:	688a      	ldr	r2, [r1, #8]
 8008766:	690b      	ldr	r3, [r1, #16]
 8008768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800876c:	4293      	cmp	r3, r2
 800876e:	bfb8      	it	lt
 8008770:	4613      	movlt	r3, r2
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008778:	4607      	mov	r7, r0
 800877a:	460c      	mov	r4, r1
 800877c:	b10a      	cbz	r2, 8008782 <_printf_common+0x26>
 800877e:	3301      	adds	r3, #1
 8008780:	6033      	str	r3, [r6, #0]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	0699      	lsls	r1, r3, #26
 8008786:	bf42      	ittt	mi
 8008788:	6833      	ldrmi	r3, [r6, #0]
 800878a:	3302      	addmi	r3, #2
 800878c:	6033      	strmi	r3, [r6, #0]
 800878e:	6825      	ldr	r5, [r4, #0]
 8008790:	f015 0506 	ands.w	r5, r5, #6
 8008794:	d106      	bne.n	80087a4 <_printf_common+0x48>
 8008796:	f104 0a19 	add.w	sl, r4, #25
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	6832      	ldr	r2, [r6, #0]
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	dc26      	bgt.n	80087f2 <_printf_common+0x96>
 80087a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	3b00      	subs	r3, #0
 80087ac:	bf18      	it	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	0692      	lsls	r2, r2, #26
 80087b2:	d42b      	bmi.n	800880c <_printf_common+0xb0>
 80087b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087b8:	4641      	mov	r1, r8
 80087ba:	4638      	mov	r0, r7
 80087bc:	47c8      	blx	r9
 80087be:	3001      	adds	r0, #1
 80087c0:	d01e      	beq.n	8008800 <_printf_common+0xa4>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	f003 0306 	and.w	r3, r3, #6
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	bf02      	ittt	eq
 80087ce:	68e5      	ldreq	r5, [r4, #12]
 80087d0:	6833      	ldreq	r3, [r6, #0]
 80087d2:	1aed      	subeq	r5, r5, r3
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	bf0c      	ite	eq
 80087d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087dc:	2500      	movne	r5, #0
 80087de:	4293      	cmp	r3, r2
 80087e0:	bfc4      	itt	gt
 80087e2:	1a9b      	subgt	r3, r3, r2
 80087e4:	18ed      	addgt	r5, r5, r3
 80087e6:	2600      	movs	r6, #0
 80087e8:	341a      	adds	r4, #26
 80087ea:	42b5      	cmp	r5, r6
 80087ec:	d11a      	bne.n	8008824 <_printf_common+0xc8>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e008      	b.n	8008804 <_printf_common+0xa8>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4652      	mov	r2, sl
 80087f6:	4641      	mov	r1, r8
 80087f8:	4638      	mov	r0, r7
 80087fa:	47c8      	blx	r9
 80087fc:	3001      	adds	r0, #1
 80087fe:	d103      	bne.n	8008808 <_printf_common+0xac>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	3501      	adds	r5, #1
 800880a:	e7c6      	b.n	800879a <_printf_common+0x3e>
 800880c:	18e1      	adds	r1, r4, r3
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	2030      	movs	r0, #48	@ 0x30
 8008812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008816:	4422      	add	r2, r4
 8008818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800881c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008820:	3302      	adds	r3, #2
 8008822:	e7c7      	b.n	80087b4 <_printf_common+0x58>
 8008824:	2301      	movs	r3, #1
 8008826:	4622      	mov	r2, r4
 8008828:	4641      	mov	r1, r8
 800882a:	4638      	mov	r0, r7
 800882c:	47c8      	blx	r9
 800882e:	3001      	adds	r0, #1
 8008830:	d0e6      	beq.n	8008800 <_printf_common+0xa4>
 8008832:	3601      	adds	r6, #1
 8008834:	e7d9      	b.n	80087ea <_printf_common+0x8e>
	...

08008838 <_printf_i>:
 8008838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	7e0f      	ldrb	r7, [r1, #24]
 800883e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008840:	2f78      	cmp	r7, #120	@ 0x78
 8008842:	4691      	mov	r9, r2
 8008844:	4680      	mov	r8, r0
 8008846:	460c      	mov	r4, r1
 8008848:	469a      	mov	sl, r3
 800884a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800884e:	d807      	bhi.n	8008860 <_printf_i+0x28>
 8008850:	2f62      	cmp	r7, #98	@ 0x62
 8008852:	d80a      	bhi.n	800886a <_printf_i+0x32>
 8008854:	2f00      	cmp	r7, #0
 8008856:	f000 80d2 	beq.w	80089fe <_printf_i+0x1c6>
 800885a:	2f58      	cmp	r7, #88	@ 0x58
 800885c:	f000 80b9 	beq.w	80089d2 <_printf_i+0x19a>
 8008860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008868:	e03a      	b.n	80088e0 <_printf_i+0xa8>
 800886a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800886e:	2b15      	cmp	r3, #21
 8008870:	d8f6      	bhi.n	8008860 <_printf_i+0x28>
 8008872:	a101      	add	r1, pc, #4	@ (adr r1, 8008878 <_printf_i+0x40>)
 8008874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008878:	080088d1 	.word	0x080088d1
 800887c:	080088e5 	.word	0x080088e5
 8008880:	08008861 	.word	0x08008861
 8008884:	08008861 	.word	0x08008861
 8008888:	08008861 	.word	0x08008861
 800888c:	08008861 	.word	0x08008861
 8008890:	080088e5 	.word	0x080088e5
 8008894:	08008861 	.word	0x08008861
 8008898:	08008861 	.word	0x08008861
 800889c:	08008861 	.word	0x08008861
 80088a0:	08008861 	.word	0x08008861
 80088a4:	080089e5 	.word	0x080089e5
 80088a8:	0800890f 	.word	0x0800890f
 80088ac:	0800899f 	.word	0x0800899f
 80088b0:	08008861 	.word	0x08008861
 80088b4:	08008861 	.word	0x08008861
 80088b8:	08008a07 	.word	0x08008a07
 80088bc:	08008861 	.word	0x08008861
 80088c0:	0800890f 	.word	0x0800890f
 80088c4:	08008861 	.word	0x08008861
 80088c8:	08008861 	.word	0x08008861
 80088cc:	080089a7 	.word	0x080089a7
 80088d0:	6833      	ldr	r3, [r6, #0]
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6032      	str	r2, [r6, #0]
 80088d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088e0:	2301      	movs	r3, #1
 80088e2:	e09d      	b.n	8008a20 <_printf_i+0x1e8>
 80088e4:	6833      	ldr	r3, [r6, #0]
 80088e6:	6820      	ldr	r0, [r4, #0]
 80088e8:	1d19      	adds	r1, r3, #4
 80088ea:	6031      	str	r1, [r6, #0]
 80088ec:	0606      	lsls	r6, r0, #24
 80088ee:	d501      	bpl.n	80088f4 <_printf_i+0xbc>
 80088f0:	681d      	ldr	r5, [r3, #0]
 80088f2:	e003      	b.n	80088fc <_printf_i+0xc4>
 80088f4:	0645      	lsls	r5, r0, #25
 80088f6:	d5fb      	bpl.n	80088f0 <_printf_i+0xb8>
 80088f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	da03      	bge.n	8008908 <_printf_i+0xd0>
 8008900:	232d      	movs	r3, #45	@ 0x2d
 8008902:	426d      	negs	r5, r5
 8008904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008908:	4859      	ldr	r0, [pc, #356]	@ (8008a70 <_printf_i+0x238>)
 800890a:	230a      	movs	r3, #10
 800890c:	e011      	b.n	8008932 <_printf_i+0xfa>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	0608      	lsls	r0, r1, #24
 8008914:	f853 5b04 	ldr.w	r5, [r3], #4
 8008918:	d402      	bmi.n	8008920 <_printf_i+0xe8>
 800891a:	0649      	lsls	r1, r1, #25
 800891c:	bf48      	it	mi
 800891e:	b2ad      	uxthmi	r5, r5
 8008920:	2f6f      	cmp	r7, #111	@ 0x6f
 8008922:	4853      	ldr	r0, [pc, #332]	@ (8008a70 <_printf_i+0x238>)
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	bf14      	ite	ne
 8008928:	230a      	movne	r3, #10
 800892a:	2308      	moveq	r3, #8
 800892c:	2100      	movs	r1, #0
 800892e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008932:	6866      	ldr	r6, [r4, #4]
 8008934:	60a6      	str	r6, [r4, #8]
 8008936:	2e00      	cmp	r6, #0
 8008938:	bfa2      	ittt	ge
 800893a:	6821      	ldrge	r1, [r4, #0]
 800893c:	f021 0104 	bicge.w	r1, r1, #4
 8008940:	6021      	strge	r1, [r4, #0]
 8008942:	b90d      	cbnz	r5, 8008948 <_printf_i+0x110>
 8008944:	2e00      	cmp	r6, #0
 8008946:	d04b      	beq.n	80089e0 <_printf_i+0x1a8>
 8008948:	4616      	mov	r6, r2
 800894a:	fbb5 f1f3 	udiv	r1, r5, r3
 800894e:	fb03 5711 	mls	r7, r3, r1, r5
 8008952:	5dc7      	ldrb	r7, [r0, r7]
 8008954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008958:	462f      	mov	r7, r5
 800895a:	42bb      	cmp	r3, r7
 800895c:	460d      	mov	r5, r1
 800895e:	d9f4      	bls.n	800894a <_printf_i+0x112>
 8008960:	2b08      	cmp	r3, #8
 8008962:	d10b      	bne.n	800897c <_printf_i+0x144>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07df      	lsls	r7, r3, #31
 8008968:	d508      	bpl.n	800897c <_printf_i+0x144>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4299      	cmp	r1, r3
 8008970:	bfde      	ittt	le
 8008972:	2330      	movle	r3, #48	@ 0x30
 8008974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800897c:	1b92      	subs	r2, r2, r6
 800897e:	6122      	str	r2, [r4, #16]
 8008980:	f8cd a000 	str.w	sl, [sp]
 8008984:	464b      	mov	r3, r9
 8008986:	aa03      	add	r2, sp, #12
 8008988:	4621      	mov	r1, r4
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fee6 	bl	800875c <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	d14a      	bne.n	8008a2a <_printf_i+0x1f2>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	b004      	add	sp, #16
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	4833      	ldr	r0, [pc, #204]	@ (8008a74 <_printf_i+0x23c>)
 80089a8:	2778      	movs	r7, #120	@ 0x78
 80089aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	6831      	ldr	r1, [r6, #0]
 80089b2:	061f      	lsls	r7, r3, #24
 80089b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80089b8:	d402      	bmi.n	80089c0 <_printf_i+0x188>
 80089ba:	065f      	lsls	r7, r3, #25
 80089bc:	bf48      	it	mi
 80089be:	b2ad      	uxthmi	r5, r5
 80089c0:	6031      	str	r1, [r6, #0]
 80089c2:	07d9      	lsls	r1, r3, #31
 80089c4:	bf44      	itt	mi
 80089c6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ca:	6023      	strmi	r3, [r4, #0]
 80089cc:	b11d      	cbz	r5, 80089d6 <_printf_i+0x19e>
 80089ce:	2310      	movs	r3, #16
 80089d0:	e7ac      	b.n	800892c <_printf_i+0xf4>
 80089d2:	4827      	ldr	r0, [pc, #156]	@ (8008a70 <_printf_i+0x238>)
 80089d4:	e7e9      	b.n	80089aa <_printf_i+0x172>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f023 0320 	bic.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	e7f6      	b.n	80089ce <_printf_i+0x196>
 80089e0:	4616      	mov	r6, r2
 80089e2:	e7bd      	b.n	8008960 <_printf_i+0x128>
 80089e4:	6833      	ldr	r3, [r6, #0]
 80089e6:	6825      	ldr	r5, [r4, #0]
 80089e8:	6961      	ldr	r1, [r4, #20]
 80089ea:	1d18      	adds	r0, r3, #4
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	062e      	lsls	r6, r5, #24
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	d501      	bpl.n	80089f8 <_printf_i+0x1c0>
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	e002      	b.n	80089fe <_printf_i+0x1c6>
 80089f8:	0668      	lsls	r0, r5, #25
 80089fa:	d5fb      	bpl.n	80089f4 <_printf_i+0x1bc>
 80089fc:	8019      	strh	r1, [r3, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	4616      	mov	r6, r2
 8008a04:	e7bc      	b.n	8008980 <_printf_i+0x148>
 8008a06:	6833      	ldr	r3, [r6, #0]
 8008a08:	1d1a      	adds	r2, r3, #4
 8008a0a:	6032      	str	r2, [r6, #0]
 8008a0c:	681e      	ldr	r6, [r3, #0]
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	2100      	movs	r1, #0
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7f7 fbfc 	bl	8000210 <memchr>
 8008a18:	b108      	cbz	r0, 8008a1e <_printf_i+0x1e6>
 8008a1a:	1b80      	subs	r0, r0, r6
 8008a1c:	6060      	str	r0, [r4, #4]
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	2300      	movs	r3, #0
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a28:	e7aa      	b.n	8008980 <_printf_i+0x148>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4640      	mov	r0, r8
 8008a32:	47d0      	blx	sl
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0ad      	beq.n	8008994 <_printf_i+0x15c>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	d413      	bmi.n	8008a66 <_printf_i+0x22e>
 8008a3e:	68e0      	ldr	r0, [r4, #12]
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	4298      	cmp	r0, r3
 8008a44:	bfb8      	it	lt
 8008a46:	4618      	movlt	r0, r3
 8008a48:	e7a6      	b.n	8008998 <_printf_i+0x160>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	47d0      	blx	sl
 8008a54:	3001      	adds	r0, #1
 8008a56:	d09d      	beq.n	8008994 <_printf_i+0x15c>
 8008a58:	3501      	adds	r5, #1
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	9903      	ldr	r1, [sp, #12]
 8008a5e:	1a5b      	subs	r3, r3, r1
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dcf2      	bgt.n	8008a4a <_printf_i+0x212>
 8008a64:	e7eb      	b.n	8008a3e <_printf_i+0x206>
 8008a66:	2500      	movs	r5, #0
 8008a68:	f104 0619 	add.w	r6, r4, #25
 8008a6c:	e7f5      	b.n	8008a5a <_printf_i+0x222>
 8008a6e:	bf00      	nop
 8008a70:	0800bcd6 	.word	0x0800bcd6
 8008a74:	0800bce7 	.word	0x0800bce7

08008a78 <std>:
 8008a78:	2300      	movs	r3, #0
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a86:	6083      	str	r3, [r0, #8]
 8008a88:	8181      	strh	r1, [r0, #12]
 8008a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a8c:	81c2      	strh	r2, [r0, #14]
 8008a8e:	6183      	str	r3, [r0, #24]
 8008a90:	4619      	mov	r1, r3
 8008a92:	2208      	movs	r2, #8
 8008a94:	305c      	adds	r0, #92	@ 0x5c
 8008a96:	f000 f928 	bl	8008cea <memset>
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad0 <std+0x58>)
 8008a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <std+0x5c>)
 8008aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <std+0x60>)
 8008aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <std+0x64>)
 8008aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae0 <std+0x68>)
 8008aac:	6224      	str	r4, [r4, #32]
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d006      	beq.n	8008ac0 <std+0x48>
 8008ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ab6:	4294      	cmp	r4, r2
 8008ab8:	d002      	beq.n	8008ac0 <std+0x48>
 8008aba:	33d0      	adds	r3, #208	@ 0xd0
 8008abc:	429c      	cmp	r4, r3
 8008abe:	d105      	bne.n	8008acc <std+0x54>
 8008ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac8:	f000 b98c 	b.w	8008de4 <__retarget_lock_init_recursive>
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	bf00      	nop
 8008ad0:	08008c65 	.word	0x08008c65
 8008ad4:	08008c87 	.word	0x08008c87
 8008ad8:	08008cbf 	.word	0x08008cbf
 8008adc:	08008ce3 	.word	0x08008ce3
 8008ae0:	20006734 	.word	0x20006734

08008ae4 <stdio_exit_handler>:
 8008ae4:	4a02      	ldr	r2, [pc, #8]	@ (8008af0 <stdio_exit_handler+0xc>)
 8008ae6:	4903      	ldr	r1, [pc, #12]	@ (8008af4 <stdio_exit_handler+0x10>)
 8008ae8:	4803      	ldr	r0, [pc, #12]	@ (8008af8 <stdio_exit_handler+0x14>)
 8008aea:	f000 b869 	b.w	8008bc0 <_fwalk_sglue>
 8008aee:	bf00      	nop
 8008af0:	20000010 	.word	0x20000010
 8008af4:	0800a75d 	.word	0x0800a75d
 8008af8:	20000020 	.word	0x20000020

08008afc <cleanup_stdio>:
 8008afc:	6841      	ldr	r1, [r0, #4]
 8008afe:	4b0c      	ldr	r3, [pc, #48]	@ (8008b30 <cleanup_stdio+0x34>)
 8008b00:	4299      	cmp	r1, r3
 8008b02:	b510      	push	{r4, lr}
 8008b04:	4604      	mov	r4, r0
 8008b06:	d001      	beq.n	8008b0c <cleanup_stdio+0x10>
 8008b08:	f001 fe28 	bl	800a75c <_fflush_r>
 8008b0c:	68a1      	ldr	r1, [r4, #8]
 8008b0e:	4b09      	ldr	r3, [pc, #36]	@ (8008b34 <cleanup_stdio+0x38>)
 8008b10:	4299      	cmp	r1, r3
 8008b12:	d002      	beq.n	8008b1a <cleanup_stdio+0x1e>
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 fe21 	bl	800a75c <_fflush_r>
 8008b1a:	68e1      	ldr	r1, [r4, #12]
 8008b1c:	4b06      	ldr	r3, [pc, #24]	@ (8008b38 <cleanup_stdio+0x3c>)
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	d004      	beq.n	8008b2c <cleanup_stdio+0x30>
 8008b22:	4620      	mov	r0, r4
 8008b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b28:	f001 be18 	b.w	800a75c <_fflush_r>
 8008b2c:	bd10      	pop	{r4, pc}
 8008b2e:	bf00      	nop
 8008b30:	20006734 	.word	0x20006734
 8008b34:	2000679c 	.word	0x2000679c
 8008b38:	20006804 	.word	0x20006804

08008b3c <global_stdio_init.part.0>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b6c <global_stdio_init.part.0+0x30>)
 8008b40:	4c0b      	ldr	r4, [pc, #44]	@ (8008b70 <global_stdio_init.part.0+0x34>)
 8008b42:	4a0c      	ldr	r2, [pc, #48]	@ (8008b74 <global_stdio_init.part.0+0x38>)
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	4620      	mov	r0, r4
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2104      	movs	r1, #4
 8008b4c:	f7ff ff94 	bl	8008a78 <std>
 8008b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b54:	2201      	movs	r2, #1
 8008b56:	2109      	movs	r1, #9
 8008b58:	f7ff ff8e 	bl	8008a78 <std>
 8008b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b60:	2202      	movs	r2, #2
 8008b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b66:	2112      	movs	r1, #18
 8008b68:	f7ff bf86 	b.w	8008a78 <std>
 8008b6c:	2000686c 	.word	0x2000686c
 8008b70:	20006734 	.word	0x20006734
 8008b74:	08008ae5 	.word	0x08008ae5

08008b78 <__sfp_lock_acquire>:
 8008b78:	4801      	ldr	r0, [pc, #4]	@ (8008b80 <__sfp_lock_acquire+0x8>)
 8008b7a:	f000 b934 	b.w	8008de6 <__retarget_lock_acquire_recursive>
 8008b7e:	bf00      	nop
 8008b80:	20006875 	.word	0x20006875

08008b84 <__sfp_lock_release>:
 8008b84:	4801      	ldr	r0, [pc, #4]	@ (8008b8c <__sfp_lock_release+0x8>)
 8008b86:	f000 b92f 	b.w	8008de8 <__retarget_lock_release_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	20006875 	.word	0x20006875

08008b90 <__sinit>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	4604      	mov	r4, r0
 8008b94:	f7ff fff0 	bl	8008b78 <__sfp_lock_acquire>
 8008b98:	6a23      	ldr	r3, [r4, #32]
 8008b9a:	b11b      	cbz	r3, 8008ba4 <__sinit+0x14>
 8008b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ba0:	f7ff bff0 	b.w	8008b84 <__sfp_lock_release>
 8008ba4:	4b04      	ldr	r3, [pc, #16]	@ (8008bb8 <__sinit+0x28>)
 8008ba6:	6223      	str	r3, [r4, #32]
 8008ba8:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <__sinit+0x2c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1f5      	bne.n	8008b9c <__sinit+0xc>
 8008bb0:	f7ff ffc4 	bl	8008b3c <global_stdio_init.part.0>
 8008bb4:	e7f2      	b.n	8008b9c <__sinit+0xc>
 8008bb6:	bf00      	nop
 8008bb8:	08008afd 	.word	0x08008afd
 8008bbc:	2000686c 	.word	0x2000686c

08008bc0 <_fwalk_sglue>:
 8008bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	4688      	mov	r8, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	2600      	movs	r6, #0
 8008bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8008bd4:	d505      	bpl.n	8008be2 <_fwalk_sglue+0x22>
 8008bd6:	6824      	ldr	r4, [r4, #0]
 8008bd8:	2c00      	cmp	r4, #0
 8008bda:	d1f7      	bne.n	8008bcc <_fwalk_sglue+0xc>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d907      	bls.n	8008bf8 <_fwalk_sglue+0x38>
 8008be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bec:	3301      	adds	r3, #1
 8008bee:	d003      	beq.n	8008bf8 <_fwalk_sglue+0x38>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	47c0      	blx	r8
 8008bf6:	4306      	orrs	r6, r0
 8008bf8:	3568      	adds	r5, #104	@ 0x68
 8008bfa:	e7e9      	b.n	8008bd0 <_fwalk_sglue+0x10>

08008bfc <sniprintf>:
 8008bfc:	b40c      	push	{r2, r3}
 8008bfe:	b530      	push	{r4, r5, lr}
 8008c00:	4b17      	ldr	r3, [pc, #92]	@ (8008c60 <sniprintf+0x64>)
 8008c02:	1e0c      	subs	r4, r1, #0
 8008c04:	681d      	ldr	r5, [r3, #0]
 8008c06:	b09d      	sub	sp, #116	@ 0x74
 8008c08:	da08      	bge.n	8008c1c <sniprintf+0x20>
 8008c0a:	238b      	movs	r3, #139	@ 0x8b
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c12:	b01d      	add	sp, #116	@ 0x74
 8008c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c18:	b002      	add	sp, #8
 8008c1a:	4770      	bx	lr
 8008c1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c24:	bf14      	ite	ne
 8008c26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c2a:	4623      	moveq	r3, r4
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	9307      	str	r3, [sp, #28]
 8008c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c34:	9002      	str	r0, [sp, #8]
 8008c36:	9006      	str	r0, [sp, #24]
 8008c38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c3e:	ab21      	add	r3, sp, #132	@ 0x84
 8008c40:	a902      	add	r1, sp, #8
 8008c42:	4628      	mov	r0, r5
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f001 fc09 	bl	800a45c <_svfiprintf_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	bfbc      	itt	lt
 8008c4e:	238b      	movlt	r3, #139	@ 0x8b
 8008c50:	602b      	strlt	r3, [r5, #0]
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d0dd      	beq.n	8008c12 <sniprintf+0x16>
 8008c56:	9b02      	ldr	r3, [sp, #8]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	e7d9      	b.n	8008c12 <sniprintf+0x16>
 8008c5e:	bf00      	nop
 8008c60:	2000001c 	.word	0x2000001c

08008c64 <__sread>:
 8008c64:	b510      	push	{r4, lr}
 8008c66:	460c      	mov	r4, r1
 8008c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6c:	f000 f86c 	bl	8008d48 <_read_r>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	bfab      	itete	ge
 8008c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c76:	89a3      	ldrhlt	r3, [r4, #12]
 8008c78:	181b      	addge	r3, r3, r0
 8008c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c7e:	bfac      	ite	ge
 8008c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c82:	81a3      	strhlt	r3, [r4, #12]
 8008c84:	bd10      	pop	{r4, pc}

08008c86 <__swrite>:
 8008c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	898b      	ldrh	r3, [r1, #12]
 8008c8e:	05db      	lsls	r3, r3, #23
 8008c90:	4605      	mov	r5, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4616      	mov	r6, r2
 8008c96:	d505      	bpl.n	8008ca4 <__swrite+0x1e>
 8008c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f000 f840 	bl	8008d24 <_lseek_r>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cba:	f000 b857 	b.w	8008d6c <_write_r>

08008cbe <__sseek>:
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc6:	f000 f82d 	bl	8008d24 <_lseek_r>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	bf15      	itete	ne
 8008cd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cda:	81a3      	strheq	r3, [r4, #12]
 8008cdc:	bf18      	it	ne
 8008cde:	81a3      	strhne	r3, [r4, #12]
 8008ce0:	bd10      	pop	{r4, pc}

08008ce2 <__sclose>:
 8008ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce6:	f000 b80d 	b.w	8008d04 <_close_r>

08008cea <memset>:
 8008cea:	4402      	add	r2, r0
 8008cec:	4603      	mov	r3, r0
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d100      	bne.n	8008cf4 <memset+0xa>
 8008cf2:	4770      	bx	lr
 8008cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf8:	e7f9      	b.n	8008cee <memset+0x4>
	...

08008cfc <_localeconv_r>:
 8008cfc:	4800      	ldr	r0, [pc, #0]	@ (8008d00 <_localeconv_r+0x4>)
 8008cfe:	4770      	bx	lr
 8008d00:	2000015c 	.word	0x2000015c

08008d04 <_close_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	@ (8008d20 <_close_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f9 f996 	bl	8002040 <_close>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_close_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_close_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20006870 	.word	0x20006870

08008d24 <_lseek_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	@ (8008d44 <_lseek_r+0x20>)
 8008d28:	4604      	mov	r4, r0
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	602a      	str	r2, [r5, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f7f9 f9ab 	bl	800208e <_lseek>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_lseek_r+0x1e>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_lseek_r+0x1e>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20006870 	.word	0x20006870

08008d48 <_read_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d07      	ldr	r5, [pc, #28]	@ (8008d68 <_read_r+0x20>)
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	4608      	mov	r0, r1
 8008d50:	4611      	mov	r1, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	602a      	str	r2, [r5, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f7f9 f939 	bl	8001fce <_read>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_read_r+0x1e>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_read_r+0x1e>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20006870 	.word	0x20006870

08008d6c <_write_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	@ (8008d8c <_write_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f9 f944 	bl	8002008 <_write>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_write_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_write_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20006870 	.word	0x20006870

08008d90 <__errno>:
 8008d90:	4b01      	ldr	r3, [pc, #4]	@ (8008d98 <__errno+0x8>)
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	2000001c 	.word	0x2000001c

08008d9c <__libc_init_array>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8008dd4 <__libc_init_array+0x38>)
 8008da0:	4c0d      	ldr	r4, [pc, #52]	@ (8008dd8 <__libc_init_array+0x3c>)
 8008da2:	1b64      	subs	r4, r4, r5
 8008da4:	10a4      	asrs	r4, r4, #2
 8008da6:	2600      	movs	r6, #0
 8008da8:	42a6      	cmp	r6, r4
 8008daa:	d109      	bne.n	8008dc0 <__libc_init_array+0x24>
 8008dac:	4d0b      	ldr	r5, [pc, #44]	@ (8008ddc <__libc_init_array+0x40>)
 8008dae:	4c0c      	ldr	r4, [pc, #48]	@ (8008de0 <__libc_init_array+0x44>)
 8008db0:	f002 ff14 	bl	800bbdc <_init>
 8008db4:	1b64      	subs	r4, r4, r5
 8008db6:	10a4      	asrs	r4, r4, #2
 8008db8:	2600      	movs	r6, #0
 8008dba:	42a6      	cmp	r6, r4
 8008dbc:	d105      	bne.n	8008dca <__libc_init_array+0x2e>
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc4:	4798      	blx	r3
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	e7ee      	b.n	8008da8 <__libc_init_array+0xc>
 8008dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dce:	4798      	blx	r3
 8008dd0:	3601      	adds	r6, #1
 8008dd2:	e7f2      	b.n	8008dba <__libc_init_array+0x1e>
 8008dd4:	0800c428 	.word	0x0800c428
 8008dd8:	0800c428 	.word	0x0800c428
 8008ddc:	0800c428 	.word	0x0800c428
 8008de0:	0800c42c 	.word	0x0800c42c

08008de4 <__retarget_lock_init_recursive>:
 8008de4:	4770      	bx	lr

08008de6 <__retarget_lock_acquire_recursive>:
 8008de6:	4770      	bx	lr

08008de8 <__retarget_lock_release_recursive>:
 8008de8:	4770      	bx	lr

08008dea <memcpy>:
 8008dea:	440a      	add	r2, r1
 8008dec:	4291      	cmp	r1, r2
 8008dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8008df2:	d100      	bne.n	8008df6 <memcpy+0xc>
 8008df4:	4770      	bx	lr
 8008df6:	b510      	push	{r4, lr}
 8008df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e00:	4291      	cmp	r1, r2
 8008e02:	d1f9      	bne.n	8008df8 <memcpy+0xe>
 8008e04:	bd10      	pop	{r4, pc}

08008e06 <quorem>:
 8008e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6903      	ldr	r3, [r0, #16]
 8008e0c:	690c      	ldr	r4, [r1, #16]
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	4607      	mov	r7, r0
 8008e12:	db7e      	blt.n	8008f12 <quorem+0x10c>
 8008e14:	3c01      	subs	r4, #1
 8008e16:	f101 0814 	add.w	r8, r1, #20
 8008e1a:	00a3      	lsls	r3, r4, #2
 8008e1c:	f100 0514 	add.w	r5, r0, #20
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e30:	3301      	adds	r3, #1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e3c:	d32e      	bcc.n	8008e9c <quorem+0x96>
 8008e3e:	f04f 0a00 	mov.w	sl, #0
 8008e42:	46c4      	mov	ip, r8
 8008e44:	46ae      	mov	lr, r5
 8008e46:	46d3      	mov	fp, sl
 8008e48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e4c:	b298      	uxth	r0, r3
 8008e4e:	fb06 a000 	mla	r0, r6, r0, sl
 8008e52:	0c02      	lsrs	r2, r0, #16
 8008e54:	0c1b      	lsrs	r3, r3, #16
 8008e56:	fb06 2303 	mla	r3, r6, r3, r2
 8008e5a:	f8de 2000 	ldr.w	r2, [lr]
 8008e5e:	b280      	uxth	r0, r0
 8008e60:	b292      	uxth	r2, r2
 8008e62:	1a12      	subs	r2, r2, r0
 8008e64:	445a      	add	r2, fp
 8008e66:	f8de 0000 	ldr.w	r0, [lr]
 8008e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e78:	b292      	uxth	r2, r2
 8008e7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e7e:	45e1      	cmp	r9, ip
 8008e80:	f84e 2b04 	str.w	r2, [lr], #4
 8008e84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e88:	d2de      	bcs.n	8008e48 <quorem+0x42>
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	58eb      	ldr	r3, [r5, r3]
 8008e8e:	b92b      	cbnz	r3, 8008e9c <quorem+0x96>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	3b04      	subs	r3, #4
 8008e94:	429d      	cmp	r5, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	d32f      	bcc.n	8008efa <quorem+0xf4>
 8008e9a:	613c      	str	r4, [r7, #16]
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f001 f979 	bl	800a194 <__mcmp>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	db25      	blt.n	8008ef2 <quorem+0xec>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eae:	f8d1 c000 	ldr.w	ip, [r1]
 8008eb2:	fa1f fe82 	uxth.w	lr, r2
 8008eb6:	fa1f f38c 	uxth.w	r3, ip
 8008eba:	eba3 030e 	sub.w	r3, r3, lr
 8008ebe:	4403      	add	r3, r0
 8008ec0:	0c12      	lsrs	r2, r2, #16
 8008ec2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ec6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed0:	45c1      	cmp	r9, r8
 8008ed2:	f841 3b04 	str.w	r3, [r1], #4
 8008ed6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008eda:	d2e6      	bcs.n	8008eaa <quorem+0xa4>
 8008edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee4:	b922      	cbnz	r2, 8008ef0 <quorem+0xea>
 8008ee6:	3b04      	subs	r3, #4
 8008ee8:	429d      	cmp	r5, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	d30b      	bcc.n	8008f06 <quorem+0x100>
 8008eee:	613c      	str	r4, [r7, #16]
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	b003      	add	sp, #12
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d1cb      	bne.n	8008e9a <quorem+0x94>
 8008f02:	3c01      	subs	r4, #1
 8008f04:	e7c6      	b.n	8008e94 <quorem+0x8e>
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d1ef      	bne.n	8008eee <quorem+0xe8>
 8008f0e:	3c01      	subs	r4, #1
 8008f10:	e7ea      	b.n	8008ee8 <quorem+0xe2>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e7ee      	b.n	8008ef4 <quorem+0xee>
	...

08008f18 <_dtoa_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	69c7      	ldr	r7, [r0, #28]
 8008f1e:	b099      	sub	sp, #100	@ 0x64
 8008f20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f24:	ec55 4b10 	vmov	r4, r5, d0
 8008f28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f2c:	4683      	mov	fp, r0
 8008f2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f32:	b97f      	cbnz	r7, 8008f54 <_dtoa_r+0x3c>
 8008f34:	2010      	movs	r0, #16
 8008f36:	f000 fdfd 	bl	8009b34 <malloc>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f40:	b920      	cbnz	r0, 8008f4c <_dtoa_r+0x34>
 8008f42:	4ba7      	ldr	r3, [pc, #668]	@ (80091e0 <_dtoa_r+0x2c8>)
 8008f44:	21ef      	movs	r1, #239	@ 0xef
 8008f46:	48a7      	ldr	r0, [pc, #668]	@ (80091e4 <_dtoa_r+0x2cc>)
 8008f48:	f001 fc5a 	bl	800a800 <__assert_func>
 8008f4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f50:	6007      	str	r7, [r0, #0]
 8008f52:	60c7      	str	r7, [r0, #12]
 8008f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	b159      	cbz	r1, 8008f74 <_dtoa_r+0x5c>
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	604a      	str	r2, [r1, #4]
 8008f60:	2301      	movs	r3, #1
 8008f62:	4093      	lsls	r3, r2
 8008f64:	608b      	str	r3, [r1, #8]
 8008f66:	4658      	mov	r0, fp
 8008f68:	f000 feda 	bl	8009d20 <_Bfree>
 8008f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	1e2b      	subs	r3, r5, #0
 8008f76:	bfb9      	ittee	lt
 8008f78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f7c:	9303      	strlt	r3, [sp, #12]
 8008f7e:	2300      	movge	r3, #0
 8008f80:	6033      	strge	r3, [r6, #0]
 8008f82:	9f03      	ldr	r7, [sp, #12]
 8008f84:	4b98      	ldr	r3, [pc, #608]	@ (80091e8 <_dtoa_r+0x2d0>)
 8008f86:	bfbc      	itt	lt
 8008f88:	2201      	movlt	r2, #1
 8008f8a:	6032      	strlt	r2, [r6, #0]
 8008f8c:	43bb      	bics	r3, r7
 8008f8e:	d112      	bne.n	8008fb6 <_dtoa_r+0x9e>
 8008f90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f9c:	4323      	orrs	r3, r4
 8008f9e:	f000 854d 	beq.w	8009a3c <_dtoa_r+0xb24>
 8008fa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80091fc <_dtoa_r+0x2e4>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 854f 	beq.w	8009a4c <_dtoa_r+0xb34>
 8008fae:	f10a 0303 	add.w	r3, sl, #3
 8008fb2:	f000 bd49 	b.w	8009a48 <_dtoa_r+0xb30>
 8008fb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	ec51 0b17 	vmov	r0, r1, d7
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008fc6:	f7f7 fd9f 	bl	8000b08 <__aeabi_dcmpeq>
 8008fca:	4680      	mov	r8, r0
 8008fcc:	b158      	cbz	r0, 8008fe6 <_dtoa_r+0xce>
 8008fce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fd6:	b113      	cbz	r3, 8008fde <_dtoa_r+0xc6>
 8008fd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008fda:	4b84      	ldr	r3, [pc, #528]	@ (80091ec <_dtoa_r+0x2d4>)
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009200 <_dtoa_r+0x2e8>
 8008fe2:	f000 bd33 	b.w	8009a4c <_dtoa_r+0xb34>
 8008fe6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008fea:	aa16      	add	r2, sp, #88	@ 0x58
 8008fec:	a917      	add	r1, sp, #92	@ 0x5c
 8008fee:	4658      	mov	r0, fp
 8008ff0:	f001 f980 	bl	800a2f4 <__d2b>
 8008ff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	d077      	beq.n	80090ee <_dtoa_r+0x1d6>
 8008ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009000:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800900c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009018:	4619      	mov	r1, r3
 800901a:	2200      	movs	r2, #0
 800901c:	4b74      	ldr	r3, [pc, #464]	@ (80091f0 <_dtoa_r+0x2d8>)
 800901e:	f7f7 f953 	bl	80002c8 <__aeabi_dsub>
 8009022:	a369      	add	r3, pc, #420	@ (adr r3, 80091c8 <_dtoa_r+0x2b0>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 fb06 	bl	8000638 <__aeabi_dmul>
 800902c:	a368      	add	r3, pc, #416	@ (adr r3, 80091d0 <_dtoa_r+0x2b8>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 f94b 	bl	80002cc <__adddf3>
 8009036:	4604      	mov	r4, r0
 8009038:	4630      	mov	r0, r6
 800903a:	460d      	mov	r5, r1
 800903c:	f7f7 fa92 	bl	8000564 <__aeabi_i2d>
 8009040:	a365      	add	r3, pc, #404	@ (adr r3, 80091d8 <_dtoa_r+0x2c0>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 faf7 	bl	8000638 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4620      	mov	r0, r4
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 f93b 	bl	80002cc <__adddf3>
 8009056:	4604      	mov	r4, r0
 8009058:	460d      	mov	r5, r1
 800905a:	f7f7 fd9d 	bl	8000b98 <__aeabi_d2iz>
 800905e:	2200      	movs	r2, #0
 8009060:	4607      	mov	r7, r0
 8009062:	2300      	movs	r3, #0
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800906c:	b140      	cbz	r0, 8009080 <_dtoa_r+0x168>
 800906e:	4638      	mov	r0, r7
 8009070:	f7f7 fa78 	bl	8000564 <__aeabi_i2d>
 8009074:	4622      	mov	r2, r4
 8009076:	462b      	mov	r3, r5
 8009078:	f7f7 fd46 	bl	8000b08 <__aeabi_dcmpeq>
 800907c:	b900      	cbnz	r0, 8009080 <_dtoa_r+0x168>
 800907e:	3f01      	subs	r7, #1
 8009080:	2f16      	cmp	r7, #22
 8009082:	d851      	bhi.n	8009128 <_dtoa_r+0x210>
 8009084:	4b5b      	ldr	r3, [pc, #364]	@ (80091f4 <_dtoa_r+0x2dc>)
 8009086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009092:	f7f7 fd43 	bl	8000b1c <__aeabi_dcmplt>
 8009096:	2800      	cmp	r0, #0
 8009098:	d048      	beq.n	800912c <_dtoa_r+0x214>
 800909a:	3f01      	subs	r7, #1
 800909c:	2300      	movs	r3, #0
 800909e:	9312      	str	r3, [sp, #72]	@ 0x48
 80090a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090a2:	1b9b      	subs	r3, r3, r6
 80090a4:	1e5a      	subs	r2, r3, #1
 80090a6:	bf44      	itt	mi
 80090a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80090ac:	2300      	movmi	r3, #0
 80090ae:	9208      	str	r2, [sp, #32]
 80090b0:	bf54      	ite	pl
 80090b2:	f04f 0800 	movpl.w	r8, #0
 80090b6:	9308      	strmi	r3, [sp, #32]
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	db39      	blt.n	8009130 <_dtoa_r+0x218>
 80090bc:	9b08      	ldr	r3, [sp, #32]
 80090be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80090c0:	443b      	add	r3, r7
 80090c2:	9308      	str	r3, [sp, #32]
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d864      	bhi.n	8009198 <_dtoa_r+0x280>
 80090ce:	2b05      	cmp	r3, #5
 80090d0:	bfc4      	itt	gt
 80090d2:	3b04      	subgt	r3, #4
 80090d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80090d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d8:	f1a3 0302 	sub.w	r3, r3, #2
 80090dc:	bfcc      	ite	gt
 80090de:	2400      	movgt	r4, #0
 80090e0:	2401      	movle	r4, #1
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d863      	bhi.n	80091ae <_dtoa_r+0x296>
 80090e6:	e8df f003 	tbb	[pc, r3]
 80090ea:	372a      	.short	0x372a
 80090ec:	5535      	.short	0x5535
 80090ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80090f2:	441e      	add	r6, r3
 80090f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	bfc1      	itttt	gt
 80090fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009100:	409f      	lslgt	r7, r3
 8009102:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009106:	fa24 f303 	lsrgt.w	r3, r4, r3
 800910a:	bfd6      	itet	le
 800910c:	f1c3 0320 	rsble	r3, r3, #32
 8009110:	ea47 0003 	orrgt.w	r0, r7, r3
 8009114:	fa04 f003 	lslle.w	r0, r4, r3
 8009118:	f7f7 fa14 	bl	8000544 <__aeabi_ui2d>
 800911c:	2201      	movs	r2, #1
 800911e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009122:	3e01      	subs	r6, #1
 8009124:	9214      	str	r2, [sp, #80]	@ 0x50
 8009126:	e777      	b.n	8009018 <_dtoa_r+0x100>
 8009128:	2301      	movs	r3, #1
 800912a:	e7b8      	b.n	800909e <_dtoa_r+0x186>
 800912c:	9012      	str	r0, [sp, #72]	@ 0x48
 800912e:	e7b7      	b.n	80090a0 <_dtoa_r+0x188>
 8009130:	427b      	negs	r3, r7
 8009132:	930a      	str	r3, [sp, #40]	@ 0x28
 8009134:	2300      	movs	r3, #0
 8009136:	eba8 0807 	sub.w	r8, r8, r7
 800913a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800913c:	e7c4      	b.n	80090c8 <_dtoa_r+0x1b0>
 800913e:	2300      	movs	r3, #0
 8009140:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc35      	bgt.n	80091b4 <_dtoa_r+0x29c>
 8009148:	2301      	movs	r3, #1
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	9307      	str	r3, [sp, #28]
 800914e:	461a      	mov	r2, r3
 8009150:	920e      	str	r2, [sp, #56]	@ 0x38
 8009152:	e00b      	b.n	800916c <_dtoa_r+0x254>
 8009154:	2301      	movs	r3, #1
 8009156:	e7f3      	b.n	8009140 <_dtoa_r+0x228>
 8009158:	2300      	movs	r3, #0
 800915a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800915c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	2b01      	cmp	r3, #1
 8009166:	9307      	str	r3, [sp, #28]
 8009168:	bfb8      	it	lt
 800916a:	2301      	movlt	r3, #1
 800916c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009170:	2100      	movs	r1, #0
 8009172:	2204      	movs	r2, #4
 8009174:	f102 0514 	add.w	r5, r2, #20
 8009178:	429d      	cmp	r5, r3
 800917a:	d91f      	bls.n	80091bc <_dtoa_r+0x2a4>
 800917c:	6041      	str	r1, [r0, #4]
 800917e:	4658      	mov	r0, fp
 8009180:	f000 fd8e 	bl	8009ca0 <_Balloc>
 8009184:	4682      	mov	sl, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	d13c      	bne.n	8009204 <_dtoa_r+0x2ec>
 800918a:	4b1b      	ldr	r3, [pc, #108]	@ (80091f8 <_dtoa_r+0x2e0>)
 800918c:	4602      	mov	r2, r0
 800918e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009192:	e6d8      	b.n	8008f46 <_dtoa_r+0x2e>
 8009194:	2301      	movs	r3, #1
 8009196:	e7e0      	b.n	800915a <_dtoa_r+0x242>
 8009198:	2401      	movs	r4, #1
 800919a:	2300      	movs	r3, #0
 800919c:	9309      	str	r3, [sp, #36]	@ 0x24
 800919e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091a0:	f04f 33ff 	mov.w	r3, #4294967295
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	2200      	movs	r2, #0
 80091aa:	2312      	movs	r3, #18
 80091ac:	e7d0      	b.n	8009150 <_dtoa_r+0x238>
 80091ae:	2301      	movs	r3, #1
 80091b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091b2:	e7f5      	b.n	80091a0 <_dtoa_r+0x288>
 80091b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	9307      	str	r3, [sp, #28]
 80091ba:	e7d7      	b.n	800916c <_dtoa_r+0x254>
 80091bc:	3101      	adds	r1, #1
 80091be:	0052      	lsls	r2, r2, #1
 80091c0:	e7d8      	b.n	8009174 <_dtoa_r+0x25c>
 80091c2:	bf00      	nop
 80091c4:	f3af 8000 	nop.w
 80091c8:	636f4361 	.word	0x636f4361
 80091cc:	3fd287a7 	.word	0x3fd287a7
 80091d0:	8b60c8b3 	.word	0x8b60c8b3
 80091d4:	3fc68a28 	.word	0x3fc68a28
 80091d8:	509f79fb 	.word	0x509f79fb
 80091dc:	3fd34413 	.word	0x3fd34413
 80091e0:	0800bd05 	.word	0x0800bd05
 80091e4:	0800bd1c 	.word	0x0800bd1c
 80091e8:	7ff00000 	.word	0x7ff00000
 80091ec:	0800bcd5 	.word	0x0800bcd5
 80091f0:	3ff80000 	.word	0x3ff80000
 80091f4:	0800be18 	.word	0x0800be18
 80091f8:	0800bd74 	.word	0x0800bd74
 80091fc:	0800bd01 	.word	0x0800bd01
 8009200:	0800bcd4 	.word	0x0800bcd4
 8009204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009208:	6018      	str	r0, [r3, #0]
 800920a:	9b07      	ldr	r3, [sp, #28]
 800920c:	2b0e      	cmp	r3, #14
 800920e:	f200 80a4 	bhi.w	800935a <_dtoa_r+0x442>
 8009212:	2c00      	cmp	r4, #0
 8009214:	f000 80a1 	beq.w	800935a <_dtoa_r+0x442>
 8009218:	2f00      	cmp	r7, #0
 800921a:	dd33      	ble.n	8009284 <_dtoa_r+0x36c>
 800921c:	4bad      	ldr	r3, [pc, #692]	@ (80094d4 <_dtoa_r+0x5bc>)
 800921e:	f007 020f 	and.w	r2, r7, #15
 8009222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009226:	ed93 7b00 	vldr	d7, [r3]
 800922a:	05f8      	lsls	r0, r7, #23
 800922c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009234:	d516      	bpl.n	8009264 <_dtoa_r+0x34c>
 8009236:	4ba8      	ldr	r3, [pc, #672]	@ (80094d8 <_dtoa_r+0x5c0>)
 8009238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800923c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009240:	f7f7 fb24 	bl	800088c <__aeabi_ddiv>
 8009244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009248:	f004 040f 	and.w	r4, r4, #15
 800924c:	2603      	movs	r6, #3
 800924e:	4da2      	ldr	r5, [pc, #648]	@ (80094d8 <_dtoa_r+0x5c0>)
 8009250:	b954      	cbnz	r4, 8009268 <_dtoa_r+0x350>
 8009252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	f7f7 fb17 	bl	800088c <__aeabi_ddiv>
 800925e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009262:	e028      	b.n	80092b6 <_dtoa_r+0x39e>
 8009264:	2602      	movs	r6, #2
 8009266:	e7f2      	b.n	800924e <_dtoa_r+0x336>
 8009268:	07e1      	lsls	r1, r4, #31
 800926a:	d508      	bpl.n	800927e <_dtoa_r+0x366>
 800926c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009274:	f7f7 f9e0 	bl	8000638 <__aeabi_dmul>
 8009278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800927c:	3601      	adds	r6, #1
 800927e:	1064      	asrs	r4, r4, #1
 8009280:	3508      	adds	r5, #8
 8009282:	e7e5      	b.n	8009250 <_dtoa_r+0x338>
 8009284:	f000 80d2 	beq.w	800942c <_dtoa_r+0x514>
 8009288:	427c      	negs	r4, r7
 800928a:	4b92      	ldr	r3, [pc, #584]	@ (80094d4 <_dtoa_r+0x5bc>)
 800928c:	4d92      	ldr	r5, [pc, #584]	@ (80094d8 <_dtoa_r+0x5c0>)
 800928e:	f004 020f 	and.w	r2, r4, #15
 8009292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800929e:	f7f7 f9cb 	bl	8000638 <__aeabi_dmul>
 80092a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a6:	1124      	asrs	r4, r4, #4
 80092a8:	2300      	movs	r3, #0
 80092aa:	2602      	movs	r6, #2
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	f040 80b2 	bne.w	8009416 <_dtoa_r+0x4fe>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1d3      	bne.n	800925e <_dtoa_r+0x346>
 80092b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80b7 	beq.w	8009430 <_dtoa_r+0x518>
 80092c2:	4b86      	ldr	r3, [pc, #536]	@ (80094dc <_dtoa_r+0x5c4>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f7 fc27 	bl	8000b1c <__aeabi_dcmplt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f000 80ae 	beq.w	8009430 <_dtoa_r+0x518>
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 80aa 	beq.w	8009430 <_dtoa_r+0x518>
 80092dc:	9b00      	ldr	r3, [sp, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dd37      	ble.n	8009352 <_dtoa_r+0x43a>
 80092e2:	1e7b      	subs	r3, r7, #1
 80092e4:	9304      	str	r3, [sp, #16]
 80092e6:	4620      	mov	r0, r4
 80092e8:	4b7d      	ldr	r3, [pc, #500]	@ (80094e0 <_dtoa_r+0x5c8>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7f7 f9a3 	bl	8000638 <__aeabi_dmul>
 80092f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092f6:	9c00      	ldr	r4, [sp, #0]
 80092f8:	3601      	adds	r6, #1
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7f7 f932 	bl	8000564 <__aeabi_i2d>
 8009300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009304:	f7f7 f998 	bl	8000638 <__aeabi_dmul>
 8009308:	4b76      	ldr	r3, [pc, #472]	@ (80094e4 <_dtoa_r+0x5cc>)
 800930a:	2200      	movs	r2, #0
 800930c:	f7f6 ffde 	bl	80002cc <__adddf3>
 8009310:	4605      	mov	r5, r0
 8009312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009316:	2c00      	cmp	r4, #0
 8009318:	f040 808d 	bne.w	8009436 <_dtoa_r+0x51e>
 800931c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009320:	4b71      	ldr	r3, [pc, #452]	@ (80094e8 <_dtoa_r+0x5d0>)
 8009322:	2200      	movs	r2, #0
 8009324:	f7f6 ffd0 	bl	80002c8 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009330:	462a      	mov	r2, r5
 8009332:	4633      	mov	r3, r6
 8009334:	f7f7 fc10 	bl	8000b58 <__aeabi_dcmpgt>
 8009338:	2800      	cmp	r0, #0
 800933a:	f040 828b 	bne.w	8009854 <_dtoa_r+0x93c>
 800933e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009342:	462a      	mov	r2, r5
 8009344:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009348:	f7f7 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	f040 8128 	bne.w	80095a2 <_dtoa_r+0x68a>
 8009352:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009356:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800935a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800935c:	2b00      	cmp	r3, #0
 800935e:	f2c0 815a 	blt.w	8009616 <_dtoa_r+0x6fe>
 8009362:	2f0e      	cmp	r7, #14
 8009364:	f300 8157 	bgt.w	8009616 <_dtoa_r+0x6fe>
 8009368:	4b5a      	ldr	r3, [pc, #360]	@ (80094d4 <_dtoa_r+0x5bc>)
 800936a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800936e:	ed93 7b00 	vldr	d7, [r3]
 8009372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	ed8d 7b00 	vstr	d7, [sp]
 800937a:	da03      	bge.n	8009384 <_dtoa_r+0x46c>
 800937c:	9b07      	ldr	r3, [sp, #28]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f340 8101 	ble.w	8009586 <_dtoa_r+0x66e>
 8009384:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009388:	4656      	mov	r6, sl
 800938a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	f7f7 fa7b 	bl	800088c <__aeabi_ddiv>
 8009396:	f7f7 fbff 	bl	8000b98 <__aeabi_d2iz>
 800939a:	4680      	mov	r8, r0
 800939c:	f7f7 f8e2 	bl	8000564 <__aeabi_i2d>
 80093a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093a4:	f7f7 f948 	bl	8000638 <__aeabi_dmul>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093b4:	f7f6 ff88 	bl	80002c8 <__aeabi_dsub>
 80093b8:	f806 4b01 	strb.w	r4, [r6], #1
 80093bc:	9d07      	ldr	r5, [sp, #28]
 80093be:	eba6 040a 	sub.w	r4, r6, sl
 80093c2:	42a5      	cmp	r5, r4
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	f040 8117 	bne.w	80095fa <_dtoa_r+0x6e2>
 80093cc:	f7f6 ff7e 	bl	80002cc <__adddf3>
 80093d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	f7f7 fbbe 	bl	8000b58 <__aeabi_dcmpgt>
 80093dc:	2800      	cmp	r0, #0
 80093de:	f040 80f9 	bne.w	80095d4 <_dtoa_r+0x6bc>
 80093e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f7 fb8d 	bl	8000b08 <__aeabi_dcmpeq>
 80093ee:	b118      	cbz	r0, 80093f8 <_dtoa_r+0x4e0>
 80093f0:	f018 0f01 	tst.w	r8, #1
 80093f4:	f040 80ee 	bne.w	80095d4 <_dtoa_r+0x6bc>
 80093f8:	4649      	mov	r1, r9
 80093fa:	4658      	mov	r0, fp
 80093fc:	f000 fc90 	bl	8009d20 <_Bfree>
 8009400:	2300      	movs	r3, #0
 8009402:	7033      	strb	r3, [r6, #0]
 8009404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009406:	3701      	adds	r7, #1
 8009408:	601f      	str	r7, [r3, #0]
 800940a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 831d 	beq.w	8009a4c <_dtoa_r+0xb34>
 8009412:	601e      	str	r6, [r3, #0]
 8009414:	e31a      	b.n	8009a4c <_dtoa_r+0xb34>
 8009416:	07e2      	lsls	r2, r4, #31
 8009418:	d505      	bpl.n	8009426 <_dtoa_r+0x50e>
 800941a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800941e:	f7f7 f90b 	bl	8000638 <__aeabi_dmul>
 8009422:	3601      	adds	r6, #1
 8009424:	2301      	movs	r3, #1
 8009426:	1064      	asrs	r4, r4, #1
 8009428:	3508      	adds	r5, #8
 800942a:	e73f      	b.n	80092ac <_dtoa_r+0x394>
 800942c:	2602      	movs	r6, #2
 800942e:	e742      	b.n	80092b6 <_dtoa_r+0x39e>
 8009430:	9c07      	ldr	r4, [sp, #28]
 8009432:	9704      	str	r7, [sp, #16]
 8009434:	e761      	b.n	80092fa <_dtoa_r+0x3e2>
 8009436:	4b27      	ldr	r3, [pc, #156]	@ (80094d4 <_dtoa_r+0x5bc>)
 8009438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800943a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800943e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009442:	4454      	add	r4, sl
 8009444:	2900      	cmp	r1, #0
 8009446:	d053      	beq.n	80094f0 <_dtoa_r+0x5d8>
 8009448:	4928      	ldr	r1, [pc, #160]	@ (80094ec <_dtoa_r+0x5d4>)
 800944a:	2000      	movs	r0, #0
 800944c:	f7f7 fa1e 	bl	800088c <__aeabi_ddiv>
 8009450:	4633      	mov	r3, r6
 8009452:	462a      	mov	r2, r5
 8009454:	f7f6 ff38 	bl	80002c8 <__aeabi_dsub>
 8009458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800945c:	4656      	mov	r6, sl
 800945e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009462:	f7f7 fb99 	bl	8000b98 <__aeabi_d2iz>
 8009466:	4605      	mov	r5, r0
 8009468:	f7f7 f87c 	bl	8000564 <__aeabi_i2d>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009474:	f7f6 ff28 	bl	80002c8 <__aeabi_dsub>
 8009478:	3530      	adds	r5, #48	@ 0x30
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009482:	f806 5b01 	strb.w	r5, [r6], #1
 8009486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800948a:	f7f7 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d171      	bne.n	8009576 <_dtoa_r+0x65e>
 8009492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009496:	4911      	ldr	r1, [pc, #68]	@ (80094dc <_dtoa_r+0x5c4>)
 8009498:	2000      	movs	r0, #0
 800949a:	f7f6 ff15 	bl	80002c8 <__aeabi_dsub>
 800949e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094a2:	f7f7 fb3b 	bl	8000b1c <__aeabi_dcmplt>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f040 8095 	bne.w	80095d6 <_dtoa_r+0x6be>
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	f43f af50 	beq.w	8009352 <_dtoa_r+0x43a>
 80094b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094b6:	4b0a      	ldr	r3, [pc, #40]	@ (80094e0 <_dtoa_r+0x5c8>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8bd 	bl	8000638 <__aeabi_dmul>
 80094be:	4b08      	ldr	r3, [pc, #32]	@ (80094e0 <_dtoa_r+0x5c8>)
 80094c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094c4:	2200      	movs	r2, #0
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	f7f7 f8b5 	bl	8000638 <__aeabi_dmul>
 80094ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d2:	e7c4      	b.n	800945e <_dtoa_r+0x546>
 80094d4:	0800be18 	.word	0x0800be18
 80094d8:	0800bdf0 	.word	0x0800bdf0
 80094dc:	3ff00000 	.word	0x3ff00000
 80094e0:	40240000 	.word	0x40240000
 80094e4:	401c0000 	.word	0x401c0000
 80094e8:	40140000 	.word	0x40140000
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	f7f7 f8a0 	bl	8000638 <__aeabi_dmul>
 80094f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80094fe:	4656      	mov	r6, sl
 8009500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009504:	f7f7 fb48 	bl	8000b98 <__aeabi_d2iz>
 8009508:	4605      	mov	r5, r0
 800950a:	f7f7 f82b 	bl	8000564 <__aeabi_i2d>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009516:	f7f6 fed7 	bl	80002c8 <__aeabi_dsub>
 800951a:	3530      	adds	r5, #48	@ 0x30
 800951c:	f806 5b01 	strb.w	r5, [r6], #1
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	42a6      	cmp	r6, r4
 8009526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800952a:	f04f 0200 	mov.w	r2, #0
 800952e:	d124      	bne.n	800957a <_dtoa_r+0x662>
 8009530:	4bac      	ldr	r3, [pc, #688]	@ (80097e4 <_dtoa_r+0x8cc>)
 8009532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009536:	f7f6 fec9 	bl	80002cc <__adddf3>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009542:	f7f7 fb09 	bl	8000b58 <__aeabi_dcmpgt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d145      	bne.n	80095d6 <_dtoa_r+0x6be>
 800954a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800954e:	49a5      	ldr	r1, [pc, #660]	@ (80097e4 <_dtoa_r+0x8cc>)
 8009550:	2000      	movs	r0, #0
 8009552:	f7f6 feb9 	bl	80002c8 <__aeabi_dsub>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800955e:	f7f7 fadd 	bl	8000b1c <__aeabi_dcmplt>
 8009562:	2800      	cmp	r0, #0
 8009564:	f43f aef5 	beq.w	8009352 <_dtoa_r+0x43a>
 8009568:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800956a:	1e73      	subs	r3, r6, #1
 800956c:	9315      	str	r3, [sp, #84]	@ 0x54
 800956e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009572:	2b30      	cmp	r3, #48	@ 0x30
 8009574:	d0f8      	beq.n	8009568 <_dtoa_r+0x650>
 8009576:	9f04      	ldr	r7, [sp, #16]
 8009578:	e73e      	b.n	80093f8 <_dtoa_r+0x4e0>
 800957a:	4b9b      	ldr	r3, [pc, #620]	@ (80097e8 <_dtoa_r+0x8d0>)
 800957c:	f7f7 f85c 	bl	8000638 <__aeabi_dmul>
 8009580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009584:	e7bc      	b.n	8009500 <_dtoa_r+0x5e8>
 8009586:	d10c      	bne.n	80095a2 <_dtoa_r+0x68a>
 8009588:	4b98      	ldr	r3, [pc, #608]	@ (80097ec <_dtoa_r+0x8d4>)
 800958a:	2200      	movs	r2, #0
 800958c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009590:	f7f7 f852 	bl	8000638 <__aeabi_dmul>
 8009594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009598:	f7f7 fad4 	bl	8000b44 <__aeabi_dcmpge>
 800959c:	2800      	cmp	r0, #0
 800959e:	f000 8157 	beq.w	8009850 <_dtoa_r+0x938>
 80095a2:	2400      	movs	r4, #0
 80095a4:	4625      	mov	r5, r4
 80095a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095a8:	43db      	mvns	r3, r3
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	4656      	mov	r6, sl
 80095ae:	2700      	movs	r7, #0
 80095b0:	4621      	mov	r1, r4
 80095b2:	4658      	mov	r0, fp
 80095b4:	f000 fbb4 	bl	8009d20 <_Bfree>
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	d0dc      	beq.n	8009576 <_dtoa_r+0x65e>
 80095bc:	b12f      	cbz	r7, 80095ca <_dtoa_r+0x6b2>
 80095be:	42af      	cmp	r7, r5
 80095c0:	d003      	beq.n	80095ca <_dtoa_r+0x6b2>
 80095c2:	4639      	mov	r1, r7
 80095c4:	4658      	mov	r0, fp
 80095c6:	f000 fbab 	bl	8009d20 <_Bfree>
 80095ca:	4629      	mov	r1, r5
 80095cc:	4658      	mov	r0, fp
 80095ce:	f000 fba7 	bl	8009d20 <_Bfree>
 80095d2:	e7d0      	b.n	8009576 <_dtoa_r+0x65e>
 80095d4:	9704      	str	r7, [sp, #16]
 80095d6:	4633      	mov	r3, r6
 80095d8:	461e      	mov	r6, r3
 80095da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095de:	2a39      	cmp	r2, #57	@ 0x39
 80095e0:	d107      	bne.n	80095f2 <_dtoa_r+0x6da>
 80095e2:	459a      	cmp	sl, r3
 80095e4:	d1f8      	bne.n	80095d8 <_dtoa_r+0x6c0>
 80095e6:	9a04      	ldr	r2, [sp, #16]
 80095e8:	3201      	adds	r2, #1
 80095ea:	9204      	str	r2, [sp, #16]
 80095ec:	2230      	movs	r2, #48	@ 0x30
 80095ee:	f88a 2000 	strb.w	r2, [sl]
 80095f2:	781a      	ldrb	r2, [r3, #0]
 80095f4:	3201      	adds	r2, #1
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	e7bd      	b.n	8009576 <_dtoa_r+0x65e>
 80095fa:	4b7b      	ldr	r3, [pc, #492]	@ (80097e8 <_dtoa_r+0x8d0>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	f7f7 f81b 	bl	8000638 <__aeabi_dmul>
 8009602:	2200      	movs	r2, #0
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	460d      	mov	r5, r1
 800960a:	f7f7 fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 800960e:	2800      	cmp	r0, #0
 8009610:	f43f aebb 	beq.w	800938a <_dtoa_r+0x472>
 8009614:	e6f0      	b.n	80093f8 <_dtoa_r+0x4e0>
 8009616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009618:	2a00      	cmp	r2, #0
 800961a:	f000 80db 	beq.w	80097d4 <_dtoa_r+0x8bc>
 800961e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009620:	2a01      	cmp	r2, #1
 8009622:	f300 80bf 	bgt.w	80097a4 <_dtoa_r+0x88c>
 8009626:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009628:	2a00      	cmp	r2, #0
 800962a:	f000 80b7 	beq.w	800979c <_dtoa_r+0x884>
 800962e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009632:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009634:	4646      	mov	r6, r8
 8009636:	9a08      	ldr	r2, [sp, #32]
 8009638:	2101      	movs	r1, #1
 800963a:	441a      	add	r2, r3
 800963c:	4658      	mov	r0, fp
 800963e:	4498      	add	r8, r3
 8009640:	9208      	str	r2, [sp, #32]
 8009642:	f000 fc21 	bl	8009e88 <__i2b>
 8009646:	4605      	mov	r5, r0
 8009648:	b15e      	cbz	r6, 8009662 <_dtoa_r+0x74a>
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd08      	ble.n	8009662 <_dtoa_r+0x74a>
 8009650:	42b3      	cmp	r3, r6
 8009652:	9a08      	ldr	r2, [sp, #32]
 8009654:	bfa8      	it	ge
 8009656:	4633      	movge	r3, r6
 8009658:	eba8 0803 	sub.w	r8, r8, r3
 800965c:	1af6      	subs	r6, r6, r3
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	9308      	str	r3, [sp, #32]
 8009662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009664:	b1f3      	cbz	r3, 80096a4 <_dtoa_r+0x78c>
 8009666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80b7 	beq.w	80097dc <_dtoa_r+0x8c4>
 800966e:	b18c      	cbz	r4, 8009694 <_dtoa_r+0x77c>
 8009670:	4629      	mov	r1, r5
 8009672:	4622      	mov	r2, r4
 8009674:	4658      	mov	r0, fp
 8009676:	f000 fcc7 	bl	800a008 <__pow5mult>
 800967a:	464a      	mov	r2, r9
 800967c:	4601      	mov	r1, r0
 800967e:	4605      	mov	r5, r0
 8009680:	4658      	mov	r0, fp
 8009682:	f000 fc17 	bl	8009eb4 <__multiply>
 8009686:	4649      	mov	r1, r9
 8009688:	9004      	str	r0, [sp, #16]
 800968a:	4658      	mov	r0, fp
 800968c:	f000 fb48 	bl	8009d20 <_Bfree>
 8009690:	9b04      	ldr	r3, [sp, #16]
 8009692:	4699      	mov	r9, r3
 8009694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009696:	1b1a      	subs	r2, r3, r4
 8009698:	d004      	beq.n	80096a4 <_dtoa_r+0x78c>
 800969a:	4649      	mov	r1, r9
 800969c:	4658      	mov	r0, fp
 800969e:	f000 fcb3 	bl	800a008 <__pow5mult>
 80096a2:	4681      	mov	r9, r0
 80096a4:	2101      	movs	r1, #1
 80096a6:	4658      	mov	r0, fp
 80096a8:	f000 fbee 	bl	8009e88 <__i2b>
 80096ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ae:	4604      	mov	r4, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 81cf 	beq.w	8009a54 <_dtoa_r+0xb3c>
 80096b6:	461a      	mov	r2, r3
 80096b8:	4601      	mov	r1, r0
 80096ba:	4658      	mov	r0, fp
 80096bc:	f000 fca4 	bl	800a008 <__pow5mult>
 80096c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	4604      	mov	r4, r0
 80096c6:	f300 8095 	bgt.w	80097f4 <_dtoa_r+0x8dc>
 80096ca:	9b02      	ldr	r3, [sp, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f040 8087 	bne.w	80097e0 <_dtoa_r+0x8c8>
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f040 8089 	bne.w	80097f0 <_dtoa_r+0x8d8>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096e4:	0d1b      	lsrs	r3, r3, #20
 80096e6:	051b      	lsls	r3, r3, #20
 80096e8:	b12b      	cbz	r3, 80096f6 <_dtoa_r+0x7de>
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	3301      	adds	r3, #1
 80096ee:	9308      	str	r3, [sp, #32]
 80096f0:	f108 0801 	add.w	r8, r8, #1
 80096f4:	2301      	movs	r3, #1
 80096f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 81b0 	beq.w	8009a60 <_dtoa_r+0xb48>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009706:	6918      	ldr	r0, [r3, #16]
 8009708:	f000 fb72 	bl	8009df0 <__hi0bits>
 800970c:	f1c0 0020 	rsb	r0, r0, #32
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	4418      	add	r0, r3
 8009714:	f010 001f 	ands.w	r0, r0, #31
 8009718:	d077      	beq.n	800980a <_dtoa_r+0x8f2>
 800971a:	f1c0 0320 	rsb	r3, r0, #32
 800971e:	2b04      	cmp	r3, #4
 8009720:	dd6b      	ble.n	80097fa <_dtoa_r+0x8e2>
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	f1c0 001c 	rsb	r0, r0, #28
 8009728:	4403      	add	r3, r0
 800972a:	4480      	add	r8, r0
 800972c:	4406      	add	r6, r0
 800972e:	9308      	str	r3, [sp, #32]
 8009730:	f1b8 0f00 	cmp.w	r8, #0
 8009734:	dd05      	ble.n	8009742 <_dtoa_r+0x82a>
 8009736:	4649      	mov	r1, r9
 8009738:	4642      	mov	r2, r8
 800973a:	4658      	mov	r0, fp
 800973c:	f000 fcbe 	bl	800a0bc <__lshift>
 8009740:	4681      	mov	r9, r0
 8009742:	9b08      	ldr	r3, [sp, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd05      	ble.n	8009754 <_dtoa_r+0x83c>
 8009748:	4621      	mov	r1, r4
 800974a:	461a      	mov	r2, r3
 800974c:	4658      	mov	r0, fp
 800974e:	f000 fcb5 	bl	800a0bc <__lshift>
 8009752:	4604      	mov	r4, r0
 8009754:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009756:	2b00      	cmp	r3, #0
 8009758:	d059      	beq.n	800980e <_dtoa_r+0x8f6>
 800975a:	4621      	mov	r1, r4
 800975c:	4648      	mov	r0, r9
 800975e:	f000 fd19 	bl	800a194 <__mcmp>
 8009762:	2800      	cmp	r0, #0
 8009764:	da53      	bge.n	800980e <_dtoa_r+0x8f6>
 8009766:	1e7b      	subs	r3, r7, #1
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	4649      	mov	r1, r9
 800976c:	2300      	movs	r3, #0
 800976e:	220a      	movs	r2, #10
 8009770:	4658      	mov	r0, fp
 8009772:	f000 faf7 	bl	8009d64 <__multadd>
 8009776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009778:	4681      	mov	r9, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8172 	beq.w	8009a64 <_dtoa_r+0xb4c>
 8009780:	2300      	movs	r3, #0
 8009782:	4629      	mov	r1, r5
 8009784:	220a      	movs	r2, #10
 8009786:	4658      	mov	r0, fp
 8009788:	f000 faec 	bl	8009d64 <__multadd>
 800978c:	9b00      	ldr	r3, [sp, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	4605      	mov	r5, r0
 8009792:	dc67      	bgt.n	8009864 <_dtoa_r+0x94c>
 8009794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009796:	2b02      	cmp	r3, #2
 8009798:	dc41      	bgt.n	800981e <_dtoa_r+0x906>
 800979a:	e063      	b.n	8009864 <_dtoa_r+0x94c>
 800979c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800979e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097a2:	e746      	b.n	8009632 <_dtoa_r+0x71a>
 80097a4:	9b07      	ldr	r3, [sp, #28]
 80097a6:	1e5c      	subs	r4, r3, #1
 80097a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	bfbf      	itttt	lt
 80097ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80097b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80097b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80097b4:	1ae3      	sublt	r3, r4, r3
 80097b6:	bfb4      	ite	lt
 80097b8:	18d2      	addlt	r2, r2, r3
 80097ba:	1b1c      	subge	r4, r3, r4
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	bfbc      	itt	lt
 80097c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80097c2:	2400      	movlt	r4, #0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	bfb5      	itete	lt
 80097c8:	eba8 0603 	sublt.w	r6, r8, r3
 80097cc:	9b07      	ldrge	r3, [sp, #28]
 80097ce:	2300      	movlt	r3, #0
 80097d0:	4646      	movge	r6, r8
 80097d2:	e730      	b.n	8009636 <_dtoa_r+0x71e>
 80097d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80097d8:	4646      	mov	r6, r8
 80097da:	e735      	b.n	8009648 <_dtoa_r+0x730>
 80097dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097de:	e75c      	b.n	800969a <_dtoa_r+0x782>
 80097e0:	2300      	movs	r3, #0
 80097e2:	e788      	b.n	80096f6 <_dtoa_r+0x7de>
 80097e4:	3fe00000 	.word	0x3fe00000
 80097e8:	40240000 	.word	0x40240000
 80097ec:	40140000 	.word	0x40140000
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	e780      	b.n	80096f6 <_dtoa_r+0x7de>
 80097f4:	2300      	movs	r3, #0
 80097f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f8:	e782      	b.n	8009700 <_dtoa_r+0x7e8>
 80097fa:	d099      	beq.n	8009730 <_dtoa_r+0x818>
 80097fc:	9a08      	ldr	r2, [sp, #32]
 80097fe:	331c      	adds	r3, #28
 8009800:	441a      	add	r2, r3
 8009802:	4498      	add	r8, r3
 8009804:	441e      	add	r6, r3
 8009806:	9208      	str	r2, [sp, #32]
 8009808:	e792      	b.n	8009730 <_dtoa_r+0x818>
 800980a:	4603      	mov	r3, r0
 800980c:	e7f6      	b.n	80097fc <_dtoa_r+0x8e4>
 800980e:	9b07      	ldr	r3, [sp, #28]
 8009810:	9704      	str	r7, [sp, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	dc20      	bgt.n	8009858 <_dtoa_r+0x940>
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981a:	2b02      	cmp	r3, #2
 800981c:	dd1e      	ble.n	800985c <_dtoa_r+0x944>
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	f47f aec0 	bne.w	80095a6 <_dtoa_r+0x68e>
 8009826:	4621      	mov	r1, r4
 8009828:	2205      	movs	r2, #5
 800982a:	4658      	mov	r0, fp
 800982c:	f000 fa9a 	bl	8009d64 <__multadd>
 8009830:	4601      	mov	r1, r0
 8009832:	4604      	mov	r4, r0
 8009834:	4648      	mov	r0, r9
 8009836:	f000 fcad 	bl	800a194 <__mcmp>
 800983a:	2800      	cmp	r0, #0
 800983c:	f77f aeb3 	ble.w	80095a6 <_dtoa_r+0x68e>
 8009840:	4656      	mov	r6, sl
 8009842:	2331      	movs	r3, #49	@ 0x31
 8009844:	f806 3b01 	strb.w	r3, [r6], #1
 8009848:	9b04      	ldr	r3, [sp, #16]
 800984a:	3301      	adds	r3, #1
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	e6ae      	b.n	80095ae <_dtoa_r+0x696>
 8009850:	9c07      	ldr	r4, [sp, #28]
 8009852:	9704      	str	r7, [sp, #16]
 8009854:	4625      	mov	r5, r4
 8009856:	e7f3      	b.n	8009840 <_dtoa_r+0x928>
 8009858:	9b07      	ldr	r3, [sp, #28]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 8104 	beq.w	8009a6c <_dtoa_r+0xb54>
 8009864:	2e00      	cmp	r6, #0
 8009866:	dd05      	ble.n	8009874 <_dtoa_r+0x95c>
 8009868:	4629      	mov	r1, r5
 800986a:	4632      	mov	r2, r6
 800986c:	4658      	mov	r0, fp
 800986e:	f000 fc25 	bl	800a0bc <__lshift>
 8009872:	4605      	mov	r5, r0
 8009874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009876:	2b00      	cmp	r3, #0
 8009878:	d05a      	beq.n	8009930 <_dtoa_r+0xa18>
 800987a:	6869      	ldr	r1, [r5, #4]
 800987c:	4658      	mov	r0, fp
 800987e:	f000 fa0f 	bl	8009ca0 <_Balloc>
 8009882:	4606      	mov	r6, r0
 8009884:	b928      	cbnz	r0, 8009892 <_dtoa_r+0x97a>
 8009886:	4b84      	ldr	r3, [pc, #528]	@ (8009a98 <_dtoa_r+0xb80>)
 8009888:	4602      	mov	r2, r0
 800988a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800988e:	f7ff bb5a 	b.w	8008f46 <_dtoa_r+0x2e>
 8009892:	692a      	ldr	r2, [r5, #16]
 8009894:	3202      	adds	r2, #2
 8009896:	0092      	lsls	r2, r2, #2
 8009898:	f105 010c 	add.w	r1, r5, #12
 800989c:	300c      	adds	r0, #12
 800989e:	f7ff faa4 	bl	8008dea <memcpy>
 80098a2:	2201      	movs	r2, #1
 80098a4:	4631      	mov	r1, r6
 80098a6:	4658      	mov	r0, fp
 80098a8:	f000 fc08 	bl	800a0bc <__lshift>
 80098ac:	f10a 0301 	add.w	r3, sl, #1
 80098b0:	9307      	str	r3, [sp, #28]
 80098b2:	9b00      	ldr	r3, [sp, #0]
 80098b4:	4453      	add	r3, sl
 80098b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	462f      	mov	r7, r5
 80098c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c2:	4605      	mov	r5, r0
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	4621      	mov	r1, r4
 80098c8:	3b01      	subs	r3, #1
 80098ca:	4648      	mov	r0, r9
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	f7ff fa9a 	bl	8008e06 <quorem>
 80098d2:	4639      	mov	r1, r7
 80098d4:	9002      	str	r0, [sp, #8]
 80098d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098da:	4648      	mov	r0, r9
 80098dc:	f000 fc5a 	bl	800a194 <__mcmp>
 80098e0:	462a      	mov	r2, r5
 80098e2:	9008      	str	r0, [sp, #32]
 80098e4:	4621      	mov	r1, r4
 80098e6:	4658      	mov	r0, fp
 80098e8:	f000 fc70 	bl	800a1cc <__mdiff>
 80098ec:	68c2      	ldr	r2, [r0, #12]
 80098ee:	4606      	mov	r6, r0
 80098f0:	bb02      	cbnz	r2, 8009934 <_dtoa_r+0xa1c>
 80098f2:	4601      	mov	r1, r0
 80098f4:	4648      	mov	r0, r9
 80098f6:	f000 fc4d 	bl	800a194 <__mcmp>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4631      	mov	r1, r6
 80098fe:	4658      	mov	r0, fp
 8009900:	920e      	str	r2, [sp, #56]	@ 0x38
 8009902:	f000 fa0d 	bl	8009d20 <_Bfree>
 8009906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800990a:	9e07      	ldr	r6, [sp, #28]
 800990c:	ea43 0102 	orr.w	r1, r3, r2
 8009910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009912:	4319      	orrs	r1, r3
 8009914:	d110      	bne.n	8009938 <_dtoa_r+0xa20>
 8009916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800991a:	d029      	beq.n	8009970 <_dtoa_r+0xa58>
 800991c:	9b08      	ldr	r3, [sp, #32]
 800991e:	2b00      	cmp	r3, #0
 8009920:	dd02      	ble.n	8009928 <_dtoa_r+0xa10>
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009928:	9b00      	ldr	r3, [sp, #0]
 800992a:	f883 8000 	strb.w	r8, [r3]
 800992e:	e63f      	b.n	80095b0 <_dtoa_r+0x698>
 8009930:	4628      	mov	r0, r5
 8009932:	e7bb      	b.n	80098ac <_dtoa_r+0x994>
 8009934:	2201      	movs	r2, #1
 8009936:	e7e1      	b.n	80098fc <_dtoa_r+0x9e4>
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	db04      	blt.n	8009948 <_dtoa_r+0xa30>
 800993e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009940:	430b      	orrs	r3, r1
 8009942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009944:	430b      	orrs	r3, r1
 8009946:	d120      	bne.n	800998a <_dtoa_r+0xa72>
 8009948:	2a00      	cmp	r2, #0
 800994a:	dded      	ble.n	8009928 <_dtoa_r+0xa10>
 800994c:	4649      	mov	r1, r9
 800994e:	2201      	movs	r2, #1
 8009950:	4658      	mov	r0, fp
 8009952:	f000 fbb3 	bl	800a0bc <__lshift>
 8009956:	4621      	mov	r1, r4
 8009958:	4681      	mov	r9, r0
 800995a:	f000 fc1b 	bl	800a194 <__mcmp>
 800995e:	2800      	cmp	r0, #0
 8009960:	dc03      	bgt.n	800996a <_dtoa_r+0xa52>
 8009962:	d1e1      	bne.n	8009928 <_dtoa_r+0xa10>
 8009964:	f018 0f01 	tst.w	r8, #1
 8009968:	d0de      	beq.n	8009928 <_dtoa_r+0xa10>
 800996a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800996e:	d1d8      	bne.n	8009922 <_dtoa_r+0xa0a>
 8009970:	9a00      	ldr	r2, [sp, #0]
 8009972:	2339      	movs	r3, #57	@ 0x39
 8009974:	7013      	strb	r3, [r2, #0]
 8009976:	4633      	mov	r3, r6
 8009978:	461e      	mov	r6, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009980:	2a39      	cmp	r2, #57	@ 0x39
 8009982:	d052      	beq.n	8009a2a <_dtoa_r+0xb12>
 8009984:	3201      	adds	r2, #1
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	e612      	b.n	80095b0 <_dtoa_r+0x698>
 800998a:	2a00      	cmp	r2, #0
 800998c:	dd07      	ble.n	800999e <_dtoa_r+0xa86>
 800998e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009992:	d0ed      	beq.n	8009970 <_dtoa_r+0xa58>
 8009994:	9a00      	ldr	r2, [sp, #0]
 8009996:	f108 0301 	add.w	r3, r8, #1
 800999a:	7013      	strb	r3, [r2, #0]
 800999c:	e608      	b.n	80095b0 <_dtoa_r+0x698>
 800999e:	9b07      	ldr	r3, [sp, #28]
 80099a0:	9a07      	ldr	r2, [sp, #28]
 80099a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80099a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d028      	beq.n	80099fe <_dtoa_r+0xae6>
 80099ac:	4649      	mov	r1, r9
 80099ae:	2300      	movs	r3, #0
 80099b0:	220a      	movs	r2, #10
 80099b2:	4658      	mov	r0, fp
 80099b4:	f000 f9d6 	bl	8009d64 <__multadd>
 80099b8:	42af      	cmp	r7, r5
 80099ba:	4681      	mov	r9, r0
 80099bc:	f04f 0300 	mov.w	r3, #0
 80099c0:	f04f 020a 	mov.w	r2, #10
 80099c4:	4639      	mov	r1, r7
 80099c6:	4658      	mov	r0, fp
 80099c8:	d107      	bne.n	80099da <_dtoa_r+0xac2>
 80099ca:	f000 f9cb 	bl	8009d64 <__multadd>
 80099ce:	4607      	mov	r7, r0
 80099d0:	4605      	mov	r5, r0
 80099d2:	9b07      	ldr	r3, [sp, #28]
 80099d4:	3301      	adds	r3, #1
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	e774      	b.n	80098c4 <_dtoa_r+0x9ac>
 80099da:	f000 f9c3 	bl	8009d64 <__multadd>
 80099de:	4629      	mov	r1, r5
 80099e0:	4607      	mov	r7, r0
 80099e2:	2300      	movs	r3, #0
 80099e4:	220a      	movs	r2, #10
 80099e6:	4658      	mov	r0, fp
 80099e8:	f000 f9bc 	bl	8009d64 <__multadd>
 80099ec:	4605      	mov	r5, r0
 80099ee:	e7f0      	b.n	80099d2 <_dtoa_r+0xaba>
 80099f0:	9b00      	ldr	r3, [sp, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfcc      	ite	gt
 80099f6:	461e      	movgt	r6, r3
 80099f8:	2601      	movle	r6, #1
 80099fa:	4456      	add	r6, sl
 80099fc:	2700      	movs	r7, #0
 80099fe:	4649      	mov	r1, r9
 8009a00:	2201      	movs	r2, #1
 8009a02:	4658      	mov	r0, fp
 8009a04:	f000 fb5a 	bl	800a0bc <__lshift>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4681      	mov	r9, r0
 8009a0c:	f000 fbc2 	bl	800a194 <__mcmp>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	dcb0      	bgt.n	8009976 <_dtoa_r+0xa5e>
 8009a14:	d102      	bne.n	8009a1c <_dtoa_r+0xb04>
 8009a16:	f018 0f01 	tst.w	r8, #1
 8009a1a:	d1ac      	bne.n	8009976 <_dtoa_r+0xa5e>
 8009a1c:	4633      	mov	r3, r6
 8009a1e:	461e      	mov	r6, r3
 8009a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a24:	2a30      	cmp	r2, #48	@ 0x30
 8009a26:	d0fa      	beq.n	8009a1e <_dtoa_r+0xb06>
 8009a28:	e5c2      	b.n	80095b0 <_dtoa_r+0x698>
 8009a2a:	459a      	cmp	sl, r3
 8009a2c:	d1a4      	bne.n	8009978 <_dtoa_r+0xa60>
 8009a2e:	9b04      	ldr	r3, [sp, #16]
 8009a30:	3301      	adds	r3, #1
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	2331      	movs	r3, #49	@ 0x31
 8009a36:	f88a 3000 	strb.w	r3, [sl]
 8009a3a:	e5b9      	b.n	80095b0 <_dtoa_r+0x698>
 8009a3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a9c <_dtoa_r+0xb84>
 8009a42:	b11b      	cbz	r3, 8009a4c <_dtoa_r+0xb34>
 8009a44:	f10a 0308 	add.w	r3, sl, #8
 8009a48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	4650      	mov	r0, sl
 8009a4e:	b019      	add	sp, #100	@ 0x64
 8009a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	f77f ae37 	ble.w	80096ca <_dtoa_r+0x7b2>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a60:	2001      	movs	r0, #1
 8009a62:	e655      	b.n	8009710 <_dtoa_r+0x7f8>
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f77f aed6 	ble.w	8009818 <_dtoa_r+0x900>
 8009a6c:	4656      	mov	r6, sl
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4648      	mov	r0, r9
 8009a72:	f7ff f9c8 	bl	8008e06 <quorem>
 8009a76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a7a:	f806 8b01 	strb.w	r8, [r6], #1
 8009a7e:	9b00      	ldr	r3, [sp, #0]
 8009a80:	eba6 020a 	sub.w	r2, r6, sl
 8009a84:	4293      	cmp	r3, r2
 8009a86:	ddb3      	ble.n	80099f0 <_dtoa_r+0xad8>
 8009a88:	4649      	mov	r1, r9
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	4658      	mov	r0, fp
 8009a90:	f000 f968 	bl	8009d64 <__multadd>
 8009a94:	4681      	mov	r9, r0
 8009a96:	e7ea      	b.n	8009a6e <_dtoa_r+0xb56>
 8009a98:	0800bd74 	.word	0x0800bd74
 8009a9c:	0800bcf8 	.word	0x0800bcf8

08009aa0 <_free_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	d041      	beq.n	8009b2c <_free_r+0x8c>
 8009aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aac:	1f0c      	subs	r4, r1, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfb8      	it	lt
 8009ab2:	18e4      	addlt	r4, r4, r3
 8009ab4:	f000 f8e8 	bl	8009c88 <__malloc_lock>
 8009ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b30 <_free_r+0x90>)
 8009aba:	6813      	ldr	r3, [r2, #0]
 8009abc:	b933      	cbnz	r3, 8009acc <_free_r+0x2c>
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	6014      	str	r4, [r2, #0]
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac8:	f000 b8e4 	b.w	8009c94 <__malloc_unlock>
 8009acc:	42a3      	cmp	r3, r4
 8009ace:	d908      	bls.n	8009ae2 <_free_r+0x42>
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	1821      	adds	r1, r4, r0
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	bf01      	itttt	eq
 8009ad8:	6819      	ldreq	r1, [r3, #0]
 8009ada:	685b      	ldreq	r3, [r3, #4]
 8009adc:	1809      	addeq	r1, r1, r0
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	e7ed      	b.n	8009abe <_free_r+0x1e>
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	b10b      	cbz	r3, 8009aec <_free_r+0x4c>
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	d9fa      	bls.n	8009ae2 <_free_r+0x42>
 8009aec:	6811      	ldr	r1, [r2, #0]
 8009aee:	1850      	adds	r0, r2, r1
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d10b      	bne.n	8009b0c <_free_r+0x6c>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	4401      	add	r1, r0
 8009af8:	1850      	adds	r0, r2, r1
 8009afa:	4283      	cmp	r3, r0
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	d1e0      	bne.n	8009ac2 <_free_r+0x22>
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	6053      	str	r3, [r2, #4]
 8009b06:	4408      	add	r0, r1
 8009b08:	6010      	str	r0, [r2, #0]
 8009b0a:	e7da      	b.n	8009ac2 <_free_r+0x22>
 8009b0c:	d902      	bls.n	8009b14 <_free_r+0x74>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	e7d6      	b.n	8009ac2 <_free_r+0x22>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	1821      	adds	r1, r4, r0
 8009b18:	428b      	cmp	r3, r1
 8009b1a:	bf04      	itt	eq
 8009b1c:	6819      	ldreq	r1, [r3, #0]
 8009b1e:	685b      	ldreq	r3, [r3, #4]
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	bf04      	itt	eq
 8009b24:	1809      	addeq	r1, r1, r0
 8009b26:	6021      	streq	r1, [r4, #0]
 8009b28:	6054      	str	r4, [r2, #4]
 8009b2a:	e7ca      	b.n	8009ac2 <_free_r+0x22>
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	2000687c 	.word	0x2000687c

08009b34 <malloc>:
 8009b34:	4b02      	ldr	r3, [pc, #8]	@ (8009b40 <malloc+0xc>)
 8009b36:	4601      	mov	r1, r0
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f000 b825 	b.w	8009b88 <_malloc_r>
 8009b3e:	bf00      	nop
 8009b40:	2000001c 	.word	0x2000001c

08009b44 <sbrk_aligned>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	4e0f      	ldr	r6, [pc, #60]	@ (8009b84 <sbrk_aligned+0x40>)
 8009b48:	460c      	mov	r4, r1
 8009b4a:	6831      	ldr	r1, [r6, #0]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	b911      	cbnz	r1, 8009b56 <sbrk_aligned+0x12>
 8009b50:	f000 fe46 	bl	800a7e0 <_sbrk_r>
 8009b54:	6030      	str	r0, [r6, #0]
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 fe41 	bl	800a7e0 <_sbrk_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d103      	bne.n	8009b6a <sbrk_aligned+0x26>
 8009b62:	f04f 34ff 	mov.w	r4, #4294967295
 8009b66:	4620      	mov	r0, r4
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
 8009b6a:	1cc4      	adds	r4, r0, #3
 8009b6c:	f024 0403 	bic.w	r4, r4, #3
 8009b70:	42a0      	cmp	r0, r4
 8009b72:	d0f8      	beq.n	8009b66 <sbrk_aligned+0x22>
 8009b74:	1a21      	subs	r1, r4, r0
 8009b76:	4628      	mov	r0, r5
 8009b78:	f000 fe32 	bl	800a7e0 <_sbrk_r>
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d1f2      	bne.n	8009b66 <sbrk_aligned+0x22>
 8009b80:	e7ef      	b.n	8009b62 <sbrk_aligned+0x1e>
 8009b82:	bf00      	nop
 8009b84:	20006878 	.word	0x20006878

08009b88 <_malloc_r>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	1ccd      	adds	r5, r1, #3
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	db01      	blt.n	8009ba4 <_malloc_r+0x1c>
 8009ba0:	42a9      	cmp	r1, r5
 8009ba2:	d904      	bls.n	8009bae <_malloc_r+0x26>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c84 <_malloc_r+0xfc>
 8009bb2:	f000 f869 	bl	8009c88 <__malloc_lock>
 8009bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bba:	461c      	mov	r4, r3
 8009bbc:	bb44      	cbnz	r4, 8009c10 <_malloc_r+0x88>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff ffbf 	bl	8009b44 <sbrk_aligned>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	4604      	mov	r4, r0
 8009bca:	d158      	bne.n	8009c7e <_malloc_r+0xf6>
 8009bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8009bd0:	4627      	mov	r7, r4
 8009bd2:	2f00      	cmp	r7, #0
 8009bd4:	d143      	bne.n	8009c5e <_malloc_r+0xd6>
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d04b      	beq.n	8009c72 <_malloc_r+0xea>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4630      	mov	r0, r6
 8009be0:	eb04 0903 	add.w	r9, r4, r3
 8009be4:	f000 fdfc 	bl	800a7e0 <_sbrk_r>
 8009be8:	4581      	cmp	r9, r0
 8009bea:	d142      	bne.n	8009c72 <_malloc_r+0xea>
 8009bec:	6821      	ldr	r1, [r4, #0]
 8009bee:	1a6d      	subs	r5, r5, r1
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff ffa6 	bl	8009b44 <sbrk_aligned>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d03a      	beq.n	8009c72 <_malloc_r+0xea>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	442b      	add	r3, r5
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	f8d8 3000 	ldr.w	r3, [r8]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	bb62      	cbnz	r2, 8009c64 <_malloc_r+0xdc>
 8009c0a:	f8c8 7000 	str.w	r7, [r8]
 8009c0e:	e00f      	b.n	8009c30 <_malloc_r+0xa8>
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	1b52      	subs	r2, r2, r5
 8009c14:	d420      	bmi.n	8009c58 <_malloc_r+0xd0>
 8009c16:	2a0b      	cmp	r2, #11
 8009c18:	d917      	bls.n	8009c4a <_malloc_r+0xc2>
 8009c1a:	1961      	adds	r1, r4, r5
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	6025      	str	r5, [r4, #0]
 8009c20:	bf18      	it	ne
 8009c22:	6059      	strne	r1, [r3, #4]
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	bf08      	it	eq
 8009c28:	f8c8 1000 	streq.w	r1, [r8]
 8009c2c:	5162      	str	r2, [r4, r5]
 8009c2e:	604b      	str	r3, [r1, #4]
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 f82f 	bl	8009c94 <__malloc_unlock>
 8009c36:	f104 000b 	add.w	r0, r4, #11
 8009c3a:	1d23      	adds	r3, r4, #4
 8009c3c:	f020 0007 	bic.w	r0, r0, #7
 8009c40:	1ac2      	subs	r2, r0, r3
 8009c42:	bf1c      	itt	ne
 8009c44:	1a1b      	subne	r3, r3, r0
 8009c46:	50a3      	strne	r3, [r4, r2]
 8009c48:	e7af      	b.n	8009baa <_malloc_r+0x22>
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	bf0c      	ite	eq
 8009c50:	f8c8 2000 	streq.w	r2, [r8]
 8009c54:	605a      	strne	r2, [r3, #4]
 8009c56:	e7eb      	b.n	8009c30 <_malloc_r+0xa8>
 8009c58:	4623      	mov	r3, r4
 8009c5a:	6864      	ldr	r4, [r4, #4]
 8009c5c:	e7ae      	b.n	8009bbc <_malloc_r+0x34>
 8009c5e:	463c      	mov	r4, r7
 8009c60:	687f      	ldr	r7, [r7, #4]
 8009c62:	e7b6      	b.n	8009bd2 <_malloc_r+0x4a>
 8009c64:	461a      	mov	r2, r3
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d1fb      	bne.n	8009c64 <_malloc_r+0xdc>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	6053      	str	r3, [r2, #4]
 8009c70:	e7de      	b.n	8009c30 <_malloc_r+0xa8>
 8009c72:	230c      	movs	r3, #12
 8009c74:	6033      	str	r3, [r6, #0]
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 f80c 	bl	8009c94 <__malloc_unlock>
 8009c7c:	e794      	b.n	8009ba8 <_malloc_r+0x20>
 8009c7e:	6005      	str	r5, [r0, #0]
 8009c80:	e7d6      	b.n	8009c30 <_malloc_r+0xa8>
 8009c82:	bf00      	nop
 8009c84:	2000687c 	.word	0x2000687c

08009c88 <__malloc_lock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	@ (8009c90 <__malloc_lock+0x8>)
 8009c8a:	f7ff b8ac 	b.w	8008de6 <__retarget_lock_acquire_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20006874 	.word	0x20006874

08009c94 <__malloc_unlock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	@ (8009c9c <__malloc_unlock+0x8>)
 8009c96:	f7ff b8a7 	b.w	8008de8 <__retarget_lock_release_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20006874 	.word	0x20006874

08009ca0 <_Balloc>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	69c6      	ldr	r6, [r0, #28]
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	b976      	cbnz	r6, 8009cc8 <_Balloc+0x28>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f7ff ff42 	bl	8009b34 <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	61e0      	str	r0, [r4, #28]
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_Balloc+0x20>
 8009cb6:	4b18      	ldr	r3, [pc, #96]	@ (8009d18 <_Balloc+0x78>)
 8009cb8:	4818      	ldr	r0, [pc, #96]	@ (8009d1c <_Balloc+0x7c>)
 8009cba:	216b      	movs	r1, #107	@ 0x6b
 8009cbc:	f000 fda0 	bl	800a800 <__assert_func>
 8009cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc4:	6006      	str	r6, [r0, #0]
 8009cc6:	60c6      	str	r6, [r0, #12]
 8009cc8:	69e6      	ldr	r6, [r4, #28]
 8009cca:	68f3      	ldr	r3, [r6, #12]
 8009ccc:	b183      	cbz	r3, 8009cf0 <_Balloc+0x50>
 8009cce:	69e3      	ldr	r3, [r4, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cd6:	b9b8      	cbnz	r0, 8009d08 <_Balloc+0x68>
 8009cd8:	2101      	movs	r1, #1
 8009cda:	fa01 f605 	lsl.w	r6, r1, r5
 8009cde:	1d72      	adds	r2, r6, #5
 8009ce0:	0092      	lsls	r2, r2, #2
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 fdaa 	bl	800a83c <_calloc_r>
 8009ce8:	b160      	cbz	r0, 8009d04 <_Balloc+0x64>
 8009cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cee:	e00e      	b.n	8009d0e <_Balloc+0x6e>
 8009cf0:	2221      	movs	r2, #33	@ 0x21
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fda1 	bl	800a83c <_calloc_r>
 8009cfa:	69e3      	ldr	r3, [r4, #28]
 8009cfc:	60f0      	str	r0, [r6, #12]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e4      	bne.n	8009cce <_Balloc+0x2e>
 8009d04:	2000      	movs	r0, #0
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	6802      	ldr	r2, [r0, #0]
 8009d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d14:	e7f7      	b.n	8009d06 <_Balloc+0x66>
 8009d16:	bf00      	nop
 8009d18:	0800bd05 	.word	0x0800bd05
 8009d1c:	0800bd85 	.word	0x0800bd85

08009d20 <_Bfree>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	69c6      	ldr	r6, [r0, #28]
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	b976      	cbnz	r6, 8009d48 <_Bfree+0x28>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7ff ff02 	bl	8009b34 <malloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	61e8      	str	r0, [r5, #28]
 8009d34:	b920      	cbnz	r0, 8009d40 <_Bfree+0x20>
 8009d36:	4b09      	ldr	r3, [pc, #36]	@ (8009d5c <_Bfree+0x3c>)
 8009d38:	4809      	ldr	r0, [pc, #36]	@ (8009d60 <_Bfree+0x40>)
 8009d3a:	218f      	movs	r1, #143	@ 0x8f
 8009d3c:	f000 fd60 	bl	800a800 <__assert_func>
 8009d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d44:	6006      	str	r6, [r0, #0]
 8009d46:	60c6      	str	r6, [r0, #12]
 8009d48:	b13c      	cbz	r4, 8009d5a <_Bfree+0x3a>
 8009d4a:	69eb      	ldr	r3, [r5, #28]
 8009d4c:	6862      	ldr	r2, [r4, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d54:	6021      	str	r1, [r4, #0]
 8009d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	0800bd05 	.word	0x0800bd05
 8009d60:	0800bd85 	.word	0x0800bd85

08009d64 <__multadd>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	690d      	ldr	r5, [r1, #16]
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	461e      	mov	r6, r3
 8009d70:	f101 0c14 	add.w	ip, r1, #20
 8009d74:	2000      	movs	r0, #0
 8009d76:	f8dc 3000 	ldr.w	r3, [ip]
 8009d7a:	b299      	uxth	r1, r3
 8009d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d80:	0c1e      	lsrs	r6, r3, #16
 8009d82:	0c0b      	lsrs	r3, r1, #16
 8009d84:	fb02 3306 	mla	r3, r2, r6, r3
 8009d88:	b289      	uxth	r1, r1
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d90:	4285      	cmp	r5, r0
 8009d92:	f84c 1b04 	str.w	r1, [ip], #4
 8009d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d9a:	dcec      	bgt.n	8009d76 <__multadd+0x12>
 8009d9c:	b30e      	cbz	r6, 8009de2 <__multadd+0x7e>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	dc19      	bgt.n	8009dd8 <__multadd+0x74>
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	4638      	mov	r0, r7
 8009da8:	3101      	adds	r1, #1
 8009daa:	f7ff ff79 	bl	8009ca0 <_Balloc>
 8009dae:	4680      	mov	r8, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <__multadd+0x5a>
 8009db2:	4602      	mov	r2, r0
 8009db4:	4b0c      	ldr	r3, [pc, #48]	@ (8009de8 <__multadd+0x84>)
 8009db6:	480d      	ldr	r0, [pc, #52]	@ (8009dec <__multadd+0x88>)
 8009db8:	21ba      	movs	r1, #186	@ 0xba
 8009dba:	f000 fd21 	bl	800a800 <__assert_func>
 8009dbe:	6922      	ldr	r2, [r4, #16]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	f104 010c 	add.w	r1, r4, #12
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	300c      	adds	r0, #12
 8009dca:	f7ff f80e 	bl	8008dea <memcpy>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa5 	bl	8009d20 <_Bfree>
 8009dd6:	4644      	mov	r4, r8
 8009dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ddc:	3501      	adds	r5, #1
 8009dde:	615e      	str	r6, [r3, #20]
 8009de0:	6125      	str	r5, [r4, #16]
 8009de2:	4620      	mov	r0, r4
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	0800bd74 	.word	0x0800bd74
 8009dec:	0800bd85 	.word	0x0800bd85

08009df0 <__hi0bits>:
 8009df0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009df4:	4603      	mov	r3, r0
 8009df6:	bf36      	itet	cc
 8009df8:	0403      	lslcc	r3, r0, #16
 8009dfa:	2000      	movcs	r0, #0
 8009dfc:	2010      	movcc	r0, #16
 8009dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e02:	bf3c      	itt	cc
 8009e04:	021b      	lslcc	r3, r3, #8
 8009e06:	3008      	addcc	r0, #8
 8009e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e0c:	bf3c      	itt	cc
 8009e0e:	011b      	lslcc	r3, r3, #4
 8009e10:	3004      	addcc	r0, #4
 8009e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e16:	bf3c      	itt	cc
 8009e18:	009b      	lslcc	r3, r3, #2
 8009e1a:	3002      	addcc	r0, #2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	db05      	blt.n	8009e2c <__hi0bits+0x3c>
 8009e20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009e24:	f100 0001 	add.w	r0, r0, #1
 8009e28:	bf08      	it	eq
 8009e2a:	2020      	moveq	r0, #32
 8009e2c:	4770      	bx	lr

08009e2e <__lo0bits>:
 8009e2e:	6803      	ldr	r3, [r0, #0]
 8009e30:	4602      	mov	r2, r0
 8009e32:	f013 0007 	ands.w	r0, r3, #7
 8009e36:	d00b      	beq.n	8009e50 <__lo0bits+0x22>
 8009e38:	07d9      	lsls	r1, r3, #31
 8009e3a:	d421      	bmi.n	8009e80 <__lo0bits+0x52>
 8009e3c:	0798      	lsls	r0, r3, #30
 8009e3e:	bf49      	itett	mi
 8009e40:	085b      	lsrmi	r3, r3, #1
 8009e42:	089b      	lsrpl	r3, r3, #2
 8009e44:	2001      	movmi	r0, #1
 8009e46:	6013      	strmi	r3, [r2, #0]
 8009e48:	bf5c      	itt	pl
 8009e4a:	6013      	strpl	r3, [r2, #0]
 8009e4c:	2002      	movpl	r0, #2
 8009e4e:	4770      	bx	lr
 8009e50:	b299      	uxth	r1, r3
 8009e52:	b909      	cbnz	r1, 8009e58 <__lo0bits+0x2a>
 8009e54:	0c1b      	lsrs	r3, r3, #16
 8009e56:	2010      	movs	r0, #16
 8009e58:	b2d9      	uxtb	r1, r3
 8009e5a:	b909      	cbnz	r1, 8009e60 <__lo0bits+0x32>
 8009e5c:	3008      	adds	r0, #8
 8009e5e:	0a1b      	lsrs	r3, r3, #8
 8009e60:	0719      	lsls	r1, r3, #28
 8009e62:	bf04      	itt	eq
 8009e64:	091b      	lsreq	r3, r3, #4
 8009e66:	3004      	addeq	r0, #4
 8009e68:	0799      	lsls	r1, r3, #30
 8009e6a:	bf04      	itt	eq
 8009e6c:	089b      	lsreq	r3, r3, #2
 8009e6e:	3002      	addeq	r0, #2
 8009e70:	07d9      	lsls	r1, r3, #31
 8009e72:	d403      	bmi.n	8009e7c <__lo0bits+0x4e>
 8009e74:	085b      	lsrs	r3, r3, #1
 8009e76:	f100 0001 	add.w	r0, r0, #1
 8009e7a:	d003      	beq.n	8009e84 <__lo0bits+0x56>
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	4770      	bx	lr
 8009e80:	2000      	movs	r0, #0
 8009e82:	4770      	bx	lr
 8009e84:	2020      	movs	r0, #32
 8009e86:	4770      	bx	lr

08009e88 <__i2b>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	f7ff ff07 	bl	8009ca0 <_Balloc>
 8009e92:	4602      	mov	r2, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <__i2b+0x1a>
 8009e96:	4b05      	ldr	r3, [pc, #20]	@ (8009eac <__i2b+0x24>)
 8009e98:	4805      	ldr	r0, [pc, #20]	@ (8009eb0 <__i2b+0x28>)
 8009e9a:	f240 1145 	movw	r1, #325	@ 0x145
 8009e9e:	f000 fcaf 	bl	800a800 <__assert_func>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	6144      	str	r4, [r0, #20]
 8009ea6:	6103      	str	r3, [r0, #16]
 8009ea8:	bd10      	pop	{r4, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800bd74 	.word	0x0800bd74
 8009eb0:	0800bd85 	.word	0x0800bd85

08009eb4 <__multiply>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	4614      	mov	r4, r2
 8009eba:	690a      	ldr	r2, [r1, #16]
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	bfa8      	it	ge
 8009ec2:	4623      	movge	r3, r4
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	bfa4      	itt	ge
 8009ec8:	460c      	movge	r4, r1
 8009eca:	461f      	movge	r7, r3
 8009ecc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ed0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ed4:	68a3      	ldr	r3, [r4, #8]
 8009ed6:	6861      	ldr	r1, [r4, #4]
 8009ed8:	eb0a 0609 	add.w	r6, sl, r9
 8009edc:	42b3      	cmp	r3, r6
 8009ede:	b085      	sub	sp, #20
 8009ee0:	bfb8      	it	lt
 8009ee2:	3101      	addlt	r1, #1
 8009ee4:	f7ff fedc 	bl	8009ca0 <_Balloc>
 8009ee8:	b930      	cbnz	r0, 8009ef8 <__multiply+0x44>
 8009eea:	4602      	mov	r2, r0
 8009eec:	4b44      	ldr	r3, [pc, #272]	@ (800a000 <__multiply+0x14c>)
 8009eee:	4845      	ldr	r0, [pc, #276]	@ (800a004 <__multiply+0x150>)
 8009ef0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ef4:	f000 fc84 	bl	800a800 <__assert_func>
 8009ef8:	f100 0514 	add.w	r5, r0, #20
 8009efc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f00:	462b      	mov	r3, r5
 8009f02:	2200      	movs	r2, #0
 8009f04:	4543      	cmp	r3, r8
 8009f06:	d321      	bcc.n	8009f4c <__multiply+0x98>
 8009f08:	f107 0114 	add.w	r1, r7, #20
 8009f0c:	f104 0214 	add.w	r2, r4, #20
 8009f10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009f14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009f18:	9302      	str	r3, [sp, #8]
 8009f1a:	1b13      	subs	r3, r2, r4
 8009f1c:	3b15      	subs	r3, #21
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	3304      	adds	r3, #4
 8009f24:	f104 0715 	add.w	r7, r4, #21
 8009f28:	42ba      	cmp	r2, r7
 8009f2a:	bf38      	it	cc
 8009f2c:	2304      	movcc	r3, #4
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	9103      	str	r1, [sp, #12]
 8009f34:	428b      	cmp	r3, r1
 8009f36:	d80c      	bhi.n	8009f52 <__multiply+0x9e>
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	dd03      	ble.n	8009f44 <__multiply+0x90>
 8009f3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d05b      	beq.n	8009ffc <__multiply+0x148>
 8009f44:	6106      	str	r6, [r0, #16]
 8009f46:	b005      	add	sp, #20
 8009f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4c:	f843 2b04 	str.w	r2, [r3], #4
 8009f50:	e7d8      	b.n	8009f04 <__multiply+0x50>
 8009f52:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f56:	f1ba 0f00 	cmp.w	sl, #0
 8009f5a:	d024      	beq.n	8009fa6 <__multiply+0xf2>
 8009f5c:	f104 0e14 	add.w	lr, r4, #20
 8009f60:	46a9      	mov	r9, r5
 8009f62:	f04f 0c00 	mov.w	ip, #0
 8009f66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f6a:	f8d9 3000 	ldr.w	r3, [r9]
 8009f6e:	fa1f fb87 	uxth.w	fp, r7
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009f7c:	f8d9 7000 	ldr.w	r7, [r9]
 8009f80:	4463      	add	r3, ip
 8009f82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f86:	fb0a c70b 	mla	r7, sl, fp, ip
 8009f8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f94:	4572      	cmp	r2, lr
 8009f96:	f849 3b04 	str.w	r3, [r9], #4
 8009f9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f9e:	d8e2      	bhi.n	8009f66 <__multiply+0xb2>
 8009fa0:	9b01      	ldr	r3, [sp, #4]
 8009fa2:	f845 c003 	str.w	ip, [r5, r3]
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009fac:	3104      	adds	r1, #4
 8009fae:	f1b9 0f00 	cmp.w	r9, #0
 8009fb2:	d021      	beq.n	8009ff8 <__multiply+0x144>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	f104 0c14 	add.w	ip, r4, #20
 8009fba:	46ae      	mov	lr, r5
 8009fbc:	f04f 0a00 	mov.w	sl, #0
 8009fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8009fc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009fc8:	fb09 770b 	mla	r7, r9, fp, r7
 8009fcc:	4457      	add	r7, sl
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009fd4:	f84e 3b04 	str.w	r3, [lr], #4
 8009fd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fe0:	f8be 3000 	ldrh.w	r3, [lr]
 8009fe4:	fb09 330a 	mla	r3, r9, sl, r3
 8009fe8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009fec:	4562      	cmp	r2, ip
 8009fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ff2:	d8e5      	bhi.n	8009fc0 <__multiply+0x10c>
 8009ff4:	9f01      	ldr	r7, [sp, #4]
 8009ff6:	51eb      	str	r3, [r5, r7]
 8009ff8:	3504      	adds	r5, #4
 8009ffa:	e799      	b.n	8009f30 <__multiply+0x7c>
 8009ffc:	3e01      	subs	r6, #1
 8009ffe:	e79b      	b.n	8009f38 <__multiply+0x84>
 800a000:	0800bd74 	.word	0x0800bd74
 800a004:	0800bd85 	.word	0x0800bd85

0800a008 <__pow5mult>:
 800a008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a00c:	4615      	mov	r5, r2
 800a00e:	f012 0203 	ands.w	r2, r2, #3
 800a012:	4607      	mov	r7, r0
 800a014:	460e      	mov	r6, r1
 800a016:	d007      	beq.n	800a028 <__pow5mult+0x20>
 800a018:	4c25      	ldr	r4, [pc, #148]	@ (800a0b0 <__pow5mult+0xa8>)
 800a01a:	3a01      	subs	r2, #1
 800a01c:	2300      	movs	r3, #0
 800a01e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a022:	f7ff fe9f 	bl	8009d64 <__multadd>
 800a026:	4606      	mov	r6, r0
 800a028:	10ad      	asrs	r5, r5, #2
 800a02a:	d03d      	beq.n	800a0a8 <__pow5mult+0xa0>
 800a02c:	69fc      	ldr	r4, [r7, #28]
 800a02e:	b97c      	cbnz	r4, 800a050 <__pow5mult+0x48>
 800a030:	2010      	movs	r0, #16
 800a032:	f7ff fd7f 	bl	8009b34 <malloc>
 800a036:	4602      	mov	r2, r0
 800a038:	61f8      	str	r0, [r7, #28]
 800a03a:	b928      	cbnz	r0, 800a048 <__pow5mult+0x40>
 800a03c:	4b1d      	ldr	r3, [pc, #116]	@ (800a0b4 <__pow5mult+0xac>)
 800a03e:	481e      	ldr	r0, [pc, #120]	@ (800a0b8 <__pow5mult+0xb0>)
 800a040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a044:	f000 fbdc 	bl	800a800 <__assert_func>
 800a048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a04c:	6004      	str	r4, [r0, #0]
 800a04e:	60c4      	str	r4, [r0, #12]
 800a050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a058:	b94c      	cbnz	r4, 800a06e <__pow5mult+0x66>
 800a05a:	f240 2171 	movw	r1, #625	@ 0x271
 800a05e:	4638      	mov	r0, r7
 800a060:	f7ff ff12 	bl	8009e88 <__i2b>
 800a064:	2300      	movs	r3, #0
 800a066:	f8c8 0008 	str.w	r0, [r8, #8]
 800a06a:	4604      	mov	r4, r0
 800a06c:	6003      	str	r3, [r0, #0]
 800a06e:	f04f 0900 	mov.w	r9, #0
 800a072:	07eb      	lsls	r3, r5, #31
 800a074:	d50a      	bpl.n	800a08c <__pow5mult+0x84>
 800a076:	4631      	mov	r1, r6
 800a078:	4622      	mov	r2, r4
 800a07a:	4638      	mov	r0, r7
 800a07c:	f7ff ff1a 	bl	8009eb4 <__multiply>
 800a080:	4631      	mov	r1, r6
 800a082:	4680      	mov	r8, r0
 800a084:	4638      	mov	r0, r7
 800a086:	f7ff fe4b 	bl	8009d20 <_Bfree>
 800a08a:	4646      	mov	r6, r8
 800a08c:	106d      	asrs	r5, r5, #1
 800a08e:	d00b      	beq.n	800a0a8 <__pow5mult+0xa0>
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	b938      	cbnz	r0, 800a0a4 <__pow5mult+0x9c>
 800a094:	4622      	mov	r2, r4
 800a096:	4621      	mov	r1, r4
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff ff0b 	bl	8009eb4 <__multiply>
 800a09e:	6020      	str	r0, [r4, #0]
 800a0a0:	f8c0 9000 	str.w	r9, [r0]
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	e7e4      	b.n	800a072 <__pow5mult+0x6a>
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0800bde0 	.word	0x0800bde0
 800a0b4:	0800bd05 	.word	0x0800bd05
 800a0b8:	0800bd85 	.word	0x0800bd85

0800a0bc <__lshift>:
 800a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	6849      	ldr	r1, [r1, #4]
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ca:	68a3      	ldr	r3, [r4, #8]
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	4691      	mov	r9, r2
 800a0d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0d4:	f108 0601 	add.w	r6, r8, #1
 800a0d8:	42b3      	cmp	r3, r6
 800a0da:	db0b      	blt.n	800a0f4 <__lshift+0x38>
 800a0dc:	4638      	mov	r0, r7
 800a0de:	f7ff fddf 	bl	8009ca0 <_Balloc>
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	b948      	cbnz	r0, 800a0fa <__lshift+0x3e>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	4b28      	ldr	r3, [pc, #160]	@ (800a18c <__lshift+0xd0>)
 800a0ea:	4829      	ldr	r0, [pc, #164]	@ (800a190 <__lshift+0xd4>)
 800a0ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a0f0:	f000 fb86 	bl	800a800 <__assert_func>
 800a0f4:	3101      	adds	r1, #1
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	e7ee      	b.n	800a0d8 <__lshift+0x1c>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f100 0114 	add.w	r1, r0, #20
 800a100:	f100 0210 	add.w	r2, r0, #16
 800a104:	4618      	mov	r0, r3
 800a106:	4553      	cmp	r3, sl
 800a108:	db33      	blt.n	800a172 <__lshift+0xb6>
 800a10a:	6920      	ldr	r0, [r4, #16]
 800a10c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a110:	f104 0314 	add.w	r3, r4, #20
 800a114:	f019 091f 	ands.w	r9, r9, #31
 800a118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a11c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a120:	d02b      	beq.n	800a17a <__lshift+0xbe>
 800a122:	f1c9 0e20 	rsb	lr, r9, #32
 800a126:	468a      	mov	sl, r1
 800a128:	2200      	movs	r2, #0
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	fa00 f009 	lsl.w	r0, r0, r9
 800a130:	4310      	orrs	r0, r2
 800a132:	f84a 0b04 	str.w	r0, [sl], #4
 800a136:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13a:	459c      	cmp	ip, r3
 800a13c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a140:	d8f3      	bhi.n	800a12a <__lshift+0x6e>
 800a142:	ebac 0304 	sub.w	r3, ip, r4
 800a146:	3b15      	subs	r3, #21
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	3304      	adds	r3, #4
 800a14e:	f104 0015 	add.w	r0, r4, #21
 800a152:	4584      	cmp	ip, r0
 800a154:	bf38      	it	cc
 800a156:	2304      	movcc	r3, #4
 800a158:	50ca      	str	r2, [r1, r3]
 800a15a:	b10a      	cbz	r2, 800a160 <__lshift+0xa4>
 800a15c:	f108 0602 	add.w	r6, r8, #2
 800a160:	3e01      	subs	r6, #1
 800a162:	4638      	mov	r0, r7
 800a164:	612e      	str	r6, [r5, #16]
 800a166:	4621      	mov	r1, r4
 800a168:	f7ff fdda 	bl	8009d20 <_Bfree>
 800a16c:	4628      	mov	r0, r5
 800a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a172:	f842 0f04 	str.w	r0, [r2, #4]!
 800a176:	3301      	adds	r3, #1
 800a178:	e7c5      	b.n	800a106 <__lshift+0x4a>
 800a17a:	3904      	subs	r1, #4
 800a17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a180:	f841 2f04 	str.w	r2, [r1, #4]!
 800a184:	459c      	cmp	ip, r3
 800a186:	d8f9      	bhi.n	800a17c <__lshift+0xc0>
 800a188:	e7ea      	b.n	800a160 <__lshift+0xa4>
 800a18a:	bf00      	nop
 800a18c:	0800bd74 	.word	0x0800bd74
 800a190:	0800bd85 	.word	0x0800bd85

0800a194 <__mcmp>:
 800a194:	690a      	ldr	r2, [r1, #16]
 800a196:	4603      	mov	r3, r0
 800a198:	6900      	ldr	r0, [r0, #16]
 800a19a:	1a80      	subs	r0, r0, r2
 800a19c:	b530      	push	{r4, r5, lr}
 800a19e:	d10e      	bne.n	800a1be <__mcmp+0x2a>
 800a1a0:	3314      	adds	r3, #20
 800a1a2:	3114      	adds	r1, #20
 800a1a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1b4:	4295      	cmp	r5, r2
 800a1b6:	d003      	beq.n	800a1c0 <__mcmp+0x2c>
 800a1b8:	d205      	bcs.n	800a1c6 <__mcmp+0x32>
 800a1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a1be:	bd30      	pop	{r4, r5, pc}
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	d3f3      	bcc.n	800a1ac <__mcmp+0x18>
 800a1c4:	e7fb      	b.n	800a1be <__mcmp+0x2a>
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	e7f9      	b.n	800a1be <__mcmp+0x2a>
	...

0800a1cc <__mdiff>:
 800a1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	4689      	mov	r9, r1
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4648      	mov	r0, r9
 800a1d8:	4614      	mov	r4, r2
 800a1da:	f7ff ffdb 	bl	800a194 <__mcmp>
 800a1de:	1e05      	subs	r5, r0, #0
 800a1e0:	d112      	bne.n	800a208 <__mdiff+0x3c>
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff fd5b 	bl	8009ca0 <_Balloc>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	b928      	cbnz	r0, 800a1fa <__mdiff+0x2e>
 800a1ee:	4b3f      	ldr	r3, [pc, #252]	@ (800a2ec <__mdiff+0x120>)
 800a1f0:	f240 2137 	movw	r1, #567	@ 0x237
 800a1f4:	483e      	ldr	r0, [pc, #248]	@ (800a2f0 <__mdiff+0x124>)
 800a1f6:	f000 fb03 	bl	800a800 <__assert_func>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a200:	4610      	mov	r0, r2
 800a202:	b003      	add	sp, #12
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	bfbc      	itt	lt
 800a20a:	464b      	movlt	r3, r9
 800a20c:	46a1      	movlt	r9, r4
 800a20e:	4630      	mov	r0, r6
 800a210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a214:	bfba      	itte	lt
 800a216:	461c      	movlt	r4, r3
 800a218:	2501      	movlt	r5, #1
 800a21a:	2500      	movge	r5, #0
 800a21c:	f7ff fd40 	bl	8009ca0 <_Balloc>
 800a220:	4602      	mov	r2, r0
 800a222:	b918      	cbnz	r0, 800a22c <__mdiff+0x60>
 800a224:	4b31      	ldr	r3, [pc, #196]	@ (800a2ec <__mdiff+0x120>)
 800a226:	f240 2145 	movw	r1, #581	@ 0x245
 800a22a:	e7e3      	b.n	800a1f4 <__mdiff+0x28>
 800a22c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a230:	6926      	ldr	r6, [r4, #16]
 800a232:	60c5      	str	r5, [r0, #12]
 800a234:	f109 0310 	add.w	r3, r9, #16
 800a238:	f109 0514 	add.w	r5, r9, #20
 800a23c:	f104 0e14 	add.w	lr, r4, #20
 800a240:	f100 0b14 	add.w	fp, r0, #20
 800a244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	46d9      	mov	r9, fp
 800a250:	f04f 0c00 	mov.w	ip, #0
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a25a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	fa1f f38a 	uxth.w	r3, sl
 800a264:	4619      	mov	r1, r3
 800a266:	b283      	uxth	r3, r0
 800a268:	1acb      	subs	r3, r1, r3
 800a26a:	0c00      	lsrs	r0, r0, #16
 800a26c:	4463      	add	r3, ip
 800a26e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a276:	b29b      	uxth	r3, r3
 800a278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a27c:	4576      	cmp	r6, lr
 800a27e:	f849 3b04 	str.w	r3, [r9], #4
 800a282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a286:	d8e5      	bhi.n	800a254 <__mdiff+0x88>
 800a288:	1b33      	subs	r3, r6, r4
 800a28a:	3b15      	subs	r3, #21
 800a28c:	f023 0303 	bic.w	r3, r3, #3
 800a290:	3415      	adds	r4, #21
 800a292:	3304      	adds	r3, #4
 800a294:	42a6      	cmp	r6, r4
 800a296:	bf38      	it	cc
 800a298:	2304      	movcc	r3, #4
 800a29a:	441d      	add	r5, r3
 800a29c:	445b      	add	r3, fp
 800a29e:	461e      	mov	r6, r3
 800a2a0:	462c      	mov	r4, r5
 800a2a2:	4544      	cmp	r4, r8
 800a2a4:	d30e      	bcc.n	800a2c4 <__mdiff+0xf8>
 800a2a6:	f108 0103 	add.w	r1, r8, #3
 800a2aa:	1b49      	subs	r1, r1, r5
 800a2ac:	f021 0103 	bic.w	r1, r1, #3
 800a2b0:	3d03      	subs	r5, #3
 800a2b2:	45a8      	cmp	r8, r5
 800a2b4:	bf38      	it	cc
 800a2b6:	2100      	movcc	r1, #0
 800a2b8:	440b      	add	r3, r1
 800a2ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2be:	b191      	cbz	r1, 800a2e6 <__mdiff+0x11a>
 800a2c0:	6117      	str	r7, [r2, #16]
 800a2c2:	e79d      	b.n	800a200 <__mdiff+0x34>
 800a2c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a2c8:	46e6      	mov	lr, ip
 800a2ca:	0c08      	lsrs	r0, r1, #16
 800a2cc:	fa1c fc81 	uxtah	ip, ip, r1
 800a2d0:	4471      	add	r1, lr
 800a2d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a2d6:	b289      	uxth	r1, r1
 800a2d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a2dc:	f846 1b04 	str.w	r1, [r6], #4
 800a2e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2e4:	e7dd      	b.n	800a2a2 <__mdiff+0xd6>
 800a2e6:	3f01      	subs	r7, #1
 800a2e8:	e7e7      	b.n	800a2ba <__mdiff+0xee>
 800a2ea:	bf00      	nop
 800a2ec:	0800bd74 	.word	0x0800bd74
 800a2f0:	0800bd85 	.word	0x0800bd85

0800a2f4 <__d2b>:
 800a2f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	ec59 8b10 	vmov	r8, r9, d0
 800a300:	4616      	mov	r6, r2
 800a302:	f7ff fccd 	bl	8009ca0 <_Balloc>
 800a306:	4604      	mov	r4, r0
 800a308:	b930      	cbnz	r0, 800a318 <__d2b+0x24>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4b23      	ldr	r3, [pc, #140]	@ (800a39c <__d2b+0xa8>)
 800a30e:	4824      	ldr	r0, [pc, #144]	@ (800a3a0 <__d2b+0xac>)
 800a310:	f240 310f 	movw	r1, #783	@ 0x30f
 800a314:	f000 fa74 	bl	800a800 <__assert_func>
 800a318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a31c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a320:	b10d      	cbz	r5, 800a326 <__d2b+0x32>
 800a322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	f1b8 0300 	subs.w	r3, r8, #0
 800a32c:	d023      	beq.n	800a376 <__d2b+0x82>
 800a32e:	4668      	mov	r0, sp
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	f7ff fd7c 	bl	8009e2e <__lo0bits>
 800a336:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a33a:	b1d0      	cbz	r0, 800a372 <__d2b+0x7e>
 800a33c:	f1c0 0320 	rsb	r3, r0, #32
 800a340:	fa02 f303 	lsl.w	r3, r2, r3
 800a344:	430b      	orrs	r3, r1
 800a346:	40c2      	lsrs	r2, r0
 800a348:	6163      	str	r3, [r4, #20]
 800a34a:	9201      	str	r2, [sp, #4]
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	61a3      	str	r3, [r4, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	bf0c      	ite	eq
 800a354:	2201      	moveq	r2, #1
 800a356:	2202      	movne	r2, #2
 800a358:	6122      	str	r2, [r4, #16]
 800a35a:	b1a5      	cbz	r5, 800a386 <__d2b+0x92>
 800a35c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a360:	4405      	add	r5, r0
 800a362:	603d      	str	r5, [r7, #0]
 800a364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a368:	6030      	str	r0, [r6, #0]
 800a36a:	4620      	mov	r0, r4
 800a36c:	b003      	add	sp, #12
 800a36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a372:	6161      	str	r1, [r4, #20]
 800a374:	e7ea      	b.n	800a34c <__d2b+0x58>
 800a376:	a801      	add	r0, sp, #4
 800a378:	f7ff fd59 	bl	8009e2e <__lo0bits>
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	6163      	str	r3, [r4, #20]
 800a380:	3020      	adds	r0, #32
 800a382:	2201      	movs	r2, #1
 800a384:	e7e8      	b.n	800a358 <__d2b+0x64>
 800a386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a38a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a38e:	6038      	str	r0, [r7, #0]
 800a390:	6918      	ldr	r0, [r3, #16]
 800a392:	f7ff fd2d 	bl	8009df0 <__hi0bits>
 800a396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a39a:	e7e5      	b.n	800a368 <__d2b+0x74>
 800a39c:	0800bd74 	.word	0x0800bd74
 800a3a0:	0800bd85 	.word	0x0800bd85

0800a3a4 <__ssputs_r>:
 800a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	688e      	ldr	r6, [r1, #8]
 800a3aa:	461f      	mov	r7, r3
 800a3ac:	42be      	cmp	r6, r7
 800a3ae:	680b      	ldr	r3, [r1, #0]
 800a3b0:	4682      	mov	sl, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	4690      	mov	r8, r2
 800a3b6:	d82d      	bhi.n	800a414 <__ssputs_r+0x70>
 800a3b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3c0:	d026      	beq.n	800a410 <__ssputs_r+0x6c>
 800a3c2:	6965      	ldr	r5, [r4, #20]
 800a3c4:	6909      	ldr	r1, [r1, #16]
 800a3c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3ca:	eba3 0901 	sub.w	r9, r3, r1
 800a3ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3d2:	1c7b      	adds	r3, r7, #1
 800a3d4:	444b      	add	r3, r9
 800a3d6:	106d      	asrs	r5, r5, #1
 800a3d8:	429d      	cmp	r5, r3
 800a3da:	bf38      	it	cc
 800a3dc:	461d      	movcc	r5, r3
 800a3de:	0553      	lsls	r3, r2, #21
 800a3e0:	d527      	bpl.n	800a432 <__ssputs_r+0x8e>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7ff fbd0 	bl	8009b88 <_malloc_r>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b360      	cbz	r0, 800a446 <__ssputs_r+0xa2>
 800a3ec:	6921      	ldr	r1, [r4, #16]
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	f7fe fcfb 	bl	8008dea <memcpy>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	6126      	str	r6, [r4, #16]
 800a402:	6165      	str	r5, [r4, #20]
 800a404:	444e      	add	r6, r9
 800a406:	eba5 0509 	sub.w	r5, r5, r9
 800a40a:	6026      	str	r6, [r4, #0]
 800a40c:	60a5      	str	r5, [r4, #8]
 800a40e:	463e      	mov	r6, r7
 800a410:	42be      	cmp	r6, r7
 800a412:	d900      	bls.n	800a416 <__ssputs_r+0x72>
 800a414:	463e      	mov	r6, r7
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	4632      	mov	r2, r6
 800a41a:	4641      	mov	r1, r8
 800a41c:	f000 f9c6 	bl	800a7ac <memmove>
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	1b9b      	subs	r3, r3, r6
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4433      	add	r3, r6
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a432:	462a      	mov	r2, r5
 800a434:	f000 fa28 	bl	800a888 <_realloc_r>
 800a438:	4606      	mov	r6, r0
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d1e0      	bne.n	800a400 <__ssputs_r+0x5c>
 800a43e:	6921      	ldr	r1, [r4, #16]
 800a440:	4650      	mov	r0, sl
 800a442:	f7ff fb2d 	bl	8009aa0 <_free_r>
 800a446:	230c      	movs	r3, #12
 800a448:	f8ca 3000 	str.w	r3, [sl]
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	e7e9      	b.n	800a42e <__ssputs_r+0x8a>
	...

0800a45c <_svfiprintf_r>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	4698      	mov	r8, r3
 800a462:	898b      	ldrh	r3, [r1, #12]
 800a464:	061b      	lsls	r3, r3, #24
 800a466:	b09d      	sub	sp, #116	@ 0x74
 800a468:	4607      	mov	r7, r0
 800a46a:	460d      	mov	r5, r1
 800a46c:	4614      	mov	r4, r2
 800a46e:	d510      	bpl.n	800a492 <_svfiprintf_r+0x36>
 800a470:	690b      	ldr	r3, [r1, #16]
 800a472:	b973      	cbnz	r3, 800a492 <_svfiprintf_r+0x36>
 800a474:	2140      	movs	r1, #64	@ 0x40
 800a476:	f7ff fb87 	bl	8009b88 <_malloc_r>
 800a47a:	6028      	str	r0, [r5, #0]
 800a47c:	6128      	str	r0, [r5, #16]
 800a47e:	b930      	cbnz	r0, 800a48e <_svfiprintf_r+0x32>
 800a480:	230c      	movs	r3, #12
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	b01d      	add	sp, #116	@ 0x74
 800a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48e:	2340      	movs	r3, #64	@ 0x40
 800a490:	616b      	str	r3, [r5, #20]
 800a492:	2300      	movs	r3, #0
 800a494:	9309      	str	r3, [sp, #36]	@ 0x24
 800a496:	2320      	movs	r3, #32
 800a498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a0:	2330      	movs	r3, #48	@ 0x30
 800a4a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a640 <_svfiprintf_r+0x1e4>
 800a4a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4aa:	f04f 0901 	mov.w	r9, #1
 800a4ae:	4623      	mov	r3, r4
 800a4b0:	469a      	mov	sl, r3
 800a4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b6:	b10a      	cbz	r2, 800a4bc <_svfiprintf_r+0x60>
 800a4b8:	2a25      	cmp	r2, #37	@ 0x25
 800a4ba:	d1f9      	bne.n	800a4b0 <_svfiprintf_r+0x54>
 800a4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c0:	d00b      	beq.n	800a4da <_svfiprintf_r+0x7e>
 800a4c2:	465b      	mov	r3, fp
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff ff6b 	bl	800a3a4 <__ssputs_r>
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	f000 80a7 	beq.w	800a622 <_svfiprintf_r+0x1c6>
 800a4d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4d6:	445a      	add	r2, fp
 800a4d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4da:	f89a 3000 	ldrb.w	r3, [sl]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 809f 	beq.w	800a622 <_svfiprintf_r+0x1c6>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ee:	f10a 0a01 	add.w	sl, sl, #1
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	9307      	str	r3, [sp, #28]
 800a4f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4fc:	4654      	mov	r4, sl
 800a4fe:	2205      	movs	r2, #5
 800a500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a504:	484e      	ldr	r0, [pc, #312]	@ (800a640 <_svfiprintf_r+0x1e4>)
 800a506:	f7f5 fe83 	bl	8000210 <memchr>
 800a50a:	9a04      	ldr	r2, [sp, #16]
 800a50c:	b9d8      	cbnz	r0, 800a546 <_svfiprintf_r+0xea>
 800a50e:	06d0      	lsls	r0, r2, #27
 800a510:	bf44      	itt	mi
 800a512:	2320      	movmi	r3, #32
 800a514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a518:	0711      	lsls	r1, r2, #28
 800a51a:	bf44      	itt	mi
 800a51c:	232b      	movmi	r3, #43	@ 0x2b
 800a51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a522:	f89a 3000 	ldrb.w	r3, [sl]
 800a526:	2b2a      	cmp	r3, #42	@ 0x2a
 800a528:	d015      	beq.n	800a556 <_svfiprintf_r+0xfa>
 800a52a:	9a07      	ldr	r2, [sp, #28]
 800a52c:	4654      	mov	r4, sl
 800a52e:	2000      	movs	r0, #0
 800a530:	f04f 0c0a 	mov.w	ip, #10
 800a534:	4621      	mov	r1, r4
 800a536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a53a:	3b30      	subs	r3, #48	@ 0x30
 800a53c:	2b09      	cmp	r3, #9
 800a53e:	d94b      	bls.n	800a5d8 <_svfiprintf_r+0x17c>
 800a540:	b1b0      	cbz	r0, 800a570 <_svfiprintf_r+0x114>
 800a542:	9207      	str	r2, [sp, #28]
 800a544:	e014      	b.n	800a570 <_svfiprintf_r+0x114>
 800a546:	eba0 0308 	sub.w	r3, r0, r8
 800a54a:	fa09 f303 	lsl.w	r3, r9, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	46a2      	mov	sl, r4
 800a554:	e7d2      	b.n	800a4fc <_svfiprintf_r+0xa0>
 800a556:	9b03      	ldr	r3, [sp, #12]
 800a558:	1d19      	adds	r1, r3, #4
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	9103      	str	r1, [sp, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfbb      	ittet	lt
 800a562:	425b      	neglt	r3, r3
 800a564:	f042 0202 	orrlt.w	r2, r2, #2
 800a568:	9307      	strge	r3, [sp, #28]
 800a56a:	9307      	strlt	r3, [sp, #28]
 800a56c:	bfb8      	it	lt
 800a56e:	9204      	strlt	r2, [sp, #16]
 800a570:	7823      	ldrb	r3, [r4, #0]
 800a572:	2b2e      	cmp	r3, #46	@ 0x2e
 800a574:	d10a      	bne.n	800a58c <_svfiprintf_r+0x130>
 800a576:	7863      	ldrb	r3, [r4, #1]
 800a578:	2b2a      	cmp	r3, #42	@ 0x2a
 800a57a:	d132      	bne.n	800a5e2 <_svfiprintf_r+0x186>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	1d1a      	adds	r2, r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	9203      	str	r2, [sp, #12]
 800a584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a588:	3402      	adds	r4, #2
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a650 <_svfiprintf_r+0x1f4>
 800a590:	7821      	ldrb	r1, [r4, #0]
 800a592:	2203      	movs	r2, #3
 800a594:	4650      	mov	r0, sl
 800a596:	f7f5 fe3b 	bl	8000210 <memchr>
 800a59a:	b138      	cbz	r0, 800a5ac <_svfiprintf_r+0x150>
 800a59c:	9b04      	ldr	r3, [sp, #16]
 800a59e:	eba0 000a 	sub.w	r0, r0, sl
 800a5a2:	2240      	movs	r2, #64	@ 0x40
 800a5a4:	4082      	lsls	r2, r0
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	3401      	adds	r4, #1
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	4824      	ldr	r0, [pc, #144]	@ (800a644 <_svfiprintf_r+0x1e8>)
 800a5b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5b6:	2206      	movs	r2, #6
 800a5b8:	f7f5 fe2a 	bl	8000210 <memchr>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d036      	beq.n	800a62e <_svfiprintf_r+0x1d2>
 800a5c0:	4b21      	ldr	r3, [pc, #132]	@ (800a648 <_svfiprintf_r+0x1ec>)
 800a5c2:	bb1b      	cbnz	r3, 800a60c <_svfiprintf_r+0x1b0>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	3307      	adds	r3, #7
 800a5c8:	f023 0307 	bic.w	r3, r3, #7
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d2:	4433      	add	r3, r6
 800a5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d6:	e76a      	b.n	800a4ae <_svfiprintf_r+0x52>
 800a5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5dc:	460c      	mov	r4, r1
 800a5de:	2001      	movs	r0, #1
 800a5e0:	e7a8      	b.n	800a534 <_svfiprintf_r+0xd8>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f04f 0c0a 	mov.w	ip, #10
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f4:	3a30      	subs	r2, #48	@ 0x30
 800a5f6:	2a09      	cmp	r2, #9
 800a5f8:	d903      	bls.n	800a602 <_svfiprintf_r+0x1a6>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0c6      	beq.n	800a58c <_svfiprintf_r+0x130>
 800a5fe:	9105      	str	r1, [sp, #20]
 800a600:	e7c4      	b.n	800a58c <_svfiprintf_r+0x130>
 800a602:	fb0c 2101 	mla	r1, ip, r1, r2
 800a606:	4604      	mov	r4, r0
 800a608:	2301      	movs	r3, #1
 800a60a:	e7f0      	b.n	800a5ee <_svfiprintf_r+0x192>
 800a60c:	ab03      	add	r3, sp, #12
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	462a      	mov	r2, r5
 800a612:	4b0e      	ldr	r3, [pc, #56]	@ (800a64c <_svfiprintf_r+0x1f0>)
 800a614:	a904      	add	r1, sp, #16
 800a616:	4638      	mov	r0, r7
 800a618:	f7fd fe76 	bl	8008308 <_printf_float>
 800a61c:	1c42      	adds	r2, r0, #1
 800a61e:	4606      	mov	r6, r0
 800a620:	d1d6      	bne.n	800a5d0 <_svfiprintf_r+0x174>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	065b      	lsls	r3, r3, #25
 800a626:	f53f af2d 	bmi.w	800a484 <_svfiprintf_r+0x28>
 800a62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a62c:	e72c      	b.n	800a488 <_svfiprintf_r+0x2c>
 800a62e:	ab03      	add	r3, sp, #12
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	462a      	mov	r2, r5
 800a634:	4b05      	ldr	r3, [pc, #20]	@ (800a64c <_svfiprintf_r+0x1f0>)
 800a636:	a904      	add	r1, sp, #16
 800a638:	4638      	mov	r0, r7
 800a63a:	f7fe f8fd 	bl	8008838 <_printf_i>
 800a63e:	e7ed      	b.n	800a61c <_svfiprintf_r+0x1c0>
 800a640:	0800bee0 	.word	0x0800bee0
 800a644:	0800beea 	.word	0x0800beea
 800a648:	08008309 	.word	0x08008309
 800a64c:	0800a3a5 	.word	0x0800a3a5
 800a650:	0800bee6 	.word	0x0800bee6

0800a654 <__sflush_r>:
 800a654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65c:	0716      	lsls	r6, r2, #28
 800a65e:	4605      	mov	r5, r0
 800a660:	460c      	mov	r4, r1
 800a662:	d454      	bmi.n	800a70e <__sflush_r+0xba>
 800a664:	684b      	ldr	r3, [r1, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	dc02      	bgt.n	800a670 <__sflush_r+0x1c>
 800a66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	dd48      	ble.n	800a702 <__sflush_r+0xae>
 800a670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a672:	2e00      	cmp	r6, #0
 800a674:	d045      	beq.n	800a702 <__sflush_r+0xae>
 800a676:	2300      	movs	r3, #0
 800a678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a67c:	682f      	ldr	r7, [r5, #0]
 800a67e:	6a21      	ldr	r1, [r4, #32]
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	d030      	beq.n	800a6e6 <__sflush_r+0x92>
 800a684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	0759      	lsls	r1, r3, #29
 800a68a:	d505      	bpl.n	800a698 <__sflush_r+0x44>
 800a68c:	6863      	ldr	r3, [r4, #4]
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a692:	b10b      	cbz	r3, 800a698 <__sflush_r+0x44>
 800a694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	2300      	movs	r3, #0
 800a69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a69c:	6a21      	ldr	r1, [r4, #32]
 800a69e:	4628      	mov	r0, r5
 800a6a0:	47b0      	blx	r6
 800a6a2:	1c43      	adds	r3, r0, #1
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	d106      	bne.n	800a6b6 <__sflush_r+0x62>
 800a6a8:	6829      	ldr	r1, [r5, #0]
 800a6aa:	291d      	cmp	r1, #29
 800a6ac:	d82b      	bhi.n	800a706 <__sflush_r+0xb2>
 800a6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a758 <__sflush_r+0x104>)
 800a6b0:	410a      	asrs	r2, r1
 800a6b2:	07d6      	lsls	r6, r2, #31
 800a6b4:	d427      	bmi.n	800a706 <__sflush_r+0xb2>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	6062      	str	r2, [r4, #4]
 800a6ba:	04d9      	lsls	r1, r3, #19
 800a6bc:	6922      	ldr	r2, [r4, #16]
 800a6be:	6022      	str	r2, [r4, #0]
 800a6c0:	d504      	bpl.n	800a6cc <__sflush_r+0x78>
 800a6c2:	1c42      	adds	r2, r0, #1
 800a6c4:	d101      	bne.n	800a6ca <__sflush_r+0x76>
 800a6c6:	682b      	ldr	r3, [r5, #0]
 800a6c8:	b903      	cbnz	r3, 800a6cc <__sflush_r+0x78>
 800a6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ce:	602f      	str	r7, [r5, #0]
 800a6d0:	b1b9      	cbz	r1, 800a702 <__sflush_r+0xae>
 800a6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	d002      	beq.n	800a6e0 <__sflush_r+0x8c>
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f7ff f9e0 	bl	8009aa0 <_free_r>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6e4:	e00d      	b.n	800a702 <__sflush_r+0xae>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b0      	blx	r6
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	1c50      	adds	r0, r2, #1
 800a6f0:	d1c9      	bne.n	800a686 <__sflush_r+0x32>
 800a6f2:	682b      	ldr	r3, [r5, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0c6      	beq.n	800a686 <__sflush_r+0x32>
 800a6f8:	2b1d      	cmp	r3, #29
 800a6fa:	d001      	beq.n	800a700 <__sflush_r+0xac>
 800a6fc:	2b16      	cmp	r3, #22
 800a6fe:	d11e      	bne.n	800a73e <__sflush_r+0xea>
 800a700:	602f      	str	r7, [r5, #0]
 800a702:	2000      	movs	r0, #0
 800a704:	e022      	b.n	800a74c <__sflush_r+0xf8>
 800a706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a70a:	b21b      	sxth	r3, r3
 800a70c:	e01b      	b.n	800a746 <__sflush_r+0xf2>
 800a70e:	690f      	ldr	r7, [r1, #16]
 800a710:	2f00      	cmp	r7, #0
 800a712:	d0f6      	beq.n	800a702 <__sflush_r+0xae>
 800a714:	0793      	lsls	r3, r2, #30
 800a716:	680e      	ldr	r6, [r1, #0]
 800a718:	bf08      	it	eq
 800a71a:	694b      	ldreq	r3, [r1, #20]
 800a71c:	600f      	str	r7, [r1, #0]
 800a71e:	bf18      	it	ne
 800a720:	2300      	movne	r3, #0
 800a722:	eba6 0807 	sub.w	r8, r6, r7
 800a726:	608b      	str	r3, [r1, #8]
 800a728:	f1b8 0f00 	cmp.w	r8, #0
 800a72c:	dde9      	ble.n	800a702 <__sflush_r+0xae>
 800a72e:	6a21      	ldr	r1, [r4, #32]
 800a730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a732:	4643      	mov	r3, r8
 800a734:	463a      	mov	r2, r7
 800a736:	4628      	mov	r0, r5
 800a738:	47b0      	blx	r6
 800a73a:	2800      	cmp	r0, #0
 800a73c:	dc08      	bgt.n	800a750 <__sflush_r+0xfc>
 800a73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a746:	81a3      	strh	r3, [r4, #12]
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	4407      	add	r7, r0
 800a752:	eba8 0800 	sub.w	r8, r8, r0
 800a756:	e7e7      	b.n	800a728 <__sflush_r+0xd4>
 800a758:	dfbffffe 	.word	0xdfbffffe

0800a75c <_fflush_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	690b      	ldr	r3, [r1, #16]
 800a760:	4605      	mov	r5, r0
 800a762:	460c      	mov	r4, r1
 800a764:	b913      	cbnz	r3, 800a76c <_fflush_r+0x10>
 800a766:	2500      	movs	r5, #0
 800a768:	4628      	mov	r0, r5
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	b118      	cbz	r0, 800a776 <_fflush_r+0x1a>
 800a76e:	6a03      	ldr	r3, [r0, #32]
 800a770:	b90b      	cbnz	r3, 800a776 <_fflush_r+0x1a>
 800a772:	f7fe fa0d 	bl	8008b90 <__sinit>
 800a776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0f3      	beq.n	800a766 <_fflush_r+0xa>
 800a77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a780:	07d0      	lsls	r0, r2, #31
 800a782:	d404      	bmi.n	800a78e <_fflush_r+0x32>
 800a784:	0599      	lsls	r1, r3, #22
 800a786:	d402      	bmi.n	800a78e <_fflush_r+0x32>
 800a788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a78a:	f7fe fb2c 	bl	8008de6 <__retarget_lock_acquire_recursive>
 800a78e:	4628      	mov	r0, r5
 800a790:	4621      	mov	r1, r4
 800a792:	f7ff ff5f 	bl	800a654 <__sflush_r>
 800a796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a798:	07da      	lsls	r2, r3, #31
 800a79a:	4605      	mov	r5, r0
 800a79c:	d4e4      	bmi.n	800a768 <_fflush_r+0xc>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	059b      	lsls	r3, r3, #22
 800a7a2:	d4e1      	bmi.n	800a768 <_fflush_r+0xc>
 800a7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7a6:	f7fe fb1f 	bl	8008de8 <__retarget_lock_release_recursive>
 800a7aa:	e7dd      	b.n	800a768 <_fflush_r+0xc>

0800a7ac <memmove>:
 800a7ac:	4288      	cmp	r0, r1
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	eb01 0402 	add.w	r4, r1, r2
 800a7b4:	d902      	bls.n	800a7bc <memmove+0x10>
 800a7b6:	4284      	cmp	r4, r0
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	d807      	bhi.n	800a7cc <memmove+0x20>
 800a7bc:	1e43      	subs	r3, r0, #1
 800a7be:	42a1      	cmp	r1, r4
 800a7c0:	d008      	beq.n	800a7d4 <memmove+0x28>
 800a7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ca:	e7f8      	b.n	800a7be <memmove+0x12>
 800a7cc:	4402      	add	r2, r0
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	428a      	cmp	r2, r1
 800a7d2:	d100      	bne.n	800a7d6 <memmove+0x2a>
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7de:	e7f7      	b.n	800a7d0 <memmove+0x24>

0800a7e0 <_sbrk_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d06      	ldr	r5, [pc, #24]	@ (800a7fc <_sbrk_r+0x1c>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	f7f7 fc5c 	bl	80020a8 <_sbrk>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_sbrk_r+0x1a>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_sbrk_r+0x1a>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20006870 	.word	0x20006870

0800a800 <__assert_func>:
 800a800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a802:	4614      	mov	r4, r2
 800a804:	461a      	mov	r2, r3
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <__assert_func+0x2c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4605      	mov	r5, r0
 800a80c:	68d8      	ldr	r0, [r3, #12]
 800a80e:	b954      	cbnz	r4, 800a826 <__assert_func+0x26>
 800a810:	4b07      	ldr	r3, [pc, #28]	@ (800a830 <__assert_func+0x30>)
 800a812:	461c      	mov	r4, r3
 800a814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a818:	9100      	str	r1, [sp, #0]
 800a81a:	462b      	mov	r3, r5
 800a81c:	4905      	ldr	r1, [pc, #20]	@ (800a834 <__assert_func+0x34>)
 800a81e:	f000 f86f 	bl	800a900 <fiprintf>
 800a822:	f000 f87f 	bl	800a924 <abort>
 800a826:	4b04      	ldr	r3, [pc, #16]	@ (800a838 <__assert_func+0x38>)
 800a828:	e7f4      	b.n	800a814 <__assert_func+0x14>
 800a82a:	bf00      	nop
 800a82c:	2000001c 	.word	0x2000001c
 800a830:	0800bf36 	.word	0x0800bf36
 800a834:	0800bf08 	.word	0x0800bf08
 800a838:	0800befb 	.word	0x0800befb

0800a83c <_calloc_r>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	fba1 5402 	umull	r5, r4, r1, r2
 800a842:	b93c      	cbnz	r4, 800a854 <_calloc_r+0x18>
 800a844:	4629      	mov	r1, r5
 800a846:	f7ff f99f 	bl	8009b88 <_malloc_r>
 800a84a:	4606      	mov	r6, r0
 800a84c:	b928      	cbnz	r0, 800a85a <_calloc_r+0x1e>
 800a84e:	2600      	movs	r6, #0
 800a850:	4630      	mov	r0, r6
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	220c      	movs	r2, #12
 800a856:	6002      	str	r2, [r0, #0]
 800a858:	e7f9      	b.n	800a84e <_calloc_r+0x12>
 800a85a:	462a      	mov	r2, r5
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7fe fa44 	bl	8008cea <memset>
 800a862:	e7f5      	b.n	800a850 <_calloc_r+0x14>

0800a864 <__ascii_mbtowc>:
 800a864:	b082      	sub	sp, #8
 800a866:	b901      	cbnz	r1, 800a86a <__ascii_mbtowc+0x6>
 800a868:	a901      	add	r1, sp, #4
 800a86a:	b142      	cbz	r2, 800a87e <__ascii_mbtowc+0x1a>
 800a86c:	b14b      	cbz	r3, 800a882 <__ascii_mbtowc+0x1e>
 800a86e:	7813      	ldrb	r3, [r2, #0]
 800a870:	600b      	str	r3, [r1, #0]
 800a872:	7812      	ldrb	r2, [r2, #0]
 800a874:	1e10      	subs	r0, r2, #0
 800a876:	bf18      	it	ne
 800a878:	2001      	movne	r0, #1
 800a87a:	b002      	add	sp, #8
 800a87c:	4770      	bx	lr
 800a87e:	4610      	mov	r0, r2
 800a880:	e7fb      	b.n	800a87a <__ascii_mbtowc+0x16>
 800a882:	f06f 0001 	mvn.w	r0, #1
 800a886:	e7f8      	b.n	800a87a <__ascii_mbtowc+0x16>

0800a888 <_realloc_r>:
 800a888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	4680      	mov	r8, r0
 800a88e:	4615      	mov	r5, r2
 800a890:	460c      	mov	r4, r1
 800a892:	b921      	cbnz	r1, 800a89e <_realloc_r+0x16>
 800a894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a898:	4611      	mov	r1, r2
 800a89a:	f7ff b975 	b.w	8009b88 <_malloc_r>
 800a89e:	b92a      	cbnz	r2, 800a8ac <_realloc_r+0x24>
 800a8a0:	f7ff f8fe 	bl	8009aa0 <_free_r>
 800a8a4:	2400      	movs	r4, #0
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ac:	f000 f841 	bl	800a932 <_malloc_usable_size_r>
 800a8b0:	4285      	cmp	r5, r0
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	d802      	bhi.n	800a8bc <_realloc_r+0x34>
 800a8b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8ba:	d8f4      	bhi.n	800a8a6 <_realloc_r+0x1e>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7ff f962 	bl	8009b88 <_malloc_r>
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d0ec      	beq.n	800a8a4 <_realloc_r+0x1c>
 800a8ca:	42b5      	cmp	r5, r6
 800a8cc:	462a      	mov	r2, r5
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	bf28      	it	cs
 800a8d2:	4632      	movcs	r2, r6
 800a8d4:	f7fe fa89 	bl	8008dea <memcpy>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4640      	mov	r0, r8
 800a8dc:	f7ff f8e0 	bl	8009aa0 <_free_r>
 800a8e0:	463c      	mov	r4, r7
 800a8e2:	e7e0      	b.n	800a8a6 <_realloc_r+0x1e>

0800a8e4 <__ascii_wctomb>:
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	b141      	cbz	r1, 800a8fc <__ascii_wctomb+0x18>
 800a8ea:	2aff      	cmp	r2, #255	@ 0xff
 800a8ec:	d904      	bls.n	800a8f8 <__ascii_wctomb+0x14>
 800a8ee:	228a      	movs	r2, #138	@ 0x8a
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f6:	4770      	bx	lr
 800a8f8:	700a      	strb	r2, [r1, #0]
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	4770      	bx	lr
	...

0800a900 <fiprintf>:
 800a900:	b40e      	push	{r1, r2, r3}
 800a902:	b503      	push	{r0, r1, lr}
 800a904:	4601      	mov	r1, r0
 800a906:	ab03      	add	r3, sp, #12
 800a908:	4805      	ldr	r0, [pc, #20]	@ (800a920 <fiprintf+0x20>)
 800a90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90e:	6800      	ldr	r0, [r0, #0]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	f000 f83f 	bl	800a994 <_vfiprintf_r>
 800a916:	b002      	add	sp, #8
 800a918:	f85d eb04 	ldr.w	lr, [sp], #4
 800a91c:	b003      	add	sp, #12
 800a91e:	4770      	bx	lr
 800a920:	2000001c 	.word	0x2000001c

0800a924 <abort>:
 800a924:	b508      	push	{r3, lr}
 800a926:	2006      	movs	r0, #6
 800a928:	f000 fa08 	bl	800ad3c <raise>
 800a92c:	2001      	movs	r0, #1
 800a92e:	f7f7 fb43 	bl	8001fb8 <_exit>

0800a932 <_malloc_usable_size_r>:
 800a932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a936:	1f18      	subs	r0, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bfbc      	itt	lt
 800a93c:	580b      	ldrlt	r3, [r1, r0]
 800a93e:	18c0      	addlt	r0, r0, r3
 800a940:	4770      	bx	lr

0800a942 <__sfputc_r>:
 800a942:	6893      	ldr	r3, [r2, #8]
 800a944:	3b01      	subs	r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	b410      	push	{r4}
 800a94a:	6093      	str	r3, [r2, #8]
 800a94c:	da08      	bge.n	800a960 <__sfputc_r+0x1e>
 800a94e:	6994      	ldr	r4, [r2, #24]
 800a950:	42a3      	cmp	r3, r4
 800a952:	db01      	blt.n	800a958 <__sfputc_r+0x16>
 800a954:	290a      	cmp	r1, #10
 800a956:	d103      	bne.n	800a960 <__sfputc_r+0x1e>
 800a958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a95c:	f000 b932 	b.w	800abc4 <__swbuf_r>
 800a960:	6813      	ldr	r3, [r2, #0]
 800a962:	1c58      	adds	r0, r3, #1
 800a964:	6010      	str	r0, [r2, #0]
 800a966:	7019      	strb	r1, [r3, #0]
 800a968:	4608      	mov	r0, r1
 800a96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <__sfputs_r>:
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	4614      	mov	r4, r2
 800a978:	18d5      	adds	r5, r2, r3
 800a97a:	42ac      	cmp	r4, r5
 800a97c:	d101      	bne.n	800a982 <__sfputs_r+0x12>
 800a97e:	2000      	movs	r0, #0
 800a980:	e007      	b.n	800a992 <__sfputs_r+0x22>
 800a982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a986:	463a      	mov	r2, r7
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff ffda 	bl	800a942 <__sfputc_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d1f3      	bne.n	800a97a <__sfputs_r+0xa>
 800a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a994 <_vfiprintf_r>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	460d      	mov	r5, r1
 800a99a:	b09d      	sub	sp, #116	@ 0x74
 800a99c:	4614      	mov	r4, r2
 800a99e:	4698      	mov	r8, r3
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	b118      	cbz	r0, 800a9ac <_vfiprintf_r+0x18>
 800a9a4:	6a03      	ldr	r3, [r0, #32]
 800a9a6:	b90b      	cbnz	r3, 800a9ac <_vfiprintf_r+0x18>
 800a9a8:	f7fe f8f2 	bl	8008b90 <__sinit>
 800a9ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d405      	bmi.n	800a9be <_vfiprintf_r+0x2a>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	059a      	lsls	r2, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_vfiprintf_r+0x2a>
 800a9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ba:	f7fe fa14 	bl	8008de6 <__retarget_lock_acquire_recursive>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	071b      	lsls	r3, r3, #28
 800a9c2:	d501      	bpl.n	800a9c8 <_vfiprintf_r+0x34>
 800a9c4:	692b      	ldr	r3, [r5, #16]
 800a9c6:	b99b      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x5c>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f000 f938 	bl	800ac40 <__swsetup_r>
 800a9d0:	b170      	cbz	r0, 800a9f0 <_vfiprintf_r+0x5c>
 800a9d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9d4:	07dc      	lsls	r4, r3, #31
 800a9d6:	d504      	bpl.n	800a9e2 <_vfiprintf_r+0x4e>
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	b01d      	add	sp, #116	@ 0x74
 800a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e2:	89ab      	ldrh	r3, [r5, #12]
 800a9e4:	0598      	lsls	r0, r3, #22
 800a9e6:	d4f7      	bmi.n	800a9d8 <_vfiprintf_r+0x44>
 800a9e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ea:	f7fe f9fd 	bl	8008de8 <__retarget_lock_release_recursive>
 800a9ee:	e7f3      	b.n	800a9d8 <_vfiprintf_r+0x44>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9f4:	2320      	movs	r3, #32
 800a9f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fe:	2330      	movs	r3, #48	@ 0x30
 800aa00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abb0 <_vfiprintf_r+0x21c>
 800aa04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa08:	f04f 0901 	mov.w	r9, #1
 800aa0c:	4623      	mov	r3, r4
 800aa0e:	469a      	mov	sl, r3
 800aa10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa14:	b10a      	cbz	r2, 800aa1a <_vfiprintf_r+0x86>
 800aa16:	2a25      	cmp	r2, #37	@ 0x25
 800aa18:	d1f9      	bne.n	800aa0e <_vfiprintf_r+0x7a>
 800aa1a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa1e:	d00b      	beq.n	800aa38 <_vfiprintf_r+0xa4>
 800aa20:	465b      	mov	r3, fp
 800aa22:	4622      	mov	r2, r4
 800aa24:	4629      	mov	r1, r5
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff ffa2 	bl	800a970 <__sfputs_r>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	f000 80a7 	beq.w	800ab80 <_vfiprintf_r+0x1ec>
 800aa32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa34:	445a      	add	r2, fp
 800aa36:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa38:	f89a 3000 	ldrb.w	r3, [sl]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 809f 	beq.w	800ab80 <_vfiprintf_r+0x1ec>
 800aa42:	2300      	movs	r3, #0
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295
 800aa48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa4c:	f10a 0a01 	add.w	sl, sl, #1
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	9307      	str	r3, [sp, #28]
 800aa54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa58:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa5a:	4654      	mov	r4, sl
 800aa5c:	2205      	movs	r2, #5
 800aa5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa62:	4853      	ldr	r0, [pc, #332]	@ (800abb0 <_vfiprintf_r+0x21c>)
 800aa64:	f7f5 fbd4 	bl	8000210 <memchr>
 800aa68:	9a04      	ldr	r2, [sp, #16]
 800aa6a:	b9d8      	cbnz	r0, 800aaa4 <_vfiprintf_r+0x110>
 800aa6c:	06d1      	lsls	r1, r2, #27
 800aa6e:	bf44      	itt	mi
 800aa70:	2320      	movmi	r3, #32
 800aa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa76:	0713      	lsls	r3, r2, #28
 800aa78:	bf44      	itt	mi
 800aa7a:	232b      	movmi	r3, #43	@ 0x2b
 800aa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa80:	f89a 3000 	ldrb.w	r3, [sl]
 800aa84:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa86:	d015      	beq.n	800aab4 <_vfiprintf_r+0x120>
 800aa88:	9a07      	ldr	r2, [sp, #28]
 800aa8a:	4654      	mov	r4, sl
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f04f 0c0a 	mov.w	ip, #10
 800aa92:	4621      	mov	r1, r4
 800aa94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa98:	3b30      	subs	r3, #48	@ 0x30
 800aa9a:	2b09      	cmp	r3, #9
 800aa9c:	d94b      	bls.n	800ab36 <_vfiprintf_r+0x1a2>
 800aa9e:	b1b0      	cbz	r0, 800aace <_vfiprintf_r+0x13a>
 800aaa0:	9207      	str	r2, [sp, #28]
 800aaa2:	e014      	b.n	800aace <_vfiprintf_r+0x13a>
 800aaa4:	eba0 0308 	sub.w	r3, r0, r8
 800aaa8:	fa09 f303 	lsl.w	r3, r9, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	46a2      	mov	sl, r4
 800aab2:	e7d2      	b.n	800aa5a <_vfiprintf_r+0xc6>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	1d19      	adds	r1, r3, #4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	9103      	str	r1, [sp, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bfbb      	ittet	lt
 800aac0:	425b      	neglt	r3, r3
 800aac2:	f042 0202 	orrlt.w	r2, r2, #2
 800aac6:	9307      	strge	r3, [sp, #28]
 800aac8:	9307      	strlt	r3, [sp, #28]
 800aaca:	bfb8      	it	lt
 800aacc:	9204      	strlt	r2, [sp, #16]
 800aace:	7823      	ldrb	r3, [r4, #0]
 800aad0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aad2:	d10a      	bne.n	800aaea <_vfiprintf_r+0x156>
 800aad4:	7863      	ldrb	r3, [r4, #1]
 800aad6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad8:	d132      	bne.n	800ab40 <_vfiprintf_r+0x1ac>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	1d1a      	adds	r2, r3, #4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	9203      	str	r2, [sp, #12]
 800aae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aae6:	3402      	adds	r4, #2
 800aae8:	9305      	str	r3, [sp, #20]
 800aaea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abc0 <_vfiprintf_r+0x22c>
 800aaee:	7821      	ldrb	r1, [r4, #0]
 800aaf0:	2203      	movs	r2, #3
 800aaf2:	4650      	mov	r0, sl
 800aaf4:	f7f5 fb8c 	bl	8000210 <memchr>
 800aaf8:	b138      	cbz	r0, 800ab0a <_vfiprintf_r+0x176>
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	eba0 000a 	sub.w	r0, r0, sl
 800ab00:	2240      	movs	r2, #64	@ 0x40
 800ab02:	4082      	lsls	r2, r0
 800ab04:	4313      	orrs	r3, r2
 800ab06:	3401      	adds	r4, #1
 800ab08:	9304      	str	r3, [sp, #16]
 800ab0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0e:	4829      	ldr	r0, [pc, #164]	@ (800abb4 <_vfiprintf_r+0x220>)
 800ab10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab14:	2206      	movs	r2, #6
 800ab16:	f7f5 fb7b 	bl	8000210 <memchr>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d03f      	beq.n	800ab9e <_vfiprintf_r+0x20a>
 800ab1e:	4b26      	ldr	r3, [pc, #152]	@ (800abb8 <_vfiprintf_r+0x224>)
 800ab20:	bb1b      	cbnz	r3, 800ab6a <_vfiprintf_r+0x1d6>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	3307      	adds	r3, #7
 800ab26:	f023 0307 	bic.w	r3, r3, #7
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab30:	443b      	add	r3, r7
 800ab32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab34:	e76a      	b.n	800aa0c <_vfiprintf_r+0x78>
 800ab36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	e7a8      	b.n	800aa92 <_vfiprintf_r+0xfe>
 800ab40:	2300      	movs	r3, #0
 800ab42:	3401      	adds	r4, #1
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	4619      	mov	r1, r3
 800ab48:	f04f 0c0a 	mov.w	ip, #10
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab52:	3a30      	subs	r2, #48	@ 0x30
 800ab54:	2a09      	cmp	r2, #9
 800ab56:	d903      	bls.n	800ab60 <_vfiprintf_r+0x1cc>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0c6      	beq.n	800aaea <_vfiprintf_r+0x156>
 800ab5c:	9105      	str	r1, [sp, #20]
 800ab5e:	e7c4      	b.n	800aaea <_vfiprintf_r+0x156>
 800ab60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab64:	4604      	mov	r4, r0
 800ab66:	2301      	movs	r3, #1
 800ab68:	e7f0      	b.n	800ab4c <_vfiprintf_r+0x1b8>
 800ab6a:	ab03      	add	r3, sp, #12
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4b12      	ldr	r3, [pc, #72]	@ (800abbc <_vfiprintf_r+0x228>)
 800ab72:	a904      	add	r1, sp, #16
 800ab74:	4630      	mov	r0, r6
 800ab76:	f7fd fbc7 	bl	8008308 <_printf_float>
 800ab7a:	4607      	mov	r7, r0
 800ab7c:	1c78      	adds	r0, r7, #1
 800ab7e:	d1d6      	bne.n	800ab2e <_vfiprintf_r+0x19a>
 800ab80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab82:	07d9      	lsls	r1, r3, #31
 800ab84:	d405      	bmi.n	800ab92 <_vfiprintf_r+0x1fe>
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	059a      	lsls	r2, r3, #22
 800ab8a:	d402      	bmi.n	800ab92 <_vfiprintf_r+0x1fe>
 800ab8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab8e:	f7fe f92b 	bl	8008de8 <__retarget_lock_release_recursive>
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	065b      	lsls	r3, r3, #25
 800ab96:	f53f af1f 	bmi.w	800a9d8 <_vfiprintf_r+0x44>
 800ab9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab9c:	e71e      	b.n	800a9dc <_vfiprintf_r+0x48>
 800ab9e:	ab03      	add	r3, sp, #12
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	462a      	mov	r2, r5
 800aba4:	4b05      	ldr	r3, [pc, #20]	@ (800abbc <_vfiprintf_r+0x228>)
 800aba6:	a904      	add	r1, sp, #16
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7fd fe45 	bl	8008838 <_printf_i>
 800abae:	e7e4      	b.n	800ab7a <_vfiprintf_r+0x1e6>
 800abb0:	0800bee0 	.word	0x0800bee0
 800abb4:	0800beea 	.word	0x0800beea
 800abb8:	08008309 	.word	0x08008309
 800abbc:	0800a971 	.word	0x0800a971
 800abc0:	0800bee6 	.word	0x0800bee6

0800abc4 <__swbuf_r>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	460e      	mov	r6, r1
 800abc8:	4614      	mov	r4, r2
 800abca:	4605      	mov	r5, r0
 800abcc:	b118      	cbz	r0, 800abd6 <__swbuf_r+0x12>
 800abce:	6a03      	ldr	r3, [r0, #32]
 800abd0:	b90b      	cbnz	r3, 800abd6 <__swbuf_r+0x12>
 800abd2:	f7fd ffdd 	bl	8008b90 <__sinit>
 800abd6:	69a3      	ldr	r3, [r4, #24]
 800abd8:	60a3      	str	r3, [r4, #8]
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	071a      	lsls	r2, r3, #28
 800abde:	d501      	bpl.n	800abe4 <__swbuf_r+0x20>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	b943      	cbnz	r3, 800abf6 <__swbuf_r+0x32>
 800abe4:	4621      	mov	r1, r4
 800abe6:	4628      	mov	r0, r5
 800abe8:	f000 f82a 	bl	800ac40 <__swsetup_r>
 800abec:	b118      	cbz	r0, 800abf6 <__swbuf_r+0x32>
 800abee:	f04f 37ff 	mov.w	r7, #4294967295
 800abf2:	4638      	mov	r0, r7
 800abf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	6922      	ldr	r2, [r4, #16]
 800abfa:	1a98      	subs	r0, r3, r2
 800abfc:	6963      	ldr	r3, [r4, #20]
 800abfe:	b2f6      	uxtb	r6, r6
 800ac00:	4283      	cmp	r3, r0
 800ac02:	4637      	mov	r7, r6
 800ac04:	dc05      	bgt.n	800ac12 <__swbuf_r+0x4e>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7ff fda7 	bl	800a75c <_fflush_r>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d1ed      	bne.n	800abee <__swbuf_r+0x2a>
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	60a3      	str	r3, [r4, #8]
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	6022      	str	r2, [r4, #0]
 800ac1e:	701e      	strb	r6, [r3, #0]
 800ac20:	6962      	ldr	r2, [r4, #20]
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d004      	beq.n	800ac32 <__swbuf_r+0x6e>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	07db      	lsls	r3, r3, #31
 800ac2c:	d5e1      	bpl.n	800abf2 <__swbuf_r+0x2e>
 800ac2e:	2e0a      	cmp	r6, #10
 800ac30:	d1df      	bne.n	800abf2 <__swbuf_r+0x2e>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f7ff fd91 	bl	800a75c <_fflush_r>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d0d9      	beq.n	800abf2 <__swbuf_r+0x2e>
 800ac3e:	e7d6      	b.n	800abee <__swbuf_r+0x2a>

0800ac40 <__swsetup_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4b29      	ldr	r3, [pc, #164]	@ (800ace8 <__swsetup_r+0xa8>)
 800ac44:	4605      	mov	r5, r0
 800ac46:	6818      	ldr	r0, [r3, #0]
 800ac48:	460c      	mov	r4, r1
 800ac4a:	b118      	cbz	r0, 800ac54 <__swsetup_r+0x14>
 800ac4c:	6a03      	ldr	r3, [r0, #32]
 800ac4e:	b90b      	cbnz	r3, 800ac54 <__swsetup_r+0x14>
 800ac50:	f7fd ff9e 	bl	8008b90 <__sinit>
 800ac54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac58:	0719      	lsls	r1, r3, #28
 800ac5a:	d422      	bmi.n	800aca2 <__swsetup_r+0x62>
 800ac5c:	06da      	lsls	r2, r3, #27
 800ac5e:	d407      	bmi.n	800ac70 <__swsetup_r+0x30>
 800ac60:	2209      	movs	r2, #9
 800ac62:	602a      	str	r2, [r5, #0]
 800ac64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6e:	e033      	b.n	800acd8 <__swsetup_r+0x98>
 800ac70:	0758      	lsls	r0, r3, #29
 800ac72:	d512      	bpl.n	800ac9a <__swsetup_r+0x5a>
 800ac74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac76:	b141      	cbz	r1, 800ac8a <__swsetup_r+0x4a>
 800ac78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	d002      	beq.n	800ac86 <__swsetup_r+0x46>
 800ac80:	4628      	mov	r0, r5
 800ac82:	f7fe ff0d 	bl	8009aa0 <_free_r>
 800ac86:	2300      	movs	r3, #0
 800ac88:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	2300      	movs	r3, #0
 800ac94:	6063      	str	r3, [r4, #4]
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f043 0308 	orr.w	r3, r3, #8
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	6923      	ldr	r3, [r4, #16]
 800aca4:	b94b      	cbnz	r3, 800acba <__swsetup_r+0x7a>
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acb0:	d003      	beq.n	800acba <__swsetup_r+0x7a>
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 f883 	bl	800adc0 <__smakebuf_r>
 800acba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbe:	f013 0201 	ands.w	r2, r3, #1
 800acc2:	d00a      	beq.n	800acda <__swsetup_r+0x9a>
 800acc4:	2200      	movs	r2, #0
 800acc6:	60a2      	str	r2, [r4, #8]
 800acc8:	6962      	ldr	r2, [r4, #20]
 800acca:	4252      	negs	r2, r2
 800accc:	61a2      	str	r2, [r4, #24]
 800acce:	6922      	ldr	r2, [r4, #16]
 800acd0:	b942      	cbnz	r2, 800ace4 <__swsetup_r+0xa4>
 800acd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acd6:	d1c5      	bne.n	800ac64 <__swsetup_r+0x24>
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	0799      	lsls	r1, r3, #30
 800acdc:	bf58      	it	pl
 800acde:	6962      	ldrpl	r2, [r4, #20]
 800ace0:	60a2      	str	r2, [r4, #8]
 800ace2:	e7f4      	b.n	800acce <__swsetup_r+0x8e>
 800ace4:	2000      	movs	r0, #0
 800ace6:	e7f7      	b.n	800acd8 <__swsetup_r+0x98>
 800ace8:	2000001c 	.word	0x2000001c

0800acec <_raise_r>:
 800acec:	291f      	cmp	r1, #31
 800acee:	b538      	push	{r3, r4, r5, lr}
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	d904      	bls.n	800ad00 <_raise_r+0x14>
 800acf6:	2316      	movs	r3, #22
 800acf8:	6003      	str	r3, [r0, #0]
 800acfa:	f04f 30ff 	mov.w	r0, #4294967295
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad02:	b112      	cbz	r2, 800ad0a <_raise_r+0x1e>
 800ad04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad08:	b94b      	cbnz	r3, 800ad1e <_raise_r+0x32>
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f000 f830 	bl	800ad70 <_getpid_r>
 800ad10:	4622      	mov	r2, r4
 800ad12:	4601      	mov	r1, r0
 800ad14:	4628      	mov	r0, r5
 800ad16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad1a:	f000 b817 	b.w	800ad4c <_kill_r>
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d00a      	beq.n	800ad38 <_raise_r+0x4c>
 800ad22:	1c59      	adds	r1, r3, #1
 800ad24:	d103      	bne.n	800ad2e <_raise_r+0x42>
 800ad26:	2316      	movs	r3, #22
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	e7e7      	b.n	800acfe <_raise_r+0x12>
 800ad2e:	2100      	movs	r1, #0
 800ad30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad34:	4620      	mov	r0, r4
 800ad36:	4798      	blx	r3
 800ad38:	2000      	movs	r0, #0
 800ad3a:	e7e0      	b.n	800acfe <_raise_r+0x12>

0800ad3c <raise>:
 800ad3c:	4b02      	ldr	r3, [pc, #8]	@ (800ad48 <raise+0xc>)
 800ad3e:	4601      	mov	r1, r0
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	f7ff bfd3 	b.w	800acec <_raise_r>
 800ad46:	bf00      	nop
 800ad48:	2000001c 	.word	0x2000001c

0800ad4c <_kill_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d07      	ldr	r5, [pc, #28]	@ (800ad6c <_kill_r+0x20>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	4611      	mov	r1, r2
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	f7f7 f91d 	bl	8001f98 <_kill>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d102      	bne.n	800ad68 <_kill_r+0x1c>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	b103      	cbz	r3, 800ad68 <_kill_r+0x1c>
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	bd38      	pop	{r3, r4, r5, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20006870 	.word	0x20006870

0800ad70 <_getpid_r>:
 800ad70:	f7f7 b90a 	b.w	8001f88 <_getpid>

0800ad74 <__swhatbuf_r>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	460c      	mov	r4, r1
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	b096      	sub	sp, #88	@ 0x58
 800ad80:	4615      	mov	r5, r2
 800ad82:	461e      	mov	r6, r3
 800ad84:	da0d      	bge.n	800ada2 <__swhatbuf_r+0x2e>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad8c:	f04f 0100 	mov.w	r1, #0
 800ad90:	bf14      	ite	ne
 800ad92:	2340      	movne	r3, #64	@ 0x40
 800ad94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad98:	2000      	movs	r0, #0
 800ad9a:	6031      	str	r1, [r6, #0]
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	b016      	add	sp, #88	@ 0x58
 800ada0:	bd70      	pop	{r4, r5, r6, pc}
 800ada2:	466a      	mov	r2, sp
 800ada4:	f000 f848 	bl	800ae38 <_fstat_r>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	dbec      	blt.n	800ad86 <__swhatbuf_r+0x12>
 800adac:	9901      	ldr	r1, [sp, #4]
 800adae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adb6:	4259      	negs	r1, r3
 800adb8:	4159      	adcs	r1, r3
 800adba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adbe:	e7eb      	b.n	800ad98 <__swhatbuf_r+0x24>

0800adc0 <__smakebuf_r>:
 800adc0:	898b      	ldrh	r3, [r1, #12]
 800adc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc4:	079d      	lsls	r5, r3, #30
 800adc6:	4606      	mov	r6, r0
 800adc8:	460c      	mov	r4, r1
 800adca:	d507      	bpl.n	800addc <__smakebuf_r+0x1c>
 800adcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	2301      	movs	r3, #1
 800add6:	6163      	str	r3, [r4, #20]
 800add8:	b003      	add	sp, #12
 800adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800addc:	ab01      	add	r3, sp, #4
 800adde:	466a      	mov	r2, sp
 800ade0:	f7ff ffc8 	bl	800ad74 <__swhatbuf_r>
 800ade4:	9f00      	ldr	r7, [sp, #0]
 800ade6:	4605      	mov	r5, r0
 800ade8:	4639      	mov	r1, r7
 800adea:	4630      	mov	r0, r6
 800adec:	f7fe fecc 	bl	8009b88 <_malloc_r>
 800adf0:	b948      	cbnz	r0, 800ae06 <__smakebuf_r+0x46>
 800adf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf6:	059a      	lsls	r2, r3, #22
 800adf8:	d4ee      	bmi.n	800add8 <__smakebuf_r+0x18>
 800adfa:	f023 0303 	bic.w	r3, r3, #3
 800adfe:	f043 0302 	orr.w	r3, r3, #2
 800ae02:	81a3      	strh	r3, [r4, #12]
 800ae04:	e7e2      	b.n	800adcc <__smakebuf_r+0xc>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	6020      	str	r0, [r4, #0]
 800ae0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	9b01      	ldr	r3, [sp, #4]
 800ae12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae16:	b15b      	cbz	r3, 800ae30 <__smakebuf_r+0x70>
 800ae18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f000 f81d 	bl	800ae5c <_isatty_r>
 800ae22:	b128      	cbz	r0, 800ae30 <__smakebuf_r+0x70>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f023 0303 	bic.w	r3, r3, #3
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	431d      	orrs	r5, r3
 800ae34:	81a5      	strh	r5, [r4, #12]
 800ae36:	e7cf      	b.n	800add8 <__smakebuf_r+0x18>

0800ae38 <_fstat_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d07      	ldr	r5, [pc, #28]	@ (800ae58 <_fstat_r+0x20>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	4611      	mov	r1, r2
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	f7f7 f907 	bl	8002058 <_fstat>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	d102      	bne.n	800ae54 <_fstat_r+0x1c>
 800ae4e:	682b      	ldr	r3, [r5, #0]
 800ae50:	b103      	cbz	r3, 800ae54 <_fstat_r+0x1c>
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	bf00      	nop
 800ae58:	20006870 	.word	0x20006870

0800ae5c <_isatty_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d06      	ldr	r5, [pc, #24]	@ (800ae78 <_isatty_r+0x1c>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	f7f7 f906 	bl	8002078 <_isatty>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_isatty_r+0x1a>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_isatty_r+0x1a>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20006870 	.word	0x20006870

0800ae7c <expf>:
 800ae7c:	b508      	push	{r3, lr}
 800ae7e:	ed2d 8b02 	vpush	{d8}
 800ae82:	eef0 8a40 	vmov.f32	s17, s0
 800ae86:	f000 f963 	bl	800b150 <__ieee754_expf>
 800ae8a:	eeb0 8a40 	vmov.f32	s16, s0
 800ae8e:	eeb0 0a68 	vmov.f32	s0, s17
 800ae92:	f000 f8b3 	bl	800affc <finitef>
 800ae96:	b160      	cbz	r0, 800aeb2 <expf+0x36>
 800ae98:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800aed8 <expf+0x5c>
 800ae9c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea4:	dd0a      	ble.n	800aebc <expf+0x40>
 800aea6:	f7fd ff73 	bl	8008d90 <__errno>
 800aeaa:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800aedc <expf+0x60>
 800aeae:	2322      	movs	r3, #34	@ 0x22
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb6:	ecbd 8b02 	vpop	{d8}
 800aeba:	bd08      	pop	{r3, pc}
 800aebc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800aee0 <expf+0x64>
 800aec0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec8:	d5f3      	bpl.n	800aeb2 <expf+0x36>
 800aeca:	f7fd ff61 	bl	8008d90 <__errno>
 800aece:	2322      	movs	r3, #34	@ 0x22
 800aed0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800aee4 <expf+0x68>
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	e7ec      	b.n	800aeb2 <expf+0x36>
 800aed8:	42b17217 	.word	0x42b17217
 800aedc:	7f800000 	.word	0x7f800000
 800aee0:	c2cff1b5 	.word	0xc2cff1b5
 800aee4:	00000000 	.word	0x00000000

0800aee8 <cosf>:
 800aee8:	ee10 3a10 	vmov	r3, s0
 800aeec:	b507      	push	{r0, r1, r2, lr}
 800aeee:	4a1e      	ldr	r2, [pc, #120]	@ (800af68 <cosf+0x80>)
 800aef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d806      	bhi.n	800af06 <cosf+0x1e>
 800aef8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800af6c <cosf+0x84>
 800aefc:	b003      	add	sp, #12
 800aefe:	f85d eb04 	ldr.w	lr, [sp], #4
 800af02:	f000 b885 	b.w	800b010 <__kernel_cosf>
 800af06:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800af0a:	d304      	bcc.n	800af16 <cosf+0x2e>
 800af0c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800af10:	b003      	add	sp, #12
 800af12:	f85d fb04 	ldr.w	pc, [sp], #4
 800af16:	4668      	mov	r0, sp
 800af18:	f000 f9e8 	bl	800b2ec <__ieee754_rem_pio2f>
 800af1c:	f000 0003 	and.w	r0, r0, #3
 800af20:	2801      	cmp	r0, #1
 800af22:	d009      	beq.n	800af38 <cosf+0x50>
 800af24:	2802      	cmp	r0, #2
 800af26:	d010      	beq.n	800af4a <cosf+0x62>
 800af28:	b9b0      	cbnz	r0, 800af58 <cosf+0x70>
 800af2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800af2e:	ed9d 0a00 	vldr	s0, [sp]
 800af32:	f000 f86d 	bl	800b010 <__kernel_cosf>
 800af36:	e7eb      	b.n	800af10 <cosf+0x28>
 800af38:	eddd 0a01 	vldr	s1, [sp, #4]
 800af3c:	ed9d 0a00 	vldr	s0, [sp]
 800af40:	f000 f8be 	bl	800b0c0 <__kernel_sinf>
 800af44:	eeb1 0a40 	vneg.f32	s0, s0
 800af48:	e7e2      	b.n	800af10 <cosf+0x28>
 800af4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800af4e:	ed9d 0a00 	vldr	s0, [sp]
 800af52:	f000 f85d 	bl	800b010 <__kernel_cosf>
 800af56:	e7f5      	b.n	800af44 <cosf+0x5c>
 800af58:	eddd 0a01 	vldr	s1, [sp, #4]
 800af5c:	ed9d 0a00 	vldr	s0, [sp]
 800af60:	2001      	movs	r0, #1
 800af62:	f000 f8ad 	bl	800b0c0 <__kernel_sinf>
 800af66:	e7d3      	b.n	800af10 <cosf+0x28>
 800af68:	3f490fd8 	.word	0x3f490fd8
 800af6c:	00000000 	.word	0x00000000

0800af70 <sinf>:
 800af70:	ee10 3a10 	vmov	r3, s0
 800af74:	b507      	push	{r0, r1, r2, lr}
 800af76:	4a1f      	ldr	r2, [pc, #124]	@ (800aff4 <sinf+0x84>)
 800af78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d807      	bhi.n	800af90 <sinf+0x20>
 800af80:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800aff8 <sinf+0x88>
 800af84:	2000      	movs	r0, #0
 800af86:	b003      	add	sp, #12
 800af88:	f85d eb04 	ldr.w	lr, [sp], #4
 800af8c:	f000 b898 	b.w	800b0c0 <__kernel_sinf>
 800af90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800af94:	d304      	bcc.n	800afa0 <sinf+0x30>
 800af96:	ee30 0a40 	vsub.f32	s0, s0, s0
 800af9a:	b003      	add	sp, #12
 800af9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800afa0:	4668      	mov	r0, sp
 800afa2:	f000 f9a3 	bl	800b2ec <__ieee754_rem_pio2f>
 800afa6:	f000 0003 	and.w	r0, r0, #3
 800afaa:	2801      	cmp	r0, #1
 800afac:	d00a      	beq.n	800afc4 <sinf+0x54>
 800afae:	2802      	cmp	r0, #2
 800afb0:	d00f      	beq.n	800afd2 <sinf+0x62>
 800afb2:	b9c0      	cbnz	r0, 800afe6 <sinf+0x76>
 800afb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800afb8:	ed9d 0a00 	vldr	s0, [sp]
 800afbc:	2001      	movs	r0, #1
 800afbe:	f000 f87f 	bl	800b0c0 <__kernel_sinf>
 800afc2:	e7ea      	b.n	800af9a <sinf+0x2a>
 800afc4:	eddd 0a01 	vldr	s1, [sp, #4]
 800afc8:	ed9d 0a00 	vldr	s0, [sp]
 800afcc:	f000 f820 	bl	800b010 <__kernel_cosf>
 800afd0:	e7e3      	b.n	800af9a <sinf+0x2a>
 800afd2:	eddd 0a01 	vldr	s1, [sp, #4]
 800afd6:	ed9d 0a00 	vldr	s0, [sp]
 800afda:	2001      	movs	r0, #1
 800afdc:	f000 f870 	bl	800b0c0 <__kernel_sinf>
 800afe0:	eeb1 0a40 	vneg.f32	s0, s0
 800afe4:	e7d9      	b.n	800af9a <sinf+0x2a>
 800afe6:	eddd 0a01 	vldr	s1, [sp, #4]
 800afea:	ed9d 0a00 	vldr	s0, [sp]
 800afee:	f000 f80f 	bl	800b010 <__kernel_cosf>
 800aff2:	e7f5      	b.n	800afe0 <sinf+0x70>
 800aff4:	3f490fd8 	.word	0x3f490fd8
 800aff8:	00000000 	.word	0x00000000

0800affc <finitef>:
 800affc:	ee10 3a10 	vmov	r3, s0
 800b000:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b004:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b008:	bfac      	ite	ge
 800b00a:	2000      	movge	r0, #0
 800b00c:	2001      	movlt	r0, #1
 800b00e:	4770      	bx	lr

0800b010 <__kernel_cosf>:
 800b010:	ee10 3a10 	vmov	r3, s0
 800b014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b018:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b01c:	eef0 6a40 	vmov.f32	s13, s0
 800b020:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b024:	d204      	bcs.n	800b030 <__kernel_cosf+0x20>
 800b026:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b02a:	ee17 2a90 	vmov	r2, s15
 800b02e:	b342      	cbz	r2, 800b082 <__kernel_cosf+0x72>
 800b030:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b034:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b0a0 <__kernel_cosf+0x90>
 800b038:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b0a4 <__kernel_cosf+0x94>
 800b03c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a8 <__kernel_cosf+0x98>)
 800b03e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b042:	4293      	cmp	r3, r2
 800b044:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b0ac <__kernel_cosf+0x9c>
 800b048:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b04c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b0b0 <__kernel_cosf+0xa0>
 800b050:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b054:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b0b4 <__kernel_cosf+0xa4>
 800b058:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b05c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b0b8 <__kernel_cosf+0xa8>
 800b060:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b064:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b068:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b06c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b070:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b074:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b078:	d804      	bhi.n	800b084 <__kernel_cosf+0x74>
 800b07a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b07e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b082:	4770      	bx	lr
 800b084:	4a0d      	ldr	r2, [pc, #52]	@ (800b0bc <__kernel_cosf+0xac>)
 800b086:	4293      	cmp	r3, r2
 800b088:	bf9a      	itte	ls
 800b08a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b08e:	ee07 3a10 	vmovls	s14, r3
 800b092:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b096:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b09a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b09e:	e7ec      	b.n	800b07a <__kernel_cosf+0x6a>
 800b0a0:	ad47d74e 	.word	0xad47d74e
 800b0a4:	310f74f6 	.word	0x310f74f6
 800b0a8:	3e999999 	.word	0x3e999999
 800b0ac:	b493f27c 	.word	0xb493f27c
 800b0b0:	37d00d01 	.word	0x37d00d01
 800b0b4:	bab60b61 	.word	0xbab60b61
 800b0b8:	3d2aaaab 	.word	0x3d2aaaab
 800b0bc:	3f480000 	.word	0x3f480000

0800b0c0 <__kernel_sinf>:
 800b0c0:	ee10 3a10 	vmov	r3, s0
 800b0c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b0cc:	d204      	bcs.n	800b0d8 <__kernel_sinf+0x18>
 800b0ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b0d2:	ee17 3a90 	vmov	r3, s15
 800b0d6:	b35b      	cbz	r3, 800b130 <__kernel_sinf+0x70>
 800b0d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b0dc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b134 <__kernel_sinf+0x74>
 800b0e0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b138 <__kernel_sinf+0x78>
 800b0e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b0e8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b13c <__kernel_sinf+0x7c>
 800b0ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b0f0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b140 <__kernel_sinf+0x80>
 800b0f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b0f8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b144 <__kernel_sinf+0x84>
 800b0fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b100:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b104:	b930      	cbnz	r0, 800b114 <__kernel_sinf+0x54>
 800b106:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b148 <__kernel_sinf+0x88>
 800b10a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b10e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b112:	4770      	bx	lr
 800b114:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b118:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b11c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b120:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b124:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b14c <__kernel_sinf+0x8c>
 800b128:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b12c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	2f2ec9d3 	.word	0x2f2ec9d3
 800b138:	b2d72f34 	.word	0xb2d72f34
 800b13c:	3638ef1b 	.word	0x3638ef1b
 800b140:	b9500d01 	.word	0xb9500d01
 800b144:	3c088889 	.word	0x3c088889
 800b148:	be2aaaab 	.word	0xbe2aaaab
 800b14c:	3e2aaaab 	.word	0x3e2aaaab

0800b150 <__ieee754_expf>:
 800b150:	ee10 2a10 	vmov	r2, s0
 800b154:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800b158:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b15c:	d902      	bls.n	800b164 <__ieee754_expf+0x14>
 800b15e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b162:	4770      	bx	lr
 800b164:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b168:	d106      	bne.n	800b178 <__ieee754_expf+0x28>
 800b16a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800b2a4 <__ieee754_expf+0x154>
 800b16e:	2900      	cmp	r1, #0
 800b170:	bf18      	it	ne
 800b172:	eeb0 0a67 	vmovne.f32	s0, s15
 800b176:	4770      	bx	lr
 800b178:	484b      	ldr	r0, [pc, #300]	@ (800b2a8 <__ieee754_expf+0x158>)
 800b17a:	4282      	cmp	r2, r0
 800b17c:	dd02      	ble.n	800b184 <__ieee754_expf+0x34>
 800b17e:	2000      	movs	r0, #0
 800b180:	f000 ba0a 	b.w	800b598 <__math_oflowf>
 800b184:	2a00      	cmp	r2, #0
 800b186:	da05      	bge.n	800b194 <__ieee754_expf+0x44>
 800b188:	4a48      	ldr	r2, [pc, #288]	@ (800b2ac <__ieee754_expf+0x15c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d902      	bls.n	800b194 <__ieee754_expf+0x44>
 800b18e:	2000      	movs	r0, #0
 800b190:	f000 b9fc 	b.w	800b58c <__math_uflowf>
 800b194:	4a46      	ldr	r2, [pc, #280]	@ (800b2b0 <__ieee754_expf+0x160>)
 800b196:	4293      	cmp	r3, r2
 800b198:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800b19c:	d952      	bls.n	800b244 <__ieee754_expf+0xf4>
 800b19e:	4a45      	ldr	r2, [pc, #276]	@ (800b2b4 <__ieee754_expf+0x164>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b1a6:	d834      	bhi.n	800b212 <__ieee754_expf+0xc2>
 800b1a8:	4b43      	ldr	r3, [pc, #268]	@ (800b2b8 <__ieee754_expf+0x168>)
 800b1aa:	4413      	add	r3, r2
 800b1ac:	ed93 7a00 	vldr	s14, [r3]
 800b1b0:	4b42      	ldr	r3, [pc, #264]	@ (800b2bc <__ieee754_expf+0x16c>)
 800b1b2:	4413      	add	r3, r2
 800b1b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b1b8:	f1c1 0201 	rsb	r2, r1, #1
 800b1bc:	edd3 7a00 	vldr	s15, [r3]
 800b1c0:	1a52      	subs	r2, r2, r1
 800b1c2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b1c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b1ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800b2c0 <__ieee754_expf+0x170>
 800b1ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b2c4 <__ieee754_expf+0x174>
 800b1d2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b1d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800b2c8 <__ieee754_expf+0x178>
 800b1da:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1de:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b2cc <__ieee754_expf+0x17c>
 800b1e2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b1e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800b2d0 <__ieee754_expf+0x180>
 800b1ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1ee:	eef0 6a40 	vmov.f32	s13, s0
 800b1f2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b1f6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b1fa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b1fe:	bb92      	cbnz	r2, 800b266 <__ieee754_expf+0x116>
 800b200:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b204:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b208:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b20c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b210:	4770      	bx	lr
 800b212:	4b30      	ldr	r3, [pc, #192]	@ (800b2d4 <__ieee754_expf+0x184>)
 800b214:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b2d8 <__ieee754_expf+0x188>
 800b218:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800b2dc <__ieee754_expf+0x18c>
 800b21c:	4413      	add	r3, r2
 800b21e:	edd3 7a00 	vldr	s15, [r3]
 800b222:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b226:	eeb0 7a40 	vmov.f32	s14, s0
 800b22a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b22e:	ee17 2a90 	vmov	r2, s15
 800b232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b236:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b23a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b2e0 <__ieee754_expf+0x190>
 800b23e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b242:	e7be      	b.n	800b1c2 <__ieee754_expf+0x72>
 800b244:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b248:	d20b      	bcs.n	800b262 <__ieee754_expf+0x112>
 800b24a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b2e4 <__ieee754_expf+0x194>
 800b24e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b252:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	dd02      	ble.n	800b262 <__ieee754_expf+0x112>
 800b25c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b260:	4770      	bx	lr
 800b262:	2200      	movs	r2, #0
 800b264:	e7af      	b.n	800b1c6 <__ieee754_expf+0x76>
 800b266:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b26a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800b26e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b272:	bfb8      	it	lt
 800b274:	3264      	addlt	r2, #100	@ 0x64
 800b276:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b27a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b27e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b282:	ee17 3a90 	vmov	r3, s15
 800b286:	bfab      	itete	ge
 800b288:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b28c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b290:	ee00 3a10 	vmovge	s0, r3
 800b294:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800b2e8 <__ieee754_expf+0x198>
 800b298:	bfbc      	itt	lt
 800b29a:	ee00 3a10 	vmovlt	s0, r3
 800b29e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b2a2:	4770      	bx	lr
 800b2a4:	00000000 	.word	0x00000000
 800b2a8:	42b17217 	.word	0x42b17217
 800b2ac:	42cff1b5 	.word	0x42cff1b5
 800b2b0:	3eb17218 	.word	0x3eb17218
 800b2b4:	3f851591 	.word	0x3f851591
 800b2b8:	0800c040 	.word	0x0800c040
 800b2bc:	0800c038 	.word	0x0800c038
 800b2c0:	3331bb4c 	.word	0x3331bb4c
 800b2c4:	b5ddea0e 	.word	0xb5ddea0e
 800b2c8:	388ab355 	.word	0x388ab355
 800b2cc:	bb360b61 	.word	0xbb360b61
 800b2d0:	3e2aaaab 	.word	0x3e2aaaab
 800b2d4:	0800c048 	.word	0x0800c048
 800b2d8:	3fb8aa3b 	.word	0x3fb8aa3b
 800b2dc:	3f317180 	.word	0x3f317180
 800b2e0:	3717f7d1 	.word	0x3717f7d1
 800b2e4:	7149f2ca 	.word	0x7149f2ca
 800b2e8:	0d800000 	.word	0x0d800000

0800b2ec <__ieee754_rem_pio2f>:
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	ee10 6a10 	vmov	r6, s0
 800b2f2:	4b88      	ldr	r3, [pc, #544]	@ (800b514 <__ieee754_rem_pio2f+0x228>)
 800b2f4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b2f8:	429d      	cmp	r5, r3
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	d805      	bhi.n	800b30c <__ieee754_rem_pio2f+0x20>
 800b300:	2300      	movs	r3, #0
 800b302:	ed80 0a00 	vstr	s0, [r0]
 800b306:	6043      	str	r3, [r0, #4]
 800b308:	2000      	movs	r0, #0
 800b30a:	e022      	b.n	800b352 <__ieee754_rem_pio2f+0x66>
 800b30c:	4b82      	ldr	r3, [pc, #520]	@ (800b518 <__ieee754_rem_pio2f+0x22c>)
 800b30e:	429d      	cmp	r5, r3
 800b310:	d83a      	bhi.n	800b388 <__ieee754_rem_pio2f+0x9c>
 800b312:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b316:	2e00      	cmp	r6, #0
 800b318:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b51c <__ieee754_rem_pio2f+0x230>
 800b31c:	4a80      	ldr	r2, [pc, #512]	@ (800b520 <__ieee754_rem_pio2f+0x234>)
 800b31e:	f023 030f 	bic.w	r3, r3, #15
 800b322:	dd18      	ble.n	800b356 <__ieee754_rem_pio2f+0x6a>
 800b324:	4293      	cmp	r3, r2
 800b326:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b32a:	bf09      	itett	eq
 800b32c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b524 <__ieee754_rem_pio2f+0x238>
 800b330:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b528 <__ieee754_rem_pio2f+0x23c>
 800b334:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b52c <__ieee754_rem_pio2f+0x240>
 800b338:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b33c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b344:	ed80 7a00 	vstr	s14, [r0]
 800b348:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b34c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b350:	2001      	movs	r0, #1
 800b352:	b007      	add	sp, #28
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b356:	4293      	cmp	r3, r2
 800b358:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b35c:	bf09      	itett	eq
 800b35e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b524 <__ieee754_rem_pio2f+0x238>
 800b362:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b528 <__ieee754_rem_pio2f+0x23c>
 800b366:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b52c <__ieee754_rem_pio2f+0x240>
 800b36a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b36e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b376:	ed80 7a00 	vstr	s14, [r0]
 800b37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	e7e4      	b.n	800b352 <__ieee754_rem_pio2f+0x66>
 800b388:	4b69      	ldr	r3, [pc, #420]	@ (800b530 <__ieee754_rem_pio2f+0x244>)
 800b38a:	429d      	cmp	r5, r3
 800b38c:	d873      	bhi.n	800b476 <__ieee754_rem_pio2f+0x18a>
 800b38e:	f000 f8dd 	bl	800b54c <fabsf>
 800b392:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b534 <__ieee754_rem_pio2f+0x248>
 800b396:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b39a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b39e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3a6:	ee17 0a90 	vmov	r0, s15
 800b3aa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b51c <__ieee754_rem_pio2f+0x230>
 800b3ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b3b2:	281f      	cmp	r0, #31
 800b3b4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b528 <__ieee754_rem_pio2f+0x23c>
 800b3b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3bc:	eeb1 6a47 	vneg.f32	s12, s14
 800b3c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b3c4:	ee16 1a90 	vmov	r1, s13
 800b3c8:	dc09      	bgt.n	800b3de <__ieee754_rem_pio2f+0xf2>
 800b3ca:	4a5b      	ldr	r2, [pc, #364]	@ (800b538 <__ieee754_rem_pio2f+0x24c>)
 800b3cc:	1e47      	subs	r7, r0, #1
 800b3ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b3d2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b3d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d107      	bne.n	800b3ee <__ieee754_rem_pio2f+0x102>
 800b3de:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b3e2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b3e6:	2a08      	cmp	r2, #8
 800b3e8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b3ec:	dc14      	bgt.n	800b418 <__ieee754_rem_pio2f+0x12c>
 800b3ee:	6021      	str	r1, [r4, #0]
 800b3f0:	ed94 7a00 	vldr	s14, [r4]
 800b3f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3fe:	ed84 0a01 	vstr	s0, [r4, #4]
 800b402:	daa6      	bge.n	800b352 <__ieee754_rem_pio2f+0x66>
 800b404:	eeb1 7a47 	vneg.f32	s14, s14
 800b408:	eeb1 0a40 	vneg.f32	s0, s0
 800b40c:	ed84 7a00 	vstr	s14, [r4]
 800b410:	ed84 0a01 	vstr	s0, [r4, #4]
 800b414:	4240      	negs	r0, r0
 800b416:	e79c      	b.n	800b352 <__ieee754_rem_pio2f+0x66>
 800b418:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b524 <__ieee754_rem_pio2f+0x238>
 800b41c:	eef0 6a40 	vmov.f32	s13, s0
 800b420:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b424:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b428:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b42c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b52c <__ieee754_rem_pio2f+0x240>
 800b430:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b434:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b438:	ee15 2a90 	vmov	r2, s11
 800b43c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b440:	1a5b      	subs	r3, r3, r1
 800b442:	2b19      	cmp	r3, #25
 800b444:	dc04      	bgt.n	800b450 <__ieee754_rem_pio2f+0x164>
 800b446:	edc4 5a00 	vstr	s11, [r4]
 800b44a:	eeb0 0a66 	vmov.f32	s0, s13
 800b44e:	e7cf      	b.n	800b3f0 <__ieee754_rem_pio2f+0x104>
 800b450:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b53c <__ieee754_rem_pio2f+0x250>
 800b454:	eeb0 0a66 	vmov.f32	s0, s13
 800b458:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b45c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b460:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b540 <__ieee754_rem_pio2f+0x254>
 800b464:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b468:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b46c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b470:	ed84 7a00 	vstr	s14, [r4]
 800b474:	e7bc      	b.n	800b3f0 <__ieee754_rem_pio2f+0x104>
 800b476:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b47a:	d306      	bcc.n	800b48a <__ieee754_rem_pio2f+0x19e>
 800b47c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b480:	edc0 7a01 	vstr	s15, [r0, #4]
 800b484:	edc0 7a00 	vstr	s15, [r0]
 800b488:	e73e      	b.n	800b308 <__ieee754_rem_pio2f+0x1c>
 800b48a:	15ea      	asrs	r2, r5, #23
 800b48c:	3a86      	subs	r2, #134	@ 0x86
 800b48e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b49a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b544 <__ieee754_rem_pio2f+0x258>
 800b49e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b4aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4ba:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b4be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	edcd 7a05 	vstr	s15, [sp, #20]
 800b4ce:	d11e      	bne.n	800b50e <__ieee754_rem_pio2f+0x222>
 800b4d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d8:	bf0c      	ite	eq
 800b4da:	2301      	moveq	r3, #1
 800b4dc:	2302      	movne	r3, #2
 800b4de:	491a      	ldr	r1, [pc, #104]	@ (800b548 <__ieee754_rem_pio2f+0x25c>)
 800b4e0:	9101      	str	r1, [sp, #4]
 800b4e2:	2102      	movs	r1, #2
 800b4e4:	9100      	str	r1, [sp, #0]
 800b4e6:	a803      	add	r0, sp, #12
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f000 f85b 	bl	800b5a4 <__kernel_rem_pio2f>
 800b4ee:	2e00      	cmp	r6, #0
 800b4f0:	f6bf af2f 	bge.w	800b352 <__ieee754_rem_pio2f+0x66>
 800b4f4:	edd4 7a00 	vldr	s15, [r4]
 800b4f8:	eef1 7a67 	vneg.f32	s15, s15
 800b4fc:	edc4 7a00 	vstr	s15, [r4]
 800b500:	edd4 7a01 	vldr	s15, [r4, #4]
 800b504:	eef1 7a67 	vneg.f32	s15, s15
 800b508:	edc4 7a01 	vstr	s15, [r4, #4]
 800b50c:	e782      	b.n	800b414 <__ieee754_rem_pio2f+0x128>
 800b50e:	2303      	movs	r3, #3
 800b510:	e7e5      	b.n	800b4de <__ieee754_rem_pio2f+0x1f2>
 800b512:	bf00      	nop
 800b514:	3f490fd8 	.word	0x3f490fd8
 800b518:	4016cbe3 	.word	0x4016cbe3
 800b51c:	3fc90f80 	.word	0x3fc90f80
 800b520:	3fc90fd0 	.word	0x3fc90fd0
 800b524:	37354400 	.word	0x37354400
 800b528:	37354443 	.word	0x37354443
 800b52c:	2e85a308 	.word	0x2e85a308
 800b530:	43490f80 	.word	0x43490f80
 800b534:	3f22f984 	.word	0x3f22f984
 800b538:	0800c050 	.word	0x0800c050
 800b53c:	2e85a300 	.word	0x2e85a300
 800b540:	248d3132 	.word	0x248d3132
 800b544:	43800000 	.word	0x43800000
 800b548:	0800c0d0 	.word	0x0800c0d0

0800b54c <fabsf>:
 800b54c:	ee10 3a10 	vmov	r3, s0
 800b550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b554:	ee00 3a10 	vmov	s0, r3
 800b558:	4770      	bx	lr

0800b55a <with_errnof>:
 800b55a:	b510      	push	{r4, lr}
 800b55c:	ed2d 8b02 	vpush	{d8}
 800b560:	eeb0 8a40 	vmov.f32	s16, s0
 800b564:	4604      	mov	r4, r0
 800b566:	f7fd fc13 	bl	8008d90 <__errno>
 800b56a:	eeb0 0a48 	vmov.f32	s0, s16
 800b56e:	ecbd 8b02 	vpop	{d8}
 800b572:	6004      	str	r4, [r0, #0]
 800b574:	bd10      	pop	{r4, pc}

0800b576 <xflowf>:
 800b576:	b130      	cbz	r0, 800b586 <xflowf+0x10>
 800b578:	eef1 7a40 	vneg.f32	s15, s0
 800b57c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b580:	2022      	movs	r0, #34	@ 0x22
 800b582:	f7ff bfea 	b.w	800b55a <with_errnof>
 800b586:	eef0 7a40 	vmov.f32	s15, s0
 800b58a:	e7f7      	b.n	800b57c <xflowf+0x6>

0800b58c <__math_uflowf>:
 800b58c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b594 <__math_uflowf+0x8>
 800b590:	f7ff bff1 	b.w	800b576 <xflowf>
 800b594:	10000000 	.word	0x10000000

0800b598 <__math_oflowf>:
 800b598:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b5a0 <__math_oflowf+0x8>
 800b59c:	f7ff bfeb 	b.w	800b576 <xflowf>
 800b5a0:	70000000 	.word	0x70000000

0800b5a4 <__kernel_rem_pio2f>:
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	ed2d 8b04 	vpush	{d8-d9}
 800b5ac:	b0d9      	sub	sp, #356	@ 0x164
 800b5ae:	4690      	mov	r8, r2
 800b5b0:	9001      	str	r0, [sp, #4]
 800b5b2:	4ab9      	ldr	r2, [pc, #740]	@ (800b898 <__kernel_rem_pio2f+0x2f4>)
 800b5b4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b5b6:	f118 0f04 	cmn.w	r8, #4
 800b5ba:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b5be:	460f      	mov	r7, r1
 800b5c0:	f103 3bff 	add.w	fp, r3, #4294967295
 800b5c4:	db27      	blt.n	800b616 <__kernel_rem_pio2f+0x72>
 800b5c6:	f1b8 0203 	subs.w	r2, r8, #3
 800b5ca:	bf48      	it	mi
 800b5cc:	f108 0204 	addmi.w	r2, r8, #4
 800b5d0:	10d2      	asrs	r2, r2, #3
 800b5d2:	1c55      	adds	r5, r2, #1
 800b5d4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b5d6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b5da:	00e8      	lsls	r0, r5, #3
 800b5dc:	eba2 060b 	sub.w	r6, r2, fp
 800b5e0:	9002      	str	r0, [sp, #8]
 800b5e2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b5e6:	eb0a 0c0b 	add.w	ip, sl, fp
 800b5ea:	ac1c      	add	r4, sp, #112	@ 0x70
 800b5ec:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	4560      	cmp	r0, ip
 800b5f4:	dd11      	ble.n	800b61a <__kernel_rem_pio2f+0x76>
 800b5f6:	a91c      	add	r1, sp, #112	@ 0x70
 800b5f8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b5fc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b600:	f04f 0c00 	mov.w	ip, #0
 800b604:	45d4      	cmp	ip, sl
 800b606:	dc27      	bgt.n	800b658 <__kernel_rem_pio2f+0xb4>
 800b608:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b60c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b610:	4606      	mov	r6, r0
 800b612:	2400      	movs	r4, #0
 800b614:	e016      	b.n	800b644 <__kernel_rem_pio2f+0xa0>
 800b616:	2200      	movs	r2, #0
 800b618:	e7db      	b.n	800b5d2 <__kernel_rem_pio2f+0x2e>
 800b61a:	42c6      	cmn	r6, r0
 800b61c:	bf5d      	ittte	pl
 800b61e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b622:	ee07 1a90 	vmovpl	s15, r1
 800b626:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b62a:	eef0 7a47 	vmovmi.f32	s15, s14
 800b62e:	ece4 7a01 	vstmia	r4!, {s15}
 800b632:	3001      	adds	r0, #1
 800b634:	e7dd      	b.n	800b5f2 <__kernel_rem_pio2f+0x4e>
 800b636:	ecfe 6a01 	vldmia	lr!, {s13}
 800b63a:	ed96 7a00 	vldr	s14, [r6]
 800b63e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b642:	3401      	adds	r4, #1
 800b644:	455c      	cmp	r4, fp
 800b646:	f1a6 0604 	sub.w	r6, r6, #4
 800b64a:	ddf4      	ble.n	800b636 <__kernel_rem_pio2f+0x92>
 800b64c:	ece9 7a01 	vstmia	r9!, {s15}
 800b650:	f10c 0c01 	add.w	ip, ip, #1
 800b654:	3004      	adds	r0, #4
 800b656:	e7d5      	b.n	800b604 <__kernel_rem_pio2f+0x60>
 800b658:	a908      	add	r1, sp, #32
 800b65a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b65e:	9104      	str	r1, [sp, #16]
 800b660:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b662:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800b8a4 <__kernel_rem_pio2f+0x300>
 800b666:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800b8a0 <__kernel_rem_pio2f+0x2fc>
 800b66a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b66e:	9203      	str	r2, [sp, #12]
 800b670:	4654      	mov	r4, sl
 800b672:	00a2      	lsls	r2, r4, #2
 800b674:	9205      	str	r2, [sp, #20]
 800b676:	aa58      	add	r2, sp, #352	@ 0x160
 800b678:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b67c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b680:	a944      	add	r1, sp, #272	@ 0x110
 800b682:	aa08      	add	r2, sp, #32
 800b684:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b688:	4694      	mov	ip, r2
 800b68a:	4626      	mov	r6, r4
 800b68c:	2e00      	cmp	r6, #0
 800b68e:	f1a0 0004 	sub.w	r0, r0, #4
 800b692:	dc4c      	bgt.n	800b72e <__kernel_rem_pio2f+0x18a>
 800b694:	4628      	mov	r0, r5
 800b696:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b69a:	f000 f9f5 	bl	800ba88 <scalbnf>
 800b69e:	eeb0 8a40 	vmov.f32	s16, s0
 800b6a2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b6a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b6aa:	f000 fa53 	bl	800bb54 <floorf>
 800b6ae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b6b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b6b6:	2d00      	cmp	r5, #0
 800b6b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b6c0:	ee17 9a90 	vmov	r9, s15
 800b6c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b6cc:	dd41      	ble.n	800b752 <__kernel_rem_pio2f+0x1ae>
 800b6ce:	f104 3cff 	add.w	ip, r4, #4294967295
 800b6d2:	a908      	add	r1, sp, #32
 800b6d4:	f1c5 0e08 	rsb	lr, r5, #8
 800b6d8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b6dc:	fa46 f00e 	asr.w	r0, r6, lr
 800b6e0:	4481      	add	r9, r0
 800b6e2:	fa00 f00e 	lsl.w	r0, r0, lr
 800b6e6:	1a36      	subs	r6, r6, r0
 800b6e8:	f1c5 0007 	rsb	r0, r5, #7
 800b6ec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b6f0:	4106      	asrs	r6, r0
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	dd3c      	ble.n	800b770 <__kernel_rem_pio2f+0x1cc>
 800b6f6:	f04f 0e00 	mov.w	lr, #0
 800b6fa:	f109 0901 	add.w	r9, r9, #1
 800b6fe:	4670      	mov	r0, lr
 800b700:	4574      	cmp	r4, lr
 800b702:	dc68      	bgt.n	800b7d6 <__kernel_rem_pio2f+0x232>
 800b704:	2d00      	cmp	r5, #0
 800b706:	dd03      	ble.n	800b710 <__kernel_rem_pio2f+0x16c>
 800b708:	2d01      	cmp	r5, #1
 800b70a:	d074      	beq.n	800b7f6 <__kernel_rem_pio2f+0x252>
 800b70c:	2d02      	cmp	r5, #2
 800b70e:	d07d      	beq.n	800b80c <__kernel_rem_pio2f+0x268>
 800b710:	2e02      	cmp	r6, #2
 800b712:	d12d      	bne.n	800b770 <__kernel_rem_pio2f+0x1cc>
 800b714:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b718:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b71c:	b340      	cbz	r0, 800b770 <__kernel_rem_pio2f+0x1cc>
 800b71e:	4628      	mov	r0, r5
 800b720:	9306      	str	r3, [sp, #24]
 800b722:	f000 f9b1 	bl	800ba88 <scalbnf>
 800b726:	9b06      	ldr	r3, [sp, #24]
 800b728:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b72c:	e020      	b.n	800b770 <__kernel_rem_pio2f+0x1cc>
 800b72e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b732:	3e01      	subs	r6, #1
 800b734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b73c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b740:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b744:	ecac 0a01 	vstmia	ip!, {s0}
 800b748:	ed90 0a00 	vldr	s0, [r0]
 800b74c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b750:	e79c      	b.n	800b68c <__kernel_rem_pio2f+0xe8>
 800b752:	d105      	bne.n	800b760 <__kernel_rem_pio2f+0x1bc>
 800b754:	1e60      	subs	r0, r4, #1
 800b756:	a908      	add	r1, sp, #32
 800b758:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b75c:	11f6      	asrs	r6, r6, #7
 800b75e:	e7c8      	b.n	800b6f2 <__kernel_rem_pio2f+0x14e>
 800b760:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b764:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76c:	da31      	bge.n	800b7d2 <__kernel_rem_pio2f+0x22e>
 800b76e:	2600      	movs	r6, #0
 800b770:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b778:	f040 8098 	bne.w	800b8ac <__kernel_rem_pio2f+0x308>
 800b77c:	1e60      	subs	r0, r4, #1
 800b77e:	2200      	movs	r2, #0
 800b780:	4550      	cmp	r0, sl
 800b782:	da4b      	bge.n	800b81c <__kernel_rem_pio2f+0x278>
 800b784:	2a00      	cmp	r2, #0
 800b786:	d065      	beq.n	800b854 <__kernel_rem_pio2f+0x2b0>
 800b788:	3c01      	subs	r4, #1
 800b78a:	ab08      	add	r3, sp, #32
 800b78c:	3d08      	subs	r5, #8
 800b78e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d0f8      	beq.n	800b788 <__kernel_rem_pio2f+0x1e4>
 800b796:	4628      	mov	r0, r5
 800b798:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b79c:	f000 f974 	bl	800ba88 <scalbnf>
 800b7a0:	1c63      	adds	r3, r4, #1
 800b7a2:	aa44      	add	r2, sp, #272	@ 0x110
 800b7a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b8a4 <__kernel_rem_pio2f+0x300>
 800b7a8:	0099      	lsls	r1, r3, #2
 800b7aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b7ae:	4623      	mov	r3, r4
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f280 80a9 	bge.w	800b908 <__kernel_rem_pio2f+0x364>
 800b7b6:	4623      	mov	r3, r4
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f2c0 80c7 	blt.w	800b94c <__kernel_rem_pio2f+0x3a8>
 800b7be:	aa44      	add	r2, sp, #272	@ 0x110
 800b7c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b7c4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b89c <__kernel_rem_pio2f+0x2f8>
 800b7c8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	1ae2      	subs	r2, r4, r3
 800b7d0:	e0b1      	b.n	800b936 <__kernel_rem_pio2f+0x392>
 800b7d2:	2602      	movs	r6, #2
 800b7d4:	e78f      	b.n	800b6f6 <__kernel_rem_pio2f+0x152>
 800b7d6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b7da:	b948      	cbnz	r0, 800b7f0 <__kernel_rem_pio2f+0x24c>
 800b7dc:	b121      	cbz	r1, 800b7e8 <__kernel_rem_pio2f+0x244>
 800b7de:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b7e2:	f842 1c04 	str.w	r1, [r2, #-4]
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	f10e 0e01 	add.w	lr, lr, #1
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	e787      	b.n	800b700 <__kernel_rem_pio2f+0x15c>
 800b7f0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b7f4:	e7f5      	b.n	800b7e2 <__kernel_rem_pio2f+0x23e>
 800b7f6:	f104 3cff 	add.w	ip, r4, #4294967295
 800b7fa:	aa08      	add	r2, sp, #32
 800b7fc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b804:	a908      	add	r1, sp, #32
 800b806:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b80a:	e781      	b.n	800b710 <__kernel_rem_pio2f+0x16c>
 800b80c:	f104 3cff 	add.w	ip, r4, #4294967295
 800b810:	aa08      	add	r2, sp, #32
 800b812:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b816:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b81a:	e7f3      	b.n	800b804 <__kernel_rem_pio2f+0x260>
 800b81c:	a908      	add	r1, sp, #32
 800b81e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b822:	3801      	subs	r0, #1
 800b824:	430a      	orrs	r2, r1
 800b826:	e7ab      	b.n	800b780 <__kernel_rem_pio2f+0x1dc>
 800b828:	3201      	adds	r2, #1
 800b82a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d0fa      	beq.n	800b828 <__kernel_rem_pio2f+0x284>
 800b832:	9905      	ldr	r1, [sp, #20]
 800b834:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b838:	eb0d 0001 	add.w	r0, sp, r1
 800b83c:	18e6      	adds	r6, r4, r3
 800b83e:	a91c      	add	r1, sp, #112	@ 0x70
 800b840:	f104 0c01 	add.w	ip, r4, #1
 800b844:	384c      	subs	r0, #76	@ 0x4c
 800b846:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b84a:	4422      	add	r2, r4
 800b84c:	4562      	cmp	r2, ip
 800b84e:	da04      	bge.n	800b85a <__kernel_rem_pio2f+0x2b6>
 800b850:	4614      	mov	r4, r2
 800b852:	e70e      	b.n	800b672 <__kernel_rem_pio2f+0xce>
 800b854:	9804      	ldr	r0, [sp, #16]
 800b856:	2201      	movs	r2, #1
 800b858:	e7e7      	b.n	800b82a <__kernel_rem_pio2f+0x286>
 800b85a:	9903      	ldr	r1, [sp, #12]
 800b85c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b860:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b864:	9105      	str	r1, [sp, #20]
 800b866:	ee07 1a90 	vmov	s15, r1
 800b86a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b86e:	2400      	movs	r4, #0
 800b870:	ece6 7a01 	vstmia	r6!, {s15}
 800b874:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b878:	46b1      	mov	r9, r6
 800b87a:	455c      	cmp	r4, fp
 800b87c:	dd04      	ble.n	800b888 <__kernel_rem_pio2f+0x2e4>
 800b87e:	ece0 7a01 	vstmia	r0!, {s15}
 800b882:	f10c 0c01 	add.w	ip, ip, #1
 800b886:	e7e1      	b.n	800b84c <__kernel_rem_pio2f+0x2a8>
 800b888:	ecfe 6a01 	vldmia	lr!, {s13}
 800b88c:	ed39 7a01 	vldmdb	r9!, {s14}
 800b890:	3401      	adds	r4, #1
 800b892:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b896:	e7f0      	b.n	800b87a <__kernel_rem_pio2f+0x2d6>
 800b898:	0800c414 	.word	0x0800c414
 800b89c:	0800c3e8 	.word	0x0800c3e8
 800b8a0:	43800000 	.word	0x43800000
 800b8a4:	3b800000 	.word	0x3b800000
 800b8a8:	00000000 	.word	0x00000000
 800b8ac:	9b02      	ldr	r3, [sp, #8]
 800b8ae:	eeb0 0a48 	vmov.f32	s0, s16
 800b8b2:	eba3 0008 	sub.w	r0, r3, r8
 800b8b6:	f000 f8e7 	bl	800ba88 <scalbnf>
 800b8ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b8a0 <__kernel_rem_pio2f+0x2fc>
 800b8be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c6:	db19      	blt.n	800b8fc <__kernel_rem_pio2f+0x358>
 800b8c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b8a4 <__kernel_rem_pio2f+0x300>
 800b8cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b8d0:	aa08      	add	r2, sp, #32
 800b8d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8d6:	3508      	adds	r5, #8
 800b8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b8e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b8e8:	ee10 3a10 	vmov	r3, s0
 800b8ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b8f0:	ee17 3a90 	vmov	r3, s15
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b8fa:	e74c      	b.n	800b796 <__kernel_rem_pio2f+0x1f2>
 800b8fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b900:	aa08      	add	r2, sp, #32
 800b902:	ee10 3a10 	vmov	r3, s0
 800b906:	e7f6      	b.n	800b8f6 <__kernel_rem_pio2f+0x352>
 800b908:	a808      	add	r0, sp, #32
 800b90a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b90e:	9001      	str	r0, [sp, #4]
 800b910:	ee07 0a90 	vmov	s15, r0
 800b914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b918:	3b01      	subs	r3, #1
 800b91a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b91e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b922:	ed62 7a01 	vstmdb	r2!, {s15}
 800b926:	e743      	b.n	800b7b0 <__kernel_rem_pio2f+0x20c>
 800b928:	ecfc 6a01 	vldmia	ip!, {s13}
 800b92c:	ecb5 7a01 	vldmia	r5!, {s14}
 800b930:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b934:	3001      	adds	r0, #1
 800b936:	4550      	cmp	r0, sl
 800b938:	dc01      	bgt.n	800b93e <__kernel_rem_pio2f+0x39a>
 800b93a:	4282      	cmp	r2, r0
 800b93c:	daf4      	bge.n	800b928 <__kernel_rem_pio2f+0x384>
 800b93e:	a858      	add	r0, sp, #352	@ 0x160
 800b940:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b944:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800b948:	3b01      	subs	r3, #1
 800b94a:	e735      	b.n	800b7b8 <__kernel_rem_pio2f+0x214>
 800b94c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b94e:	2b02      	cmp	r3, #2
 800b950:	dc09      	bgt.n	800b966 <__kernel_rem_pio2f+0x3c2>
 800b952:	2b00      	cmp	r3, #0
 800b954:	dc2b      	bgt.n	800b9ae <__kernel_rem_pio2f+0x40a>
 800b956:	d044      	beq.n	800b9e2 <__kernel_rem_pio2f+0x43e>
 800b958:	f009 0007 	and.w	r0, r9, #7
 800b95c:	b059      	add	sp, #356	@ 0x164
 800b95e:	ecbd 8b04 	vpop	{d8-d9}
 800b962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b966:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d1f5      	bne.n	800b958 <__kernel_rem_pio2f+0x3b4>
 800b96c:	aa30      	add	r2, sp, #192	@ 0xc0
 800b96e:	1f0b      	subs	r3, r1, #4
 800b970:	4413      	add	r3, r2
 800b972:	461a      	mov	r2, r3
 800b974:	4620      	mov	r0, r4
 800b976:	2800      	cmp	r0, #0
 800b978:	f1a2 0204 	sub.w	r2, r2, #4
 800b97c:	dc52      	bgt.n	800ba24 <__kernel_rem_pio2f+0x480>
 800b97e:	4622      	mov	r2, r4
 800b980:	2a01      	cmp	r2, #1
 800b982:	f1a3 0304 	sub.w	r3, r3, #4
 800b986:	dc5d      	bgt.n	800ba44 <__kernel_rem_pio2f+0x4a0>
 800b988:	ab30      	add	r3, sp, #192	@ 0xc0
 800b98a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b98e:	440b      	add	r3, r1
 800b990:	2c01      	cmp	r4, #1
 800b992:	dc67      	bgt.n	800ba64 <__kernel_rem_pio2f+0x4c0>
 800b994:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b998:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800b99c:	2e00      	cmp	r6, #0
 800b99e:	d167      	bne.n	800ba70 <__kernel_rem_pio2f+0x4cc>
 800b9a0:	edc7 6a00 	vstr	s13, [r7]
 800b9a4:	ed87 7a01 	vstr	s14, [r7, #4]
 800b9a8:	edc7 7a02 	vstr	s15, [r7, #8]
 800b9ac:	e7d4      	b.n	800b958 <__kernel_rem_pio2f+0x3b4>
 800b9ae:	ab30      	add	r3, sp, #192	@ 0xc0
 800b9b0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b9b4:	440b      	add	r3, r1
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	da24      	bge.n	800ba06 <__kernel_rem_pio2f+0x462>
 800b9bc:	b34e      	cbz	r6, 800ba12 <__kernel_rem_pio2f+0x46e>
 800b9be:	eef1 7a47 	vneg.f32	s15, s14
 800b9c2:	edc7 7a00 	vstr	s15, [r7]
 800b9c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800b9ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9ce:	aa31      	add	r2, sp, #196	@ 0xc4
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	da20      	bge.n	800ba18 <__kernel_rem_pio2f+0x474>
 800b9d6:	b10e      	cbz	r6, 800b9dc <__kernel_rem_pio2f+0x438>
 800b9d8:	eef1 7a67 	vneg.f32	s15, s15
 800b9dc:	edc7 7a01 	vstr	s15, [r7, #4]
 800b9e0:	e7ba      	b.n	800b958 <__kernel_rem_pio2f+0x3b4>
 800b9e2:	ab30      	add	r3, sp, #192	@ 0xc0
 800b9e4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800b8a8 <__kernel_rem_pio2f+0x304>
 800b9e8:	440b      	add	r3, r1
 800b9ea:	2c00      	cmp	r4, #0
 800b9ec:	da05      	bge.n	800b9fa <__kernel_rem_pio2f+0x456>
 800b9ee:	b10e      	cbz	r6, 800b9f4 <__kernel_rem_pio2f+0x450>
 800b9f0:	eef1 7a67 	vneg.f32	s15, s15
 800b9f4:	edc7 7a00 	vstr	s15, [r7]
 800b9f8:	e7ae      	b.n	800b958 <__kernel_rem_pio2f+0x3b4>
 800b9fa:	ed33 7a01 	vldmdb	r3!, {s14}
 800b9fe:	3c01      	subs	r4, #1
 800ba00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba04:	e7f1      	b.n	800b9ea <__kernel_rem_pio2f+0x446>
 800ba06:	ed73 7a01 	vldmdb	r3!, {s15}
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba10:	e7d2      	b.n	800b9b8 <__kernel_rem_pio2f+0x414>
 800ba12:	eef0 7a47 	vmov.f32	s15, s14
 800ba16:	e7d4      	b.n	800b9c2 <__kernel_rem_pio2f+0x41e>
 800ba18:	ecb2 7a01 	vldmia	r2!, {s14}
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba22:	e7d6      	b.n	800b9d2 <__kernel_rem_pio2f+0x42e>
 800ba24:	edd2 7a00 	vldr	s15, [r2]
 800ba28:	edd2 6a01 	vldr	s13, [r2, #4]
 800ba2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ba30:	3801      	subs	r0, #1
 800ba32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba36:	ed82 7a00 	vstr	s14, [r2]
 800ba3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba3e:	edc2 7a01 	vstr	s15, [r2, #4]
 800ba42:	e798      	b.n	800b976 <__kernel_rem_pio2f+0x3d2>
 800ba44:	edd3 7a00 	vldr	s15, [r3]
 800ba48:	edd3 6a01 	vldr	s13, [r3, #4]
 800ba4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ba50:	3a01      	subs	r2, #1
 800ba52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba56:	ed83 7a00 	vstr	s14, [r3]
 800ba5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba5e:	edc3 7a01 	vstr	s15, [r3, #4]
 800ba62:	e78d      	b.n	800b980 <__kernel_rem_pio2f+0x3dc>
 800ba64:	ed33 7a01 	vldmdb	r3!, {s14}
 800ba68:	3c01      	subs	r4, #1
 800ba6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba6e:	e78f      	b.n	800b990 <__kernel_rem_pio2f+0x3ec>
 800ba70:	eef1 6a66 	vneg.f32	s13, s13
 800ba74:	eeb1 7a47 	vneg.f32	s14, s14
 800ba78:	edc7 6a00 	vstr	s13, [r7]
 800ba7c:	ed87 7a01 	vstr	s14, [r7, #4]
 800ba80:	eef1 7a67 	vneg.f32	s15, s15
 800ba84:	e790      	b.n	800b9a8 <__kernel_rem_pio2f+0x404>
 800ba86:	bf00      	nop

0800ba88 <scalbnf>:
 800ba88:	ee10 3a10 	vmov	r3, s0
 800ba8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ba90:	d02b      	beq.n	800baea <scalbnf+0x62>
 800ba92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ba96:	d302      	bcc.n	800ba9e <scalbnf+0x16>
 800ba98:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba9c:	4770      	bx	lr
 800ba9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800baa2:	d123      	bne.n	800baec <scalbnf+0x64>
 800baa4:	4b24      	ldr	r3, [pc, #144]	@ (800bb38 <scalbnf+0xb0>)
 800baa6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bb3c <scalbnf+0xb4>
 800baaa:	4298      	cmp	r0, r3
 800baac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bab0:	db17      	blt.n	800bae2 <scalbnf+0x5a>
 800bab2:	ee10 3a10 	vmov	r3, s0
 800bab6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800baba:	3a19      	subs	r2, #25
 800babc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bac0:	4288      	cmp	r0, r1
 800bac2:	dd15      	ble.n	800baf0 <scalbnf+0x68>
 800bac4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bb40 <scalbnf+0xb8>
 800bac8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bb44 <scalbnf+0xbc>
 800bacc:	ee10 3a10 	vmov	r3, s0
 800bad0:	eeb0 7a67 	vmov.f32	s14, s15
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bfb8      	it	lt
 800bad8:	eef0 7a66 	vmovlt.f32	s15, s13
 800badc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bae0:	4770      	bx	lr
 800bae2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bb48 <scalbnf+0xc0>
 800bae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800baea:	4770      	bx	lr
 800baec:	0dd2      	lsrs	r2, r2, #23
 800baee:	e7e5      	b.n	800babc <scalbnf+0x34>
 800baf0:	4410      	add	r0, r2
 800baf2:	28fe      	cmp	r0, #254	@ 0xfe
 800baf4:	dce6      	bgt.n	800bac4 <scalbnf+0x3c>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	dd06      	ble.n	800bb08 <scalbnf+0x80>
 800bafa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bafe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bb02:	ee00 3a10 	vmov	s0, r3
 800bb06:	4770      	bx	lr
 800bb08:	f110 0f16 	cmn.w	r0, #22
 800bb0c:	da09      	bge.n	800bb22 <scalbnf+0x9a>
 800bb0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bb48 <scalbnf+0xc0>
 800bb12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bb4c <scalbnf+0xc4>
 800bb16:	ee10 3a10 	vmov	r3, s0
 800bb1a:	eeb0 7a67 	vmov.f32	s14, s15
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	e7d9      	b.n	800bad6 <scalbnf+0x4e>
 800bb22:	3019      	adds	r0, #25
 800bb24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bb28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bb2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bb50 <scalbnf+0xc8>
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	e7d7      	b.n	800bae6 <scalbnf+0x5e>
 800bb36:	bf00      	nop
 800bb38:	ffff3cb0 	.word	0xffff3cb0
 800bb3c:	4c000000 	.word	0x4c000000
 800bb40:	7149f2ca 	.word	0x7149f2ca
 800bb44:	f149f2ca 	.word	0xf149f2ca
 800bb48:	0da24260 	.word	0x0da24260
 800bb4c:	8da24260 	.word	0x8da24260
 800bb50:	33000000 	.word	0x33000000

0800bb54 <floorf>:
 800bb54:	ee10 3a10 	vmov	r3, s0
 800bb58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bb5c:	3a7f      	subs	r2, #127	@ 0x7f
 800bb5e:	2a16      	cmp	r2, #22
 800bb60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb64:	dc2b      	bgt.n	800bbbe <floorf+0x6a>
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	da12      	bge.n	800bb90 <floorf+0x3c>
 800bb6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bbd0 <floorf+0x7c>
 800bb6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7a:	dd06      	ble.n	800bb8a <floorf+0x36>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	da24      	bge.n	800bbca <floorf+0x76>
 800bb80:	2900      	cmp	r1, #0
 800bb82:	4b14      	ldr	r3, [pc, #80]	@ (800bbd4 <floorf+0x80>)
 800bb84:	bf08      	it	eq
 800bb86:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bb8a:	ee00 3a10 	vmov	s0, r3
 800bb8e:	4770      	bx	lr
 800bb90:	4911      	ldr	r1, [pc, #68]	@ (800bbd8 <floorf+0x84>)
 800bb92:	4111      	asrs	r1, r2
 800bb94:	420b      	tst	r3, r1
 800bb96:	d0fa      	beq.n	800bb8e <floorf+0x3a>
 800bb98:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bbd0 <floorf+0x7c>
 800bb9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bba0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba8:	ddef      	ble.n	800bb8a <floorf+0x36>
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bfbe      	ittt	lt
 800bbae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bbb2:	fa40 f202 	asrlt.w	r2, r0, r2
 800bbb6:	189b      	addlt	r3, r3, r2
 800bbb8:	ea23 0301 	bic.w	r3, r3, r1
 800bbbc:	e7e5      	b.n	800bb8a <floorf+0x36>
 800bbbe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bbc2:	d3e4      	bcc.n	800bb8e <floorf+0x3a>
 800bbc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbc8:	4770      	bx	lr
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e7dd      	b.n	800bb8a <floorf+0x36>
 800bbce:	bf00      	nop
 800bbd0:	7149f2ca 	.word	0x7149f2ca
 800bbd4:	bf800000 	.word	0xbf800000
 800bbd8:	007fffff 	.word	0x007fffff

0800bbdc <_init>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr

0800bbe8 <_fini>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr
